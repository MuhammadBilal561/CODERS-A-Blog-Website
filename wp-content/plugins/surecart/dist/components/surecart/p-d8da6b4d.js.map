{"version":3,"names":["processors","getSerializedState","state","onChange","on","dispose","createStore","methods","manualPaymentMethods","disabled","sortOrder","paymentMethods","mollie","instances","stripe","undefined","config","paymentElement","newValue","oldValue","JSON","stringify","availableProcessors","sortByArray","filter","processor","live_mode","checkoutState","mode","includes","processor_type","_a","checkout","reusable_payment_method_required","recurring_enabled","_","filtered","some","p","getProcessorByType","type","find","getAvailableProcessor","hasOtherAvailableCreditCardProcessor","availableManualPaymentMethods","id","reusable","availableMethodTypes","method","window","ApplePaySession","_b","canMakePayments","call","availableProcessorChoices","hasMultipleProcessorChoices","length","availableMethodChoices","Boolean","hasMultipleMethodChoices"],"sources":["./src/store/processors/store.ts","./src/store/processors/getters.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport { ManualPaymentMethod, PaymentMethodType, Processor } from '../../types';\nimport { getSerializedState } from '@store/utils';\nconst { processors } = getSerializedState();\n\ninterface Store {\n  processors: Processor[];\n  methods: PaymentMethodType[];\n  manualPaymentMethods: ManualPaymentMethod[];\n  disabled: {\n    processors: string[];\n  };\n  sortOrder: {\n    processors: string[];\n    manualPaymentMethods: string[];\n    paymentMethods: {\n      mollie: string[];\n    };\n  };\n  instances: {\n    stripe?: any;\n    stripeElements: any;\n  };\n  config: {\n    stripe: {\n      paymentElement: boolean;\n    };\n  };\n}\n\nconst { state, onChange, on, dispose } = createStore<Store>(\n  {\n    processors: [],\n    methods: [],\n    manualPaymentMethods: [],\n    disabled: {\n      processors: [],\n    },\n    sortOrder: {\n      processors: ['stripe', 'paystack', 'paypal', 'mollie', 'mock'],\n      manualPaymentMethods: [],\n      paymentMethods: {\n        mollie: ['creditcard', 'paypal'],\n      },\n    },\n    instances: {\n      stripe: undefined,\n    },\n    config: {\n      stripe: {\n        paymentElement: false,\n      },\n    },\n    ...processors,\n  },\n  (newValue, oldValue) => {\n    return JSON.stringify(newValue) !== JSON.stringify(oldValue);\n  },\n);\n\nexport default state;\nexport { state, onChange, on, dispose };\n","import { sortByArray } from '../../functions/util';\nimport state from './store';\nimport { state as checkoutState } from '@store/checkout';\n\n/**\n * Gets a sorted array of available processors based on\n * checkout mode, recurring requirements, and if mollie is enabled.\n */\nexport const availableProcessors = () =>\n  sortByArray(state.processors, 'processor_type', state.sortOrder.processors) // sort.\n    .filter(processor => processor?.live_mode === (checkoutState?.mode === 'live')) // match mode.\n    .filter(processor => !(state.disabled.processors || []).includes(processor.processor_type)) // make sure it's not disabled.\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.recurring_enabled : true)) // recurring.\n    .filter((processor, _, filtered) => (filtered.some(p => p.processor_type === 'mollie') ? processor.processor_type === 'mollie' || processor.processor_type === 'mock' : true)); // only allow mollie if preset.\n\n/**\n * Gets the processor by type\n *\n * @param {string} type The processor type.\n *\n * @returns {Object | null} The processor data.\n */\nexport const getProcessorByType = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Gets an available processor type.\n */\nexport const getAvailableProcessor = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Check if there is any available credit card processor except the given processor type.\n */\nexport const hasOtherAvailableCreditCardProcessor = (type: string) =>\n  availableProcessors().some(({ processor_type }) => processor_type !== type && 'paypal' !== processor_type && 'mock' !== processor_type);\n\n/**\n * Get a sorted array of manual payment methods\n * based on recurring requirements.\n */\nexport const availableManualPaymentMethods = () =>\n  sortByArray(state.manualPaymentMethods, 'id', state.sortOrder.manualPaymentMethods)\n    .filter(processor => !(state.disabled.processors || []).includes(processor?.id))\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.reusable : true)); // recurring.\n\n/**\n * Get a sorted array of mollie payment method types.\n */\nexport const availableMethodTypes = () =>\n  sortByArray(state.methods, 'id', state.sortOrder.paymentMethods.mollie).filter(method => {\n    if (method.id === 'applepay') {\n      return (window as any)?.ApplePaySession && (window as any)?.ApplePaySession?.canMakePayments?.();\n    }\n    return true;\n  });\n\n/**\n * Get a combined available processor choices (processors + manual payment methods)\n */\nexport const availableProcessorChoices = () => [...availableProcessors(), ...availableManualPaymentMethods()];\n\n/**\n * Do we have multiple processors.\n */\nexport const hasMultipleProcessorChoices = () => availableProcessorChoices()?.length > 1;\n\n/**\n * Get a combined available payment methods (method types + manual payment methods)\n */\nexport const availableMethodChoices = () => [...availableMethodTypes(), ...availableManualPaymentMethods(), ...[getProcessorByType('mock')]].filter(Boolean);\n\n/**\n * Do we have multiple payment methods.\n */\nexport const hasMultipleMethodChoices = () => availableMethodChoices()?.length > 1;\n"],"mappings":"gJAGA,MAAMA,WAAEA,GAAeC,I,MA2BjBC,MAAEA,EAAKC,SAAEA,EAAQC,GAAEA,EAAEC,QAAEA,GAAYC,EACvC,CACEN,WAAY,GACZO,QAAS,GACTC,qBAAsB,GACtBC,SAAU,CACRT,WAAY,IAEdU,UAAW,CACTV,WAAY,CAAC,SAAU,WAAY,SAAU,SAAU,QACvDQ,qBAAsB,GACtBG,eAAgB,CACdC,OAAQ,CAAC,aAAc,YAG3BC,UAAW,CACTC,OAAQC,WAEVC,OAAQ,CACNF,OAAQ,CACNG,eAAgB,WAGjBjB,IAEL,CAACkB,EAAUC,IACFC,KAAKC,UAAUH,KAAcE,KAAKC,UAAUF,K,MChD1CG,EAAsB,IACjCC,EAAYrB,EAAMF,WAAY,iBAAkBE,EAAMQ,UAAUV,YAC7DwB,QAAOC,IAAaA,IAAS,MAATA,SAAS,SAATA,EAAWC,eAAeC,IAAa,MAAbA,SAAa,SAAbA,EAAeC,QAAS,UACtEJ,QAAOC,KAAevB,EAAMO,SAAST,YAAc,IAAI6B,SAASJ,EAAUK,kBAC1EN,QAAOC,IAAS,IAAAM,EAAI,UAAGA,EAAAJ,IAAa,MAAbA,SAAa,SAAbA,EAAeK,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,qCAAqCR,IAAS,MAATA,SAAS,SAATA,EAAWS,mBAAoB,IAAI,IACxHV,QAAO,CAACC,EAAWU,EAAGC,IAAcA,EAASC,MAAKC,GAAKA,EAAER,iBAAmB,WAAYL,EAAUK,iBAAmB,UAAYL,EAAUK,iBAAmB,OAAS,O,MAS/JS,EAAsBC,GAAiBlB,IAAsBmB,MAAK,EAAGX,oBAAqBA,IAAmBU,I,MAK7GE,EAAyBF,GAAiBlB,IAAsBmB,MAAK,EAAGX,oBAAqBA,IAAmBU,I,MAKhHG,EAAwCH,GACnDlB,IAAsBe,MAAK,EAAGP,oBAAqBA,IAAmBU,GAAQ,WAAaV,GAAkB,SAAWA,I,MAM7Gc,EAAgC,IAC3CrB,EAAYrB,EAAMM,qBAAsB,KAAMN,EAAMQ,UAAUF,sBAC3DgB,QAAOC,KAAevB,EAAMO,SAAST,YAAc,IAAI6B,SAASJ,IAAS,MAATA,SAAS,SAATA,EAAWoB,MAC3ErB,QAAOC,IAAS,IAAAM,EAAI,UAAGA,EAAAJ,IAAa,MAAbA,SAAa,SAAbA,EAAeK,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,qCAAqCR,IAAS,MAATA,SAAS,SAATA,EAAWqB,UAAW,IAAI,I,MAKvGC,EAAuB,IAClCxB,EAAYrB,EAAMK,QAAS,KAAML,EAAMQ,UAAUC,eAAeC,QAAQY,QAAOwB,I,QAC7E,GAAIA,EAAOH,KAAO,WAAY,CAC5B,OAAQI,SAAc,MAAdA,cAAM,SAANA,OAAgBC,oBAAmBC,GAAApB,EAACkB,SAAc,MAAdA,cAAM,SAANA,OAAgBC,mBAAe,MAAAnB,SAAA,SAAAA,EAAEqB,mBAAe,MAAAD,SAAA,SAAAA,EAAAE,KAAAtB,G,CAE9F,OAAO,IAAI,IAMR,MAAMuB,EAA4B,IAAM,IAAIhC,OAA0BsB,K,MAKhEW,EAA8B,SAAAxB,EAAM,QAAAA,EAAAuB,OAA2B,MAAAvB,SAAA,SAAAA,EAAEyB,QAAS,CAAC,EAKjF,MAAMC,EAAyB,IAAM,IAAIV,OAA2BH,OAAoC,CAACL,EAAmB,UAAUf,OAAOkC,S,MAKvIC,EAA2B,SAAA5B,EAAM,QAAAA,EAAA0B,OAAwB,MAAA1B,SAAA,SAAAA,EAAEyB,QAAS,CAAC,S"}
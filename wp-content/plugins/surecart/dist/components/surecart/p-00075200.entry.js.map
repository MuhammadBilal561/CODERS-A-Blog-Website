{"version":3,"names":["scLicenseCss","wp","i18n","__","this","renderStatus","h","style","class","value","_c","license","key","readonly","type","size","slot","onClick","_a","copyKey","copied","date","_d","created_at","month","day","year","_e","noPadding","_j","_h","_g","activations","data","length","_k","map","activation","name","fingerprint","loading","spinner","error","justifyContent","disabled","busy","deleteActivation","color","onCloseDeleteModal"],"sources":["./src/components/controllers/dashboard/sc-license/sc-license.scss?tag=sc-license&encapsulation=shadow","./src/components/controllers/dashboard/sc-license/sc-license.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.license {\n  &__date {\n    font-weight: var(--sc-font-weight-semibold);\n  }\n  &__heading {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  &__key {\n    display: block;\n  }\n}\n\n.close__button {\n  position: absolute;\n  top: 0;\n  right: 0;\n  font-size: 22px;\n  z-index: 1;\n}\n\n.license-cancel {\n  display: grid;\n  gap: 0.5em;\n}\n","import { Component, Element, Fragment, Prop, State, h } from '@stencil/core';\nimport { onFirstVisible } from '../../../../functions/lazy';\nimport { License, Product, Purchase } from 'src/types';\nimport { __ } from '@wordpress/i18n';\nimport apiFetch from '../../../../functions/fetch';\nimport { addQueryArgs } from '@wordpress/url';\n\n@Component({\n  tag: 'sc-license',\n  styleUrl: 'sc-license.scss',\n  shadow: true,\n})\nexport class ScLicense {\n  @Element() el: HTMLScLicenseElement;\n\n  /**The license id */\n  @Prop() licenseId: string;\n\n  @State() loading: boolean = false;\n  @State() error: string = '';\n  @State() license: License;\n  @State() copied: boolean = false;\n  @State() showConfirmDelete: boolean = false;\n  @State() selectedActivationId: string = '';\n  @State() deleteActivationError: string = '';\n  @State() busy: boolean = false;\n\n  /** Only fetch if visible */\n  componentWillLoad() {\n    onFirstVisible(this.el, () => {\n      this.initialFetch();\n    });\n  }\n\n  async initialFetch() {\n    try {\n      this.loading = true;\n      await this.getLicense();\n    } catch (e) {\n      console.error(e);\n      this.error = e?.message || __('Something went wrong', 'surecart');\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  async getLicense() {\n    this.license = await apiFetch({\n      path: addQueryArgs(`surecart/v1/licenses/${this.licenseId}`, {\n        expand: ['activations', 'purchase', 'purchase.product'],\n      }),\n    });\n  }\n\n  deleteActivation = async () => {\n    try {\n      this.busy = true;\n      await apiFetch({\n        path: `surecart/v1/activations/${this.selectedActivationId}`,\n        method: 'DELETE',\n      });\n      this.onCloseDeleteModal();\n      await this.initialFetch();\n    } catch (e) {\n      console.error(e);\n      this.deleteActivationError = e?.message || __('Something went wrong', 'surecart');\n    } finally {\n      this.busy = false;\n    }\n  };\n\n  async copyKey(key: string) {\n    try {\n      await navigator.clipboard.writeText(key);\n      this.copied = true;\n\n      setTimeout(() => {\n        this.copied = false;\n      }, 2000);\n    } catch (err) {\n      console.error(err);\n      alert(__('Error copying to clipboard', 'surecart'));\n    }\n  }\n\n  renderStatus() {\n    if (this.license?.status === 'active') {\n      return <sc-tag type=\"success\">{__('Active', 'surecart')}</sc-tag>;\n    }\n    if (this.license?.status === 'revoked') {\n      return <sc-tag type=\"danger\">{__('Revoked', 'surecart')}</sc-tag>;\n    }\n    if (this.license?.status === 'inactive') {\n      return <sc-tag type=\"info\">{__('Inactive', 'surecart')}</sc-tag>;\n    }\n\n    return <sc-tag type=\"info\">{this.license?.status}</sc-tag>;\n  }\n\n  renderLoading() {\n    return (\n      <sc-dashboard-module>\n        <span slot=\"heading\">\n          <sc-skeleton style={{ width: '120px' }}></sc-skeleton>\n        </span>\n        <sc-card>\n          <sc-stacked-list>\n            <sc-flex flexDirection=\"column\" style={{ gap: '1em' }}>\n              <sc-skeleton style={{ width: '20%', display: 'inline-block' }}></sc-skeleton>\n              <sc-skeleton style={{ width: '60%', display: 'inline-block' }}></sc-skeleton>\n              <sc-skeleton style={{ width: '40%', display: 'inline-block' }}></sc-skeleton>\n            </sc-flex>\n          </sc-stacked-list>\n        </sc-card>\n      </sc-dashboard-module>\n    );\n  }\n\n  renderEmpty() {\n    return <sc-empty icon=\"activity\">{__('License not found.', 'surecart')}</sc-empty>;\n  }\n\n  renderLicenseHeader() {\n    const purchase = this.license?.purchase as Purchase;\n    const product = purchase?.product as Product;\n    return (\n      <Fragment>\n        <span slot=\"heading\">\n          <div class=\"license__heading\">\n            {product?.name}\n            {!this.loading && !purchase.live_mode && (\n              <sc-tag type=\"warning\" size=\"small\">\n                {__('Test Mode', 'surecart')}\n              </sc-tag>\n            )}\n          </div>\n        </span>\n      </Fragment>\n    );\n  }\n\n  renderContent() {\n    if (this.loading && !this.license?.id) {\n      return this.renderLoading();\n    }\n\n    if (!this.license?.id) {\n      return this.renderEmpty();\n    }\n\n    return (\n      <Fragment>\n        <sc-dashboard-module error={this.error}>\n          {this.renderLicenseHeader()}\n          <sc-card noPadding>\n            <sc-stacked-list>\n              <sc-stacked-list-row style={{ '--columns': '2', '--sc-stacked-list-row-align-items': 'center' }}>\n                <div>{__('License Status', 'surecart')}</div>\n                {this.renderStatus()}\n              </sc-stacked-list-row>\n              <sc-stacked-list-row style={{ '--columns': '2' }}>\n                <div>{__('License Key', 'surecart')}</div>\n                <div class=\"license__key\">\n                  <sc-input value={this.license?.key} readonly>\n                    <sc-button class=\"license__copy\" type=\"default\" size=\"small\" slot=\"suffix\" onClick={() => this.copyKey(this.license?.key)}>\n                      {this.copied ? __('Copied!', 'surecart') : __('Copy', 'surecart')}\n                    </sc-button>\n                  </sc-input>\n                </div>\n              </sc-stacked-list-row>\n              <sc-stacked-list-row style={{ '--columns': '2' }}>\n                <div>{__('Date', 'surecart')}</div>\n                <sc-format-date date={this.license?.created_at} type=\"timestamp\" month=\"short\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n              </sc-stacked-list-row>\n              <sc-stacked-list-row style={{ '--columns': '2' }}>\n                <div>{__('Activations Count', 'surecart')}</div>\n                <span>\n                  {this.license?.activation_count} / {this.license?.activation_limit || <span>&infin;</span>}\n                </span>\n              </sc-stacked-list-row>\n            </sc-stacked-list>\n          </sc-card>\n        </sc-dashboard-module>\n\n        <sc-dashboard-module>\n          <span slot=\"heading\">\n            <slot name=\"heading\">{__('Activations', 'surecart')}</slot>\n          </span>\n          <sc-card noPadding>\n            {!!this.license?.activations?.data?.length ? (\n              <sc-stacked-list>\n                {this.license?.activations.data.map(activation => (\n                  <sc-stacked-list-row style={{ '--columns': '4' }}>\n                    <sc-format-date class=\"license__date\" date={activation.created_at} type=\"timestamp\" month=\"short\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n                    <div>{activation.name}</div>\n                    <div>{activation.fingerprint}</div>\n                    <div>\n                      <sc-button\n                        size=\"small\"\n                        onClick={() => {\n                          this.selectedActivationId = activation.id;\n                          this.showConfirmDelete = true;\n                        }}\n                      >\n                        Delete\n                      </sc-button>\n                    </div>\n                  </sc-stacked-list-row>\n                ))}\n              </sc-stacked-list>\n            ) : (\n              <sc-empty>{__('No activations present.', 'surecart')}</sc-empty>\n            )}\n            {this.loading && <sc-block-ui style={{ '--sc-block-ui-opacity': '0.75' }} spinner />}\n          </sc-card>\n        </sc-dashboard-module>\n      </Fragment>\n    );\n  }\n\n  onCloseDeleteModal = () => {\n    this.selectedActivationId = '';\n    this.showConfirmDelete = false;\n    this.busy = false;\n    this.deleteActivationError = '';\n  };\n\n  renderConfirmDelete() {\n    return (\n      <sc-dialog open={this.showConfirmDelete} style={{ '--body-spacing': 'var(--sc-spacing-x-large)' }} noHeader onScRequestClose={this.onCloseDeleteModal}>\n        <sc-button class=\"close__button\" type=\"text\" circle onClick={this.onCloseDeleteModal} disabled={this.loading}>\n          <sc-icon name=\"x\" />\n        </sc-button>\n        <sc-dashboard-module heading={__('Delete Activation', 'surecart')} class=\"license-cancel\" error={this.error} style={{ '--sc-dashboard-module-spacing': '1em' }}>\n          <span slot=\"description\">{__('Are you sure you want to delete activation?', 'surecart')}</span>\n          <sc-flex justifyContent=\"flex-start\">\n            <sc-button type=\"primary\" disabled={this.loading || this.busy} onClick={this.deleteActivation}>\n              {__('Delete Activation', 'surecart')}\n            </sc-button>\n            <sc-button style={{ color: 'var(--sc-color-gray-500' }} type=\"text\" onClick={this.onCloseDeleteModal} disabled={this.loading || this.busy}>\n              {__('Cancel', 'surecart')}\n            </sc-button>\n          </sc-flex>\n          {this.busy && <sc-block-ui style={{ '--sc-block-ui-opacity': '0.75' }} spinner />}\n        </sc-dashboard-module>\n      </sc-dialog>\n    );\n  }\n\n  render() {\n    return (\n      <sc-spacing style={{ '--spacing': 'var(--sc-spacing-large)' }}>\n        {this.renderContent()}\n        {this.renderConfirmDelete()}\n      </sc-spacing>\n    );\n  }\n}\n"],"mappings":"gKAAA,MAAMA,EAAe,uR,mUCiE4BC,GAAAC,KAAAC,GAAE,kC,wjBAzBlBF,GAAAC,KAAAC,GAAE,kC,uUAyCvBF,GAAAC,KAAAC,GAAE,yC,qIAMuBF,GAAAC,KAAAC,GAAE,qB,yGAGHF,GAAAC,KAAAC,GAAE,sB,wGAGJF,GAAAC,KAAAC,GAAE,uB,iiBA0BEF,GAAAC,KAAAC,GAAE,iC,+TAavBF,GAAAC,KAAAC,GAAE,2B,mdAyBGF,GAAAC,KAAAC,GAAE,8BAAAC,KAAAC,gBAAAC,EAAA,uBAAAC,MAAA,mBAAAD,EAAA,WAIFL,GAAAC,KAAAC,GAAE,2BAAAG,EAAA,OAAAE,MAAA,gBAAAF,EAAA,YAAAG,OAAAC,EAAAN,KAAAO,WAAA,MAAAD,SAAA,SAAAA,EAAAE,IAAAC,SAAA,MAAAP,EAAA,aAAAE,MAAA,gBAAAM,KAAA,UAAAC,KAAA,QAAAC,KAAA,SAAAC,QAAA,SAAAC,EAAA,OAAAd,KAAAe,SAAAD,EAAAd,KAAAO,WAAA,MAAAO,SAAA,SAAAA,EAAAN,IAAA,GAAAR,KAAAgB,OAIanB,GAAAC,KAAAC,GAAE,sBAA0BF,GAAAC,KAAAC,GAAE,uBAAAG,EAAA,uBAAAC,MAAA,mBAAAD,EAAA,WAM7CL,GAAAC,KAAAC,GAAE,oBAAAG,EAAA,kBAAAe,MAAAC,EAAAlB,KAAAO,WAAA,MAAAW,SAAA,SAAAA,EAAAC,WAAAT,KAAA,YAAAU,MAAA,QAAAC,IAAA,UAAAC,KAAA,aAAApB,EAAA,uBAAAC,MAAA,mBAAAD,EAAA,WAIFL,GAAAC,KAAAC,GAAE,iCAAAG,EAAA,aAAAqB,EAAAvB,KAAAO,WAAA,MAAAgB,SAAA,S,mMAWU1B,GAAAC,KAAAC,GAAE,4BAAAG,EAAA,WAAAsB,UAAA,UAAAC,GAAAC,GAAAC,EAAA3B,KAAAO,WAAA,MAAAoB,SAAA,SAAAA,EAAAC,eAAA,MAAAF,SAAA,SAAAA,EAAAG,QAAA,MAAAJ,SAAA,SAAAA,EAAAK,QAAA5B,EAAA,wBAAA6B,EAAA/B,KAAAO,WAAA,MAAAwB,SAAA,SAAAA,EAAAH,YAAAC,KAAAG,KAAAC,GAAA/B,EAAA,uBAAAC,MAAA,mBAAAD,EAAA,kBAAAE,MAAA,gBAAAa,KAAAgB,EAAAd,WAAAT,KAAA,YAAAU,MAAA,QAAAC,IAAA,UAAAC,KAAA,YAAApB,EAAA,WAAA+B,EAAAC,MAAAhC,EAAA,WAAA+B,EAAAE,aAAAjC,EAAA,WAAAA,EAAA,aAAAS,KAAA,QAAAE,QAAA,K,8FAyBXhB,GAAAC,KAAAC,GAAE,uCAAAC,KAAAoC,SAAAlC,EAAA,eAAAC,MAAA,iCAAAkC,QAAA,S,oWAsBWxC,GAAAC,KAAAC,GAAE,gCAAAK,MAAA,iBAAAkC,MAAAtC,KAAAsC,MAAAnC,MAAA,yCAAAD,EAAA,QAAAU,KAAA,eACJf,GAAAC,KAAAC,GAAE,2DAAAG,EAAA,WAAAqC,eAAA,cAAArC,EAAA,aAAAQ,KAAA,UAAA8B,SAAAxC,KAAAoC,SAAApC,KAAAyC,KAAA5B,QAAAb,KAAA0C,kBAGvB7C,GAAAC,KAAAC,GAAE,iCAAAG,EAAA,aAAAC,MAAA,CAAAwC,MAAA,2BAAAjC,KAAA,OAAAG,QAAAb,KAAA4C,mBAAAJ,SAAAxC,KAAAoC,SAAApC,KAAAyC,MAGF5C,GAAAC,KAAAC,GAAE,uBAAAC,KAAAyC,MAAAvC,EAAA,eAAAC,MAAA,iCAAAkC,QAAA,Q"}
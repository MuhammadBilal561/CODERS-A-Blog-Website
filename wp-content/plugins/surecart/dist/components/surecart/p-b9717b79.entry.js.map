{"version":3,"names":["hasAnyRuleGroupPassed","groups","props","some","rules","hasRulesPassed","checkout","processor","map","rule","ruleValue","Array","isArray","value","condition","compareNumberValues","parseFloat","total_amount","operator","compareObjectValues","getCartProductIds","getCartCouponIds","_a","shipping_address","country","_b","billing_address","every","line_items","data","price","product","id","discount","coupon","_d","_c","cart_values","rule_values","filter","n1","n2","length","number1","number2","scConditionalFormCss","ScConditionalForm","render","show","this","rule_groups","currentCheckout","selectedProcessor","h","Host"],"sources":["./src/components/controllers/checkout-form/sc-conditional-form/conditional-functions.ts","./src/components/controllers/checkout-form/sc-conditional-form/sc-conditional-form.css?tag=sc-conditional-form&encapsulation=shadow","./src/components/controllers/checkout-form/sc-conditional-form/sc-conditional-form.tsx"],"sourcesContent":["import { ArrayOperators, Checkout, NumberOperators, Product, Rule, RuleGroup } from '../../../../types';\n\n/**\n * Check if any of the rule groups is passed or not.\n *\n * @param {array} groups Rule groups.\n * @param {object} props Data.\n * @returns {boolean}\n */\nexport const hasAnyRuleGroupPassed = (groups: RuleGroup[], props: { checkout: Checkout; processor: string }) => {\n  return (groups || []).some(({ rules }) => hasRulesPassed(rules, props));\n};\n\n/**\n * CHeck if all rules are passed or not.\n *\n * @param {array} rules Rules.\n * @param {object} props Data.\n * @returns {boolean}\n */\nexport const hasRulesPassed = (rules: Rule[], { checkout, processor }) => {\n  return rules\n    .map(rule => {\n      const ruleValue = Array.isArray(rule?.value) ? (rule?.value).map(ruleValue => ruleValue?.value || ruleValue) : rule?.value;\n      switch (rule?.condition) {\n        case 'total':\n          return compareNumberValues(parseFloat(checkout.total_amount), parseFloat(ruleValue as string), rule?.operator as NumberOperators);\n        case 'products':\n          return compareObjectValues(getCartProductIds(checkout), ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'coupons':\n          return compareObjectValues(getCartCouponIds(checkout), ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'shipping_country':\n          return compareObjectValues([checkout?.shipping_address?.country], ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'billing_country':\n          return compareObjectValues([checkout?.billing_address?.country], ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'processors':\n          return compareObjectValues([processor], ruleValue as string[], rule?.operator as ArrayOperators);\n        default:\n          return false;\n      }\n    })\n    .every(rules => rules);\n};\n\n/**\n * Get array of products from checkout.\n *\n * @param {object} checkout CHeckout data.\n * @returns {array}\n */\nexport const getCartProductIds = (checkout: Checkout) => {\n  return (checkout?.line_items?.data || []).map(({ price }) => (price?.product as Product)?.id);\n};\n\n/**\n * Get array of coupons from checkout.\n *\n * @param {object} checkout CHeckout data.\n * @returns {array}\n */\nexport const getCartCouponIds = (checkout: Checkout) => {\n  return checkout?.discount?.coupon?.id ? [checkout?.discount?.coupon?.id] : [];\n};\n\n/**\n * Compare object values.\n *\n * @param {array} cart_values order values.\n * @param {array} rule_values rules values.\n * @param {string} operator rule operator.\n * @returns {boolean}\n */\n\nexport const compareObjectValues = (cart_values: string[], rule_values: string[], operator: 'all' | 'any' | 'none' | 'exist' | 'not_exist') => {\n  switch (operator) {\n    case 'all':\n      return rule_values.filter(n1 => cart_values.some(n2 => n1 == n2)).length === rule_values.length;\n    case 'any':\n      return cart_values.filter(n1 => rule_values.some(n2 => n1 == n2)).length >= 1;\n    case 'none':\n      return cart_values.filter(n1 => rule_values.some(n2 => n1 == n2)).length === 0;\n    case 'exist':\n      return cart_values.length >= 1;\n    case 'not_exist':\n      return cart_values.length === 0;\n    default:\n      return false;\n  }\n};\n\n/**\n * Compare string values.\n *\n * @param string number1 The actual number from cart/order.\n * @param array  number2 Rule values.\n * @param string operator Rule operator.\n * @returns {boolean}\n */\nexport const compareNumberValues = (number1: number, number2: number, operator: string) => {\n  switch (operator) {\n    case '==':\n      return number1 === number2;\n    case '!=':\n      return number1 !== number2;\n    case '>':\n      return number1 > number2;\n    case '<':\n      return number1 < number2;\n    case '<=':\n      return number1 <= number2;\n    case '>=':\n      return number1 >= number2;\n  }\n\n  return false;\n};\n",":host {\n  display: block;\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { RuleGroup } from '../../../../types';\nimport { hasAnyRuleGroupPassed } from './conditional-functions';\nimport { state as selectedProcessor } from '@store/selected-processor';\nimport { currentCheckout } from '@store/checkout/getters';\n\n@Component({\n  tag: 'sc-conditional-form',\n  styleUrl: 'sc-conditional-form.css',\n  shadow: true,\n})\nexport class ScConditionalForm {\n  /** Selector label */\n  @Prop() rule_groups: RuleGroup[];\n\n  render() {\n    let show = hasAnyRuleGroupPassed(this.rule_groups, { checkout: currentCheckout(), processor: selectedProcessor?.id });\n    if (!show) return null;\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}
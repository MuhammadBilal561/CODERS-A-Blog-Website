{"version":3,"names":["scCheckoutFormErrorsCss","ScCheckoutFormErrors","constructor","hostRef","this","removeStateListener","getAlertType","errorState","type","componentWillLoad","onChange","includes","currentFormState","removeNotice","disconnectedCallback","getTopLevelError","code","_a","getAdditionalErrorMessages","length","message","render","h","Host","style","display","scrollOnOpen","open","closable","dismissible","slot","innerHTML","map","index","key"],"sources":["./src/components/controllers/checkout-form/checkout-form-errors/sc-checkout-form-errors.scss?tag=sc-checkout-form-errors&encapsulation=shadow","./src/components/controllers/checkout-form/checkout-form-errors/sc-checkout-form-errors.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nul {\n  margin: 6px 0px;\n  padding: 0px;\n  list-style: none;\n}\n","/**\n * External dependencies.\n */\nimport { Component, h, Host } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies.\n */\nimport { state as errorState } from '@store/notices';\nimport { getAdditionalErrorMessages } from '@store/notices/getters';\nimport { currentFormState } from '@store/form/getters';\nimport { onChange } from '@store/form';\nimport { removeNotice } from '@store/notices/mutations';\n\n/**\n * This component listens for a confirmed event and redirects to the success url.\n */\n@Component({\n  tag: 'sc-checkout-form-errors',\n  styleUrl: 'sc-checkout-form-errors.scss',\n  shadow: true,\n})\nexport class ScCheckoutFormErrors {\n  private removeStateListener = () => {};\n  /**\n   * Get the alert type.\n   * @returns string\n   */\n  getAlertType() {\n    switch (errorState?.type) {\n      case 'error':\n        return 'danger';\n      case 'default':\n        return 'primary';\n      default:\n        return errorState?.type;\n    }\n  }\n\n  componentWillLoad() {\n    // remove notice if finalizing or updating.\n    this.removeStateListener = onChange('formState', () => {\n      if (['finalizing', 'updating'].includes(currentFormState())) {\n        removeNotice();\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    this.removeStateListener();\n  }\n\n  getTopLevelError() {\n    // checkout invalid is not friendly.\n    if (errorState?.code === 'checkout.invalid' && getAdditionalErrorMessages()?.length) {\n      return '';\n    }\n    return errorState?.message;\n  }\n\n  render() {\n    // don't show component if no error message or is finalizing or updating.\n    if (!errorState?.message || ['finalizing', 'updating'].includes(currentFormState())) {\n      return <Host style={{ display: 'none' }}></Host>;\n    }\n\n    return (\n      <Host>\n        <sc-alert type={this.getAlertType()} scrollOnOpen={true} open={!!errorState?.message} closable={!!errorState?.dismissible}>\n          {!!this.getTopLevelError() && <span slot=\"title\" innerHTML={this.getTopLevelError()}></span>}\n          {(getAdditionalErrorMessages() || []).map((message, index) => (\n            <div innerHTML={message} key={index}></div>\n          ))}\n        </sc-alert>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"iRAAA,MAAMA,EAA0B,qE,MCuBnBC,EAAoB,MALjCC,YAAAC,G,UAMUC,KAAAC,oBAAsB,M,CAK9BC,eACE,OAAQC,IAAU,MAAVA,SAAU,SAAVA,EAAYC,MAClB,IAAK,QACH,MAAO,SACT,IAAK,UACH,MAAO,UACT,QACE,OAAOD,IAAU,MAAVA,SAAU,SAAVA,EAAYC,K,CAIzBC,oBAEEL,KAAKC,oBAAsBK,EAAS,aAAa,KAC/C,GAAI,CAAC,aAAc,YAAYC,SAASC,KAAqB,CAC3DC,G,KAKNC,uBACEV,KAAKC,qB,CAGPU,mB,MAEE,IAAIR,IAAU,MAAVA,SAAU,SAAVA,EAAYS,QAAS,sBAAsBC,EAAAC,OAA4B,MAAAD,SAAA,SAAAA,EAAEE,QAAQ,CACnF,MAAO,E,CAET,OAAOZ,IAAU,MAAVA,SAAU,SAAVA,EAAYa,O,CAGrBC,SAEE,KAAKd,IAAU,MAAVA,SAAU,SAAVA,EAAYa,UAAW,CAAC,aAAc,YAAYT,SAASC,KAAqB,CACnF,OAAOU,EAACC,EAAI,CAACC,MAAO,CAAEC,QAAS,S,CAGjC,OACEH,EAACC,EAAI,KACHD,EAAA,YAAUd,KAAMJ,KAAKE,eAAgBoB,aAAc,KAAMC,QAAQpB,IAAU,MAAVA,SAAU,SAAVA,EAAYa,SAASQ,YAAYrB,IAAU,MAAVA,SAAU,SAAVA,EAAYsB,gBACzGzB,KAAKW,oBAAsBO,EAAA,QAAMQ,KAAK,QAAQC,UAAW3B,KAAKW,sBAC/DG,KAAgC,IAAIc,KAAI,CAACZ,EAASa,IAClDX,EAAA,OAAKS,UAAWX,EAASc,IAAKD,OAGlCX,EAAA,a"}
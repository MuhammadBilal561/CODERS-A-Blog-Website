{"version":3,"names":["ScLineItemsProvider","handleLineItemToggle","e","lineItem","detail","this","addSyncItem","handleLineItemRemove","handleLineItemAdd","handleLineItemUpdate","async","val","length","setTimeout","_a","syncItems","items","processSyncItems","scUpdateLineItems","emit","type","payload","existingData","convertLineItemsToLineItemData","order","line_items","map","toggle","toggleItem","add","addItem","remove","removeItem","update","updateItem","forEach","item","existingLineData","existingPriceId","find","line","price_id","filter","data","existingLineItem","findIndex","render","h"],"sources":["./src/components/providers/line-items-provider/sc-line-items-provider.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, h, Listen, Prop, State, Watch } from '@stencil/core';\n\nimport { convertLineItemsToLineItemData } from '../../../functions/line-items';\nimport { Checkout, LineItemData } from '../../../types';\n\n@Component({\n  tag: 'sc-line-items-provider',\n  shadow: true,\n})\nexport class ScLineItemsProvider {\n  /** Order Object */\n  @Prop() order: Checkout;\n\n  /** Holds items to sync */\n  @State() syncItems: Array<{ type: 'toggle' | 'add' | 'remove' | 'update'; payload: LineItemData }> = [];\n\n  /** Update line items event */\n  @Event() scUpdateLineItems: EventEmitter<Array<LineItemData>>;\n\n  /** Handle line item toggle */\n  @Listen('scToggleLineItem')\n  handleLineItemToggle(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('toggle', lineItem);\n  }\n\n  /** Handle line item remove */\n  @Listen('scRemoveLineItem')\n  handleLineItemRemove(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('remove', lineItem);\n  }\n\n  /** Handle line item add */\n  @Listen('scAddLineItem')\n  handleLineItemAdd(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('add', lineItem);\n  }\n\n  /** Handle line item add */\n  @Listen('scUpdateLineItem')\n  handleLineItemUpdate(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('update', lineItem);\n  }\n\n  /** We listen to the syncItems array and run it on the next render in batch */\n  @Watch('syncItems')\n  async syncItemsHandler(val) {\n    if (!val?.length) return;\n    setTimeout(() => {\n      if (!this.syncItems?.length) return;\n      const items = this.processSyncItems();\n      this.scUpdateLineItems.emit(items);\n      this.syncItems = [];\n    }, 100);\n  }\n\n  /** Add item to sync */\n  addSyncItem(type: 'add' | 'remove' | 'toggle' | 'update', payload: LineItemData) {\n    this.syncItems = [...this.syncItems, ...[{ type, payload }]];\n  }\n\n  /** Batch process items to sync before sending */\n  processSyncItems() {\n    // get existing line item data.\n    let existingData = convertLineItemsToLineItemData(this?.order?.line_items || []);\n\n    const map = {\n      toggle: this.toggleItem,\n      add: this.addItem,\n      remove: this.removeItem,\n      update: this.updateItem,\n    };\n\n    // run existing data through chain of sync updates.\n    (this.syncItems || []).forEach(item => {\n      existingData = map[item.type](item.payload, existingData) as any;\n    });\n\n    return existingData;\n  }\n\n  /** Add item */\n  addItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    return [...existingLineData, ...[item]];\n  }\n\n  /** Toggle item */\n  toggleItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    // find existing item.\n    const existingPriceId = existingLineData.find(line => line.price_id === item.price_id)?.price_id;\n    // toggle it.\n    existingLineData = existingPriceId ? existingLineData.filter(item => existingPriceId !== item.price_id) : [...existingLineData, ...[item]];\n    // return.\n    return existingLineData;\n  }\n\n  /** Remove item */\n  removeItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    if (!item.price_id) return existingLineData;\n    return existingLineData.filter(data => data.price_id !== item.price_id);\n  }\n\n  /** Update the item item */\n  updateItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    // find existing item.\n    const existingLineItem = existingLineData.findIndex(line => line.price_id === item.price_id);\n    // if we found it, update it\n    if (existingLineItem !== -1) {\n      existingLineData[existingLineItem] = item;\n      // otherwise, add it\n    } else {\n      return [...existingLineData, ...[item]];\n    }\n\n    return existingLineData;\n  }\n\n  render() {\n    return <slot />;\n  }\n}\n"],"mappings":"4FASaA,EAAmB,M,kHAKuE,E,CAOrGC,qBAAqBC,GACnB,MAAMC,EAAWD,EAAEE,OACnBC,KAAKC,YAAY,SAAUH,E,CAK7BI,qBAAqBL,GACnB,MAAMC,EAAWD,EAAEE,OACnBC,KAAKC,YAAY,SAAUH,E,CAK7BK,kBAAkBN,GAChB,MAAMC,EAAWD,EAAEE,OACnBC,KAAKC,YAAY,MAAOH,E,CAK1BM,qBAAqBP,GACnB,MAAMC,EAAWD,EAAEE,OACnBC,KAAKC,YAAY,SAAUH,E,CAK7BO,uBAAuBC,GACrB,KAAKA,IAAG,MAAHA,SAAG,SAAHA,EAAKC,QAAQ,OAClBC,YAAW,K,MACT,MAAKC,EAAAT,KAAKU,aAAS,MAAAD,SAAA,SAAAA,EAAEF,QAAQ,OAC7B,MAAMI,EAAQX,KAAKY,mBACnBZ,KAAKa,kBAAkBC,KAAKH,GAC5BX,KAAKU,UAAY,EAAE,GAClB,I,CAILT,YAAYc,EAA8CC,GACxDhB,KAAKU,UAAY,IAAIV,KAAKU,aAAc,CAAC,CAAEK,OAAMC,Y,CAInDJ,mB,MAEE,IAAIK,EAAeC,IAA+BT,EAAAT,OAAI,MAAJA,YAAI,SAAJA,KAAMmB,SAAK,MAAAV,SAAA,SAAAA,EAAEW,aAAc,IAE7E,MAAMC,EAAM,CACVC,OAAQtB,KAAKuB,WACbC,IAAKxB,KAAKyB,QACVC,OAAQ1B,KAAK2B,WACbC,OAAQ5B,KAAK6B,aAId7B,KAAKU,WAAa,IAAIoB,SAAQC,IAC7Bd,EAAeI,EAAIU,EAAKhB,MAAMgB,EAAKf,QAASC,EAAoB,IAGlE,OAAOA,C,CAITQ,QAAQM,EAAoBC,GAC1B,MAAO,IAAIA,KAAqB,CAACD,G,CAInCR,WAAWQ,EAAoBC,G,MAE7B,MAAMC,GAAkBxB,EAAAuB,EAAiBE,MAAKC,GAAQA,EAAKC,WAAaL,EAAKK,cAAS,MAAA3B,SAAA,SAAAA,EAAE2B,SAExFJ,EAAmBC,EAAkBD,EAAiBK,QAAON,GAAQE,IAAoBF,EAAKK,WAAY,IAAIJ,KAAqB,CAACD,IAEpI,OAAOC,C,CAITL,WAAWI,EAAoBC,GAC7B,IAAKD,EAAKK,SAAU,OAAOJ,EAC3B,OAAOA,EAAiBK,QAAOC,GAAQA,EAAKF,WAAaL,EAAKK,U,CAIhEP,WAAWE,EAAoBC,GAE7B,MAAMO,EAAmBP,EAAiBQ,WAAUL,GAAQA,EAAKC,WAAaL,EAAKK,WAEnF,GAAIG,KAAsB,EAAG,CAC3BP,EAAiBO,GAAoBR,C,KAEhC,CACL,MAAO,IAAIC,KAAqB,CAACD,G,CAGnC,OAAOC,C,CAGTS,SACE,OAAOC,EAAA,Y"}
{"version":3,"names":["scBreadcrumbsCss","ScBreadcrumbs","getSeparator","slotted","this","el","shadowRoot","querySelector","separator","assignedElements","flatten","clone","cloneNode","querySelectorAll","forEach","removeAttribute","slot","handleSlotChange","items","filter","node","nodeName","item","index","append","length","setAttribute","render","h","Fragment","part","class","label","onSlotchange","hidden","name"],"sources":["./src/components/ui/breadcrumbs/sc-breadcrumbs.css?tag=sc-breadcrumbs&encapsulation=shadow","./src/components/ui/breadcrumbs/sc-breadcrumbs.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.breadcrumb {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n","import { Component, h, Fragment, Prop, Element } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n * @part separator - The separator.\n */\n@Component({\n  tag: 'sc-breadcrumbs',\n  styleUrl: 'sc-breadcrumbs.css',\n  shadow: true,\n})\nexport class ScBreadcrumbs {\n  @Element() el: HTMLElement;\n  /**\n   * The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\n   * other assistive devices.\n   */\n  @Prop() label = 'Breadcrumb';\n\n  // Generates a clone of the separator element to use for each breadcrumb item\n  private getSeparator() {\n    const slotted = this.el.shadowRoot.querySelector('slot[name=separator]') as HTMLSlotElement;\n    const separator = slotted.assignedElements({ flatten: true })[0] as HTMLElement;\n\n    // Clone it, remove ids, and slot it\n    const clone = separator.cloneNode(true) as HTMLElement;\n\n    [clone, ...clone.querySelectorAll('[id]')].forEach(el => el.removeAttribute('id'));\n    clone.slot = 'separator';\n\n    return clone;\n  }\n\n  handleSlotChange() {\n    const slotted = this.el.shadowRoot.querySelector('.breadcrumb slot') as HTMLSlotElement;\n    const items = slotted.assignedElements().filter(node => {\n      return node.nodeName === 'CE-BREADCRUMB';\n    }) as HTMLScBreadcrumbElement[];\n\n    items.forEach((item, index) => {\n      // Append separators to each item if they don't already have one\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        item.append(this.getSeparator());\n      }\n\n      // The last breadcrumb item is the \"current page\"\n      if (index === items.length - 1) {\n        item.setAttribute('aria-current', 'page');\n      } else {\n        item.removeAttribute('aria-current');\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <nav part=\"base\" class=\"breadcrumb\" aria-label={this.label}>\n          <slot onSlotchange={() => this.handleSlotChange()}></slot>\n        </nav>\n        <div part=\"separator\" hidden aria-hidden=\"true\">\n          <slot name=\"separator\">\n            <sc-icon name=\"chevron-right\"></sc-icon>\n          </slot>\n        </div>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"oDAAA,MAAMA,EAAmB,kF,MCWZC,EAAa,M,oCAMR,Y,CAGRC,eACN,MAAMC,EAAUC,KAAKC,GAAGC,WAAWC,cAAc,wBACjD,MAAMC,EAAYL,EAAQM,iBAAiB,CAAEC,QAAS,OAAQ,GAG9D,MAAMC,EAAQH,EAAUI,UAAU,MAElC,CAACD,KAAUA,EAAME,iBAAiB,SAASC,SAAQT,GAAMA,EAAGU,gBAAgB,QAC5EJ,EAAMK,KAAO,YAEb,OAAOL,C,CAGTM,mBACE,MAAMd,EAAUC,KAAKC,GAAGC,WAAWC,cAAc,oBACjD,MAAMW,EAAQf,EAAQM,mBAAmBU,QAAOC,GACvCA,EAAKC,WAAa,kBAG3BH,EAAMJ,SAAQ,CAACQ,EAAMC,KAEnB,MAAMf,EAAYc,EAAKf,cAAc,sBACrC,GAAIC,IAAc,KAAM,CACtBc,EAAKE,OAAOpB,KAAKF,e,CAInB,GAAIqB,IAAUL,EAAMO,OAAS,EAAG,CAC9BH,EAAKI,aAAa,eAAgB,O,KAC7B,CACLJ,EAAKP,gBAAgB,e,KAK3BY,SACE,OACEC,EAACC,EAAQ,KACPD,EAAA,OAAKE,KAAK,OAAOC,MAAM,aAAY,aAAa3B,KAAK4B,OACnDJ,EAAA,QAAMK,aAAc,IAAM7B,KAAKa,sBAEjCW,EAAA,OAAKE,KAAK,YAAYI,OAAM,mBAAa,QACvCN,EAAA,QAAMO,KAAK,aACTP,EAAA,WAASO,KAAK,oB"}
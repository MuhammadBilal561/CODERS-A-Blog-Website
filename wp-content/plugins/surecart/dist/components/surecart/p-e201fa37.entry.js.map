{"version":3,"names":["scCustomerPhoneCss","ScCustomerPhone","async","this","value","input","scChange","emit","_b","_a","reportValidity","call","componentWillLoad","handleCheckoutChange","removeChangeListener","onChange","disconnectedCallback","checkoutState","checkout","phone","_d","_c","customer","_f","_e","render","h","name","ref","el","label","help","autocomplete","placeholder","readonly","required","invalid","autofocus","hasFocus","onScChange","handleChange","onScInput","scInput","onScFocus","scFocus","onScBlur","scBlur"],"sources":["./src/components/controllers/checkout-form/customer-phone/sc-customer-phone.css?tag=sc-customer-phone&encapsulation=shadow","./src/components/controllers/checkout-form/customer-phone/sc-customer-phone.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Event, EventEmitter, h, Method, Prop } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { state as checkoutState, onChange } from '@store/checkout';\n\nimport { Customer } from '../../../../types';\n\n@Component({\n  tag: 'sc-customer-phone',\n  styleUrl: 'sc-customer-phone.css',\n  shadow: true,\n})\nexport class ScCustomerPhone {\n  private input: HTMLScInputElement;\n\n  /** Remove the change listener */\n  private removeChangeListener: () => void;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** Error focus */\n  @Prop({ mutable: true }) error: boolean;\n\n  /** Emitted when the control's value changes. */\n  @Event({ composed: true }) scChange: EventEmitter<void>;\n\n  /** Emitted when the clear button is activated. */\n  @Event() scClear: EventEmitter<void>;\n\n  /** Emitted when the control receives input. */\n  @Event() scInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  async handleChange() {\n    this.value = this.input.value;\n    this.scChange.emit();\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input?.reportValidity?.();\n  }\n\n  componentWillLoad() {\n    this.handleCheckoutChange();\n    this.removeChangeListener = onChange('checkout', () => this.handleCheckoutChange());\n  }\n\n  disconnectedCallback() {\n    this.removeChangeListener();\n  }\n\n  handleCheckoutChange() {\n    // we only want to do this  if we don't have a value.\n    if (this?.value) return;\n\n    // if the checkout has a phone, use that.\n    if (checkoutState.checkout?.phone) {\n      this.value = checkoutState.checkout?.phone;\n      return;\n    }\n\n    // if the customer has a phone, use that.\n    if ((checkoutState.checkout?.customer as Customer)?.phone) {\n      this.value = (checkoutState.checkout?.customer as Customer)?.phone;\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <sc-phone-input\n        name=\"phone\"\n        ref={el => (this.input = el as HTMLScInputElement)}\n        value={this.value}\n        label={this.label}\n        help={this.help}\n        autocomplete=\"phone\"\n        placeholder={this.placeholder}\n        readonly={this.readonly}\n        required={this.required}\n        invalid={this.invalid}\n        autofocus={this.autofocus}\n        hasFocus={this.hasFocus}\n        onScChange={() => this.handleChange()}\n        onScInput={() => this.scInput.emit()}\n        onScFocus={() => this.scFocus.emit()}\n        onScBlur={() => this.scBlur.emit()}\n      />\n    );\n  }\n}\n"],"mappings":"6RAAA,MAAMA,EAAqB,uB,MCWdC,EAAe,M,wMAOoC,S,WAG7B,G,UAGD,M,oCAMH,K,UAGN,G,yCAMsB,M,cAGA,M,cAGT,M,aAMc,M,sEA0BlDC,qBACEC,KAAKC,MAAQD,KAAKE,MAAMD,MACxBD,KAAKG,SAASC,M,CAIhBL,uB,QACE,OAAOM,GAAAC,EAAAN,KAAKE,SAAK,MAAAI,SAAA,SAAAA,EAAEC,kBAAc,MAAAF,SAAA,SAAAA,EAAAG,KAAAF,E,CAGnCG,oBACET,KAAKU,uBACLV,KAAKW,qBAAuBC,EAAS,YAAY,IAAMZ,KAAKU,wB,CAG9DG,uBACEb,KAAKW,sB,CAGPD,uB,gBAEE,GAAIV,OAAI,MAAJA,YAAI,SAAJA,KAAMC,MAAO,OAGjB,IAAIK,EAAAQ,EAAcC,YAAQ,MAAAT,SAAA,SAAAA,EAAEU,MAAO,CACjChB,KAAKC,OAAQI,EAAAS,EAAcC,YAAQ,MAAAV,SAAA,SAAAA,EAAEW,MACrC,M,CAIF,IAAIC,GAACC,EAAAJ,EAAcC,YAAQ,MAAAG,SAAA,SAAAA,EAAEC,YAAqB,MAAAF,SAAA,SAAAA,EAAED,MAAO,CACzDhB,KAAKC,OAAQmB,GAACC,EAAAP,EAAcC,YAAQ,MAAAM,SAAA,SAAAA,EAAEF,YAAqB,MAAAC,SAAA,SAAAA,EAAEJ,MAC7D,M,EAIJM,SACE,OACEC,EAAA,kBACEC,KAAK,QACLC,IAAKC,GAAO1B,KAAKE,MAAQwB,EACzBzB,MAAOD,KAAKC,MACZ0B,MAAO3B,KAAK2B,MACZC,KAAM5B,KAAK4B,KACXC,aAAa,QACbC,YAAa9B,KAAK8B,YAClBC,SAAU/B,KAAK+B,SACfC,SAAUhC,KAAKgC,SACfC,QAASjC,KAAKiC,QACdC,UAAWlC,KAAKkC,UAChBC,SAAUnC,KAAKmC,SACfC,WAAY,IAAMpC,KAAKqC,eACvBC,UAAW,IAAMtC,KAAKuC,QAAQnC,OAC9BoC,UAAW,IAAMxC,KAAKyC,QAAQrC,OAC9BsC,SAAU,IAAM1C,KAAK2C,OAAOvC,Q"}
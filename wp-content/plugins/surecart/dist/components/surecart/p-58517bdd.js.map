{"version":3,"names":["clearCheckout","clearSavedCheckout","state","formId","mode","lockCheckout","lockName","locks","unLockCheckout","filter","name","updateCheckoutLineItem","async","id","data","updateFormState","checkout","updateLineItem","e","console","error","createErrorNotice","removeCheckoutLineItem","removeLineItem","checkoutId","itemId","addCheckoutLineItem","addLineItem","live_mode","trackOrderBump","bumpId","_a","apiFetch","path","method","keepalive"],"sources":["./src/store/checkout/mutations.ts"],"sourcesContent":["import state from './store';\nimport { clearCheckout as clearSavedCheckout } from '../checkouts/mutations';\nimport { updateFormState } from '@store/form/mutations';\nimport { createErrorNotice } from '@store/notices/mutations';\nimport { addLineItem, removeLineItem, updateLineItem } from '../../services/session';\nimport apiFetch from '../../functions/fetch';\n\n/**\n * Clear the current checkout.\n */\nexport const clearCheckout = () => clearSavedCheckout(state.formId, state.mode);\n\n/**\n * Lock the checkout (disables input and submission)\n * Pass a lock name to prevent conflicts and allow multiple locks.\n */\nexport const lockCheckout = lockName => (state.locks = [...state.locks, lockName]);\n\n/**\n * Unlock the checkout.\n * Pass an optional lock name to only unlock a specific lock\n */\nexport const unLockCheckout = (lockName = '') => (state.locks = !!lockName ? state.locks.filter(name => name !== lockName) : []);\n\n/**\n * Update the checkout line item\n */\nexport const updateCheckoutLineItem = async ({ id, data }) => {\n  try {\n    updateFormState('FETCH');\n    state.checkout = await updateLineItem({\n      id: id,\n      data,\n    });\n    updateFormState('RESOLVE');\n  } catch (e) {\n    console.error(e);\n    createErrorNotice(e);\n    updateFormState('REJECT');\n  }\n};\n\n/**\n * Remove the checkout line item.\n */\nexport const removeCheckoutLineItem = async id => {\n  try {\n    updateFormState('FETCH');\n    state.checkout = await removeLineItem({\n      checkoutId: state.checkout.id,\n      itemId: id,\n    });\n    updateFormState('RESOLVE');\n  } catch (e) {\n    console.error(e);\n    createErrorNotice(e);\n    updateFormState('REJECT');\n  }\n};\n\n/**\n * Add the checkout line item.\n */\nexport const addCheckoutLineItem = async data => {\n  try {\n    updateFormState('FETCH');\n    state.checkout = await addLineItem({\n      checkout: state.checkout,\n      data,\n      live_mode: state?.mode === 'live',\n    });\n    updateFormState('RESOLVE');\n  } catch (e) {\n    console.error(e);\n    createErrorNotice(e);\n    updateFormState('REJECT');\n  }\n};\n\n/**\n * Track order bump offers.\n */\nexport const trackOrderBump = (bumpId: string) => {\n  if (!state.checkout?.id) {\n    return;\n  }\n\n  apiFetch({\n    path: `surecart/v1/checkouts/${state.checkout.id}/offer_bump/${bumpId}`,\n    method: 'POST',\n    keepalive: true, // Important: allow the request to outlive the page.\n  });\n};\n"],"mappings":"qMAUaA,EAAgB,IAAMC,EAAmBC,EAAMC,OAAQD,EAAME,M,MAM7DC,EAAeC,GAAaJ,EAAMK,MAAQ,IAAIL,EAAMK,MAAOD,G,MAM3DE,EAAiB,CAACF,EAAW,KAAQJ,EAAMK,QAAUD,EAAWJ,EAAMK,MAAME,QAAOC,GAAQA,IAASJ,IAAY,G,MAKhHK,EAAyBC,OAASC,KAAIC,WACjD,IACEC,EAAgB,SAChBb,EAAMc,eAAiBC,EAAe,CACpCJ,GAAIA,EACJC,SAEFC,EAAgB,U,CAChB,MAAOG,GACPC,QAAQC,MAAMF,GACdG,EAAkBH,GAClBH,EAAgB,S,SAOPO,EAAyBV,MAAMC,IAC1C,IACEE,EAAgB,SAChBb,EAAMc,eAAiBO,EAAe,CACpCC,WAAYtB,EAAMc,SAASH,GAC3BY,OAAQZ,IAEVE,EAAgB,U,CAChB,MAAOG,GACPC,QAAQC,MAAMF,GACdG,EAAkBH,GAClBH,EAAgB,S,SAOPW,EAAsBd,MAAME,IACvC,IACEC,EAAgB,SAChBb,EAAMc,eAAiBW,EAAY,CACjCX,SAAUd,EAAMc,SAChBF,OACAc,WAAW1B,IAAK,MAALA,SAAK,SAALA,EAAOE,QAAS,SAE7BW,EAAgB,U,CAChB,MAAOG,GACPC,QAAQC,MAAMF,GACdG,EAAkBH,GAClBH,EAAgB,S,SAOPc,EAAkBC,I,MAC7B,MAAKC,EAAA7B,EAAMc,YAAQ,MAAAe,SAAA,SAAAA,EAAElB,IAAI,CACvB,M,CAGFmB,EAAS,CACPC,KAAM,yBAAyB/B,EAAMc,SAASH,iBAAiBiB,IAC/DI,OAAQ,OACRC,UAAW,MACX,S"}
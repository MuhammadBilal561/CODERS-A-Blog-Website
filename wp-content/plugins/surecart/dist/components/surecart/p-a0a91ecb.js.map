{"version":3,"names":["registry","watchedIcons","getIconLibrary","name","filter","lib","registerIconLibrary","options","unregisterIconLibrary","push","resolver","mutator","map","icon","library","redraw","window","ceRegisterIconLibrary"],"sources":["./src/components/ui/icon/library.ts"],"sourcesContent":["export type IconLibraryResolver = (name: string) => string;\nexport type IconLibraryMutator = (svg: SVGElement) => void;\nexport interface IconLibrary {\n  name: string;\n  resolver: IconLibraryResolver;\n  mutator?: IconLibraryMutator;\n}\n\nlet registry: IconLibrary[] = [];\nlet watchedIcons: any[] = [];\n\nexport function watchIcon(icon: any) {\n  watchedIcons.push(icon);\n}\n\nexport function unwatchIcon(icon: any) {\n  watchedIcons = watchedIcons.filter(el => el !== icon);\n}\n\nexport function getIconLibrary(name?: string) {\n  return registry.filter(lib => lib.name === name)[0];\n}\n\nexport function registerIconLibrary(name: string, options: { resolver: IconLibraryResolver; mutator?: IconLibraryMutator }) {\n  unregisterIconLibrary(name);\n  registry.push({\n    name,\n    resolver: options.resolver,\n    mutator: options.mutator,\n  });\n  // Redraw watched icons\n  watchedIcons.map(icon => {\n    if (icon.library === name) {\n      icon.redraw();\n    }\n  });\n}\n\nexport function unregisterIconLibrary(name: string) {\n  registry = registry.filter(lib => lib.name !== name);\n}\n\nwindow.ceRegisterIconLibrary = registerIconLibrary;\n"],"mappings":"AAQA,IAAIA,EAA0B,GAC9B,IAAIC,EAAsB,G,SAUVC,EAAeC,GAC7B,OAAOH,EAASI,QAAOC,GAAOA,EAAIF,OAASA,IAAM,EACnD,C,SAEgBG,EAAoBH,EAAcI,GAChDC,EAAsBL,GACtBH,EAASS,KAAK,CACZN,OACAO,SAAUH,EAAQG,SAClBC,QAASJ,EAAQI,UAGnBV,EAAaW,KAAIC,IACf,GAAIA,EAAKC,UAAYX,EAAM,CACzBU,EAAKE,Q,IAGX,C,SAEgBP,EAAsBL,GACpCH,EAAWA,EAASI,QAAOC,GAAOA,EAAIF,OAASA,GACjD,CAEAa,OAAOC,sBAAwBX,S"}
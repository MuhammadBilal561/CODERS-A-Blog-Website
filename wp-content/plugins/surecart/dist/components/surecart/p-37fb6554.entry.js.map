{"version":3,"names":["scProductItemListCss","wp","i18n","sprintf","__","this","currentPage","undefined","pagination","total","renderSortName","h","onClick","sort","collectionEnabled","_a","collections","length","style","type","caret","slot","_b","selectedCollections","map","collection","name","join","_c","clearable","onScClear","query","placeholder","size","onKeyUp","e","class","key","id","loading","isPaginationAvailable"],"sources":["./src/components/controllers/products/sc-product-item-list/sc-product-item-list.scss?tag=sc-product-item-list&encapsulation=shadow","./src/components/controllers/products/sc-product-item-list/sc-product-item-list.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.product-item-list {\n  display: grid;\n  grid-template-columns: repeat(var(--sc-product-item-list-column), 1fr);\n  gap: var(--sc-product-item-list-gap);\n\n  &__wrapper {\n    container-type: inline-size;\n    display: grid;\n    gap: var(--sc-spacing-medium);\n\n    @container (max-width: 576px) {\n      .product-item-list {\n        grid-template-columns: 1fr;\n      }\n    }\n    @container (min-width: 576px) and (max-width: 768px) {\n      .product-item-list {\n        grid-template-columns: repeat(3, 1fr);\n      }\n    }\n  }\n\n  &__sort,\n  &__empty,\n  &__search,\n  &__search-tag {\n    font-size: 16px;\n  }\n\n  &__search,\n  &__sort {\n    display: flex;\n    align-items: center;\n    gap: var(--sc-spacing-small);\n  }\n\n  &__controls {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  &__loader {\n    display: grid;\n    gap: 0.88rem;\n    padding-top: var(--sc-product-item-padding-top);\n    padding-bottom: var(--sc-product-item-padding-bottom);\n    padding-left: var(--sc-product-item-padding-left);\n    padding-right: var(--sc-product-item-padding-right);\n    margin-top: var(--sc-product-item-margin-top);\n    margin-bottom: var(--sc-product-item-margin-bottom);\n    margin-left: var(--sc-product-item-margin-left);\n    margin-right: var(--sc-product-item-margin-right);\n    border: solid var(--sc-product-item-border-width) var(--sc-product-item-border-color);\n    border-radius: var(--sc-product-item-border-radius);\n    color: var(--sc-product-title-text-color);\n    background-color: var(--sc-product-item-background-color);\n    line-height: 1;\n  }\n\n  &__pagination {\n    padding: 40px 0 0;\n    width: 100%;\n    font-size: var(--sc-font-size-small, var(--wp--preset--font-size--x-small));\n  }\n\n  &__search-tag {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: var(--sc-spacing-small);\n  }\n\n  &__search-label {\n    font-size: var(--sc-font-size-small, var(--wp--preset--font-size--x-small));\n  }\n}\n\n.search-button,\n.clear-button {\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity var(--sc-transition-medium) ease-in-out;\n  cursor: pointer;\n}\n\n.product-item-list__has-search {\n  .search-button,\n  .clear-button {\n    opacity: 1;\n    visibility: visible;\n  }\n}\n\nsc-product-item::part(image) {\n  aspect-ratio: var(--sc-product-image-aspect-ratio);\n}\n\nsc-dropdown sc-button::part(base):focus-visible {\n  border: 1px dashed var(--sc-product-item-border-color, --sc-color-gray-50);\n}\n\nsc-pagination {\n  font-size: var(--sc-pagination-font-size);\n}\n","/**\n * External dependencies.\n */\nimport { Component, Element, h, Prop, State, Watch, Event, EventEmitter } from '@stencil/core';\nimport { addQueryArgs, getQueryArgs } from '@wordpress/url';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\n\n/**\n * Internal dependencies.\n */\nimport { Collection, Product, ProductsSearchedParams, ProductsViewedParams } from '../../../../types';\nimport apiFetch, { handleNonceError } from '../../../../functions/fetch';\nimport '@store/product/facebook';\nimport '@store/product/google';\n\nexport type LayoutConfig = {\n  blockName: string;\n  attributes: any;\n}[];\n\n@Component({\n  tag: 'sc-product-item-list',\n  styleUrl: 'sc-product-item-list.scss',\n  shadow: true,\n})\nexport class ScProductItemList {\n  @Element() el: HTMLScProductItemListElement;\n  /** Limit to a set of ids.  */\n  @Prop() ids: string[];\n\n  /** Sort */\n  @Prop({ mutable: true }) sort: string = 'created_at:desc';\n\n  /** Query to search for */\n  @Prop({ mutable: true }) query: string;\n\n  /** Should allow search */\n  @Prop() searchEnabled: boolean = true;\n\n  /** Should allow search */\n  @Prop() sortEnabled: boolean = true;\n\n  /** Should allow collection filter */\n  @Prop() collectionEnabled: boolean = true;\n\n  /** Show for a specific collection */\n  @Prop() collectionId: string;\n\n  /** The page title */\n  @Prop() pageTitle: string;\n\n  /** Show only featured products. */\n  @Prop() featured: boolean = false;\n\n  /** Should we paginate? */\n  @Prop() paginationEnabled: boolean = true;\n\n  /** Should we paginate? */\n  @Prop() ajaxPagination: boolean = true;\n\n  /** Should we auto-scroll to the top when paginating via ajax */\n  @Prop() paginationAutoScroll: boolean = true;\n\n  /* Layout configuration */\n  @Prop() layoutConfig: LayoutConfig;\n\n  /* Pagination alignment */\n  @Prop() paginationAlignment: string = 'center';\n\n  /* Limit per page */\n  @Prop() limit: number = 15;\n\n  /* Current page */\n  @Prop({ mutable: true }) page: number = 1;\n\n  /* Product list */\n  @Prop({ mutable: true }) products?: Product[];\n\n  /* Loading indicator */\n  @State() loading: boolean = false;\n\n  /** Busy indicator */\n  @State() busy: boolean = false;\n\n  /** Error notice. */\n  @State() error: string;\n\n  /** Product was searched */\n  @Event() scSearched: EventEmitter<ProductsSearchedParams>;\n\n  /** Products viewed */\n  @Event() scProductsViewed: EventEmitter<ProductsViewedParams>;\n\n  /** Current page */\n  @State() currentPage = 1;\n\n  /** Current query */\n  @State() currentQuery: string;\n\n  /** Pagination */\n  @Prop({ mutable: true }) pagination: {\n    total: number;\n    total_pages: number;\n  } = {\n    total: 0,\n    total_pages: 0,\n  };\n\n  /** Collections */\n  @State() collections: Collection[];\n\n  /** Selected collections */\n  @State() selectedCollections: Collection[] = [];\n\n  @Watch('products')\n  handleProductsChanged(newProducts?: Product[], oldProducts?: Product[]) {\n    const productIds = new Set([...(oldProducts || []).map(product => product.id), ...(newProducts || []).map(product => product.id)]);\n\n    if (newProducts?.length === oldProducts?.length && productIds.size === newProducts.length) {\n      return;\n    }\n\n    const title = [\n      this.pageTitle,\n      this.paginationEnabled ? sprintf(__('Page %d', 'surecart'), this.currentPage) : undefined,\n      this.sort ? this.renderSortName() : undefined,\n      this.query || this.selectedCollections?.length ? __('Search results', 'surecart') : undefined,\n    ]\n      .filter(item => !!item)\n      .join(' - ');\n\n    this.scProductsViewed.emit({\n      products: this.products,\n      pageTitle: title,\n      collectionId: this.collectionId,\n    });\n  }\n\n  componentWillLoad() {\n    if (!this?.products?.length) {\n      this.getProducts();\n    } else {\n      this.handleProductsChanged(this.products);\n    }\n\n    if (this.collectionEnabled) {\n      this.getCollections();\n    }\n  }\n\n  // Append URL if no 'product-page' found\n  doPagination(page: number) {\n    // handle ajax pagination\n    if (this.ajaxPagination) {\n      this.page = page;\n      this.updateProducts();\n      this.paginationAutoScroll && this.el.scrollIntoView({ behavior: 'smooth' });\n      return;\n    }\n\n    // handle server pagination.\n    const newUrl = addQueryArgs(location.href, { 'product-page': page });\n    window.location.replace(newUrl);\n  }\n\n  // Fetch all products\n  async getProducts() {\n    const { 'product-page': page } = getQueryArgs(window.location.href) as {\n      'product-page': string;\n    };\n\n    this.page = this.paginationEnabled && page ? parseInt(page) : 1;\n\n    try {\n      this.loading = true;\n      await this.fetchProducts();\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  // Fetch all collections\n  async getCollections() {\n    try {\n      this.collections = (await apiFetch({\n        path: addQueryArgs('surecart/v1/product_collections/', {\n          per_page: 100,\n        }),\n      })) as Collection[];\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  @Watch('sort')\n  @Watch('selectedCollections')\n  @Watch('query')\n  async handleSortChange() {\n    this.page = 1;\n    this.updateProducts();\n  }\n\n  async updateProducts(emitSearchEvent: boolean = false) {\n    try {\n      this.busy = true;\n      await this.fetchProducts();\n      if (!!this.query && emitSearchEvent) {\n        this.scSearched.emit({\n          searchString: this.query,\n          searchResultCount: this.products?.length,\n          searchResultIds: this.products.map(product => product.id),\n        });\n      }\n    } catch (error) {\n      console.log('error');\n      console.error(error);\n      this.error = error.message || __('An unknown error occurred.', 'surecart');\n    } finally {\n      this.busy = false;\n    }\n  }\n\n  private debounce;\n  @Watch('ids')\n  @Watch('limit')\n  @Watch('featured')\n  handleIdsChange() {\n    if (this.debounce !== null) {\n      clearTimeout(this.debounce);\n      this.debounce = null;\n    }\n\n    this.debounce = window.setTimeout(() => {\n      // your debounced traitment\n      this.updateProducts();\n      this.debounce = null;\n    }, 200);\n  }\n\n  async fetchProducts() {\n    let collectionIds = this.selectedCollections?.map(collection => collection.id) || [];\n\n    // If we have a collectionId, we should only fetch products from that collection.\n    if (this.collectionId) {\n      collectionIds = [this.collectionId];\n    }\n\n    try {\n      const response = (await apiFetch({\n        path: addQueryArgs(`surecart/v1/products/`, {\n          expand: ['prices', 'featured_product_media', 'product_medias', 'product_media.media', 'variants'],\n          archived: false,\n          status: ['published'],\n          per_page: this.limit,\n          page: this.page,\n          sort: this.sort,\n          product_collection_ids: collectionIds,\n          ...(this.featured ? { featured: true } : {}),\n          ...(this.ids?.length ? { ids: this.ids } : {}),\n          ...(this.query ? { query: this.query } : {}),\n        }),\n        parse: false,\n      })) as Response;\n      this.currentQuery = this.query;\n      this.pagination = {\n        total: parseInt(response.headers.get('X-WP-Total')),\n        total_pages: parseInt(response.headers.get('X-WP-TotalPages')),\n      };\n      this.products = (await response.json()) as Product[];\n      if (!!collectionIds.length || !!this.query) {\n        speak(sprintf(__('%s products found', 'surecart'), this.pagination.total));\n      }\n    } catch (response) {\n      // we will want to handle nonce error if we are bypassing the apiFetch parser.\n      await handleNonceError(response)\n        .then(() => this.fetchProducts())\n        .catch(error => {\n          this.error = error.message || __('An unknown error occurred.', 'surecart');\n        });\n    }\n  }\n\n  renderSortName() {\n    switch (this.sort) {\n      case 'created_at:desc':\n        return __('Latest', 'surecart');\n      case 'created_at:asc':\n        return __('Oldest', 'surecart');\n      case 'name:asc':\n        return __('Alphabetical, A-Z', 'surecart');\n      case 'name:desc':\n        return __('Alphabetical, Z-A', 'surecart');\n      default:\n        return __('Sort', 'surecart');\n    }\n  }\n\n  toggleSelectCollection(collection: Collection) {\n    // if collection not in selectedCollections, add it, otherwise remove it\n    if (!this.selectedCollections.find(c => c.id === collection.id)) {\n      this.selectedCollections = [...this.selectedCollections, collection];\n    } else {\n      this.selectedCollections = this.selectedCollections.filter(c => c.id !== collection.id);\n    }\n  }\n\n  getCollectionsAfterFiltered() {\n    return (this.collections ?? []).filter(collection => {\n      return !this.selectedCollections.some(selected => selected.id === collection.id);\n    });\n  }\n\n  isPaginationAvailable() {\n    return !!this.products?.length && this.pagination.total > this.products.length && this.paginationEnabled;\n  }\n\n  render() {\n    return (\n      <div\n        class={{\n          'product-item-list__wrapper': true,\n          'product-item-list__has-search': !!this.query,\n        }}\n      >\n        {this.error && (\n          <sc-alert type=\"danger\" open>\n            {this.error}\n          </sc-alert>\n        )}\n        {(this.searchEnabled || this.sortEnabled || this.collectionEnabled) && (\n          <div class=\"product-item-list__header\">\n            <div class=\"product-item-list__controls\">\n              <div class=\"product-item-list__sort\">\n                {this.sortEnabled && (\n                  <sc-dropdown style={{ '--panel-width': '15em' }}>\n                    <sc-button type=\"text\" caret slot=\"trigger\">\n                      <sc-visually-hidden>{__('Dropdown to sort products.', 'surecart')} </sc-visually-hidden>\n                      {this.renderSortName()}\n                      <sc-visually-hidden> {__('selected.', 'surecart')}</sc-visually-hidden>\n                    </sc-button>\n                    <sc-menu aria-label={__('Sort Products', 'surecart')}>\n                      <sc-menu-item aria-label={__('Sort by latest', 'surecart')} onClick={() => (this.sort = 'created_at:desc')}>\n                        {__('Latest', 'surecart')}\n                      </sc-menu-item>\n                      <sc-menu-item aria-label={__('Sort by oldest', 'surecart')} onClick={() => (this.sort = 'created_at:asc')}>\n                        {__('Oldest', 'surecart')}\n                      </sc-menu-item>\n                      <sc-menu-item aria-label={__('Sort by name, A to Z', 'surecart')} onClick={() => (this.sort = 'name:asc')}>\n                        {__('Alphabetical, A-Z', 'surecart')}\n                      </sc-menu-item>\n                      <sc-menu-item aria-label={__('Sort by name, Z to A', 'surecart')} onClick={() => (this.sort = 'name:desc')}>\n                        {__('Alphabetical, Z-A', 'surecart')}\n                      </sc-menu-item>\n                    </sc-menu>\n                  </sc-dropdown>\n                )}\n\n                {this.collectionEnabled && (this.collections ?? []).length > 0 && (\n                  <sc-dropdown style={{ '--panel-width': '15rem' }}>\n                    <sc-button type=\"text\" caret slot=\"trigger\">\n                      <sc-visually-hidden>\n                        {sprintf(\n                          __('Dropdown to filter products by collection. %s selected.', 'surecart'),\n                          this.selectedCollections?.length ? this.selectedCollections.map(collection => collection?.name).join(',') : __('None', 'surecart'),\n                        )}\n                      </sc-visually-hidden>\n                      <span aria-hidden> {__('Filter', 'surecart')}</span>\n                    </sc-button>\n                    <sc-menu aria-label={__('Filter products', 'surecart')}>\n                      {(this.collections ?? []).map(collection => {\n                        return (\n                          <sc-menu-item\n                            checked={this.selectedCollections.some(selected => selected?.id === collection?.id)}\n                            onClick={() => this.toggleSelectCollection(collection)}\n                            key={collection?.id}\n                            aria-label={sprintf(__('Filter by %s', 'surecart'), collection?.name)}\n                          >\n                            {collection.name}\n                          </sc-menu-item>\n                        );\n                      })}\n                    </sc-menu>\n                  </sc-dropdown>\n                )}\n              </div>\n              <div class=\"product-item-list__search\">\n                {this.searchEnabled &&\n                  (this.query?.length && this.query === this.currentQuery ? (\n                    <div class=\"product-item-list__search-tag\">\n                      <div class=\"product-item-list__search-label\">{__('Search Results:', 'surecart')}</div>\n                      <sc-tag\n                        clearable\n                        onScClear={() => {\n                          this.query = '';\n                          this.currentQuery = '';\n                          this.updateProducts();\n                        }}\n                        aria-label={sprintf(__('Searched for %s. Press space to clear search.', 'surecart'), this.query)}\n                      >\n                        {this.query}\n                      </sc-tag>\n                    </div>\n                  ) : (\n                    <sc-input\n                      type=\"text\"\n                      placeholder={__('Search', 'surecart')}\n                      size=\"small\"\n                      onKeyUp={e => {\n                        if (e.key === 'Enter') {\n                          this.query = (e.target as any).value;\n                          this.updateProducts(true);\n                        }\n                      }}\n                      value={this.query}\n                      clearable\n                    >\n                      {this.query ? (\n                        <sc-icon\n                          class=\"clear-button\"\n                          slot=\"prefix\"\n                          name=\"x\"\n                          onClick={() => {\n                            this.query = '';\n                          }}\n                        />\n                      ) : (\n                        <sc-icon slot=\"prefix\" name=\"search\" />\n                      )}\n                      <sc-button\n                        class=\"search-button\"\n                        type=\"link\"\n                        slot=\"suffix\"\n                        busy={this.busy}\n                        onClick={() => {\n                          this.updateProducts(true);\n                        }}\n                      >\n                        {__('Search', 'surecart')}\n                      </sc-button>\n                    </sc-input>\n                  ))}\n              </div>\n            </div>\n            {this.collectionEnabled && this.selectedCollections.length > 0 && (\n              <div class=\"product-item-list__search-tag\">\n                {this.selectedCollections.map(collection => (\n                  <sc-tag\n                    key={collection?.id}\n                    clearable\n                    onScClear={() => {\n                      this.toggleSelectCollection(collection);\n                    }}\n                  >\n                    {collection?.name}\n                  </sc-tag>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {!this.products?.length && !this.loading && (\n          <sc-empty class=\"product-item-list__empty\" icon=\"shopping-bag\">\n            {__('No products found.', 'surecart')}\n          </sc-empty>\n        )}\n\n        <section class=\"product-item-list\" aria-label={__('Product list', 'surecart')}>\n          {this.loading\n            ? [...Array(this.products?.length || this.limit || 10)].map((_, index) => (\n                <div class=\"product-item-list__loader\" key={index}>\n                  {(this.layoutConfig || []).map(layout => {\n                    switch (layout.blockName) {\n                      case 'surecart/product-item-title':\n                        return (\n                          <div\n                            style={{\n                              textAlign: 'var(--sc-product-title-align)',\n                            }}\n                          >\n                            <sc-skeleton\n                              style={{\n                                width: '80%',\n                                display: 'inline-block',\n                              }}\n                            ></sc-skeleton>\n                          </div>\n                        );\n                      case 'surecart/product-item-image':\n                        return (\n                          <sc-skeleton\n                            style={{\n                              'width': '100%',\n                              'minHeight': '90%',\n                              'aspectRatio': layout.attributes?.ratio ?? '1/1.4',\n                              '--sc-border-radius-pill': '12px',\n                              'display': 'inline-block',\n                            }}\n                          ></sc-skeleton>\n                        );\n                      case 'surecart/product-item-price':\n                        return (\n                          <div\n                            style={{\n                              textAlign: 'var(--sc-product-price-align)',\n                            }}\n                          >\n                            <sc-skeleton\n                              style={{\n                                width: '40%',\n                                display: 'inline-block',\n                              }}\n                            ></sc-skeleton>\n                          </div>\n                        );\n                      default:\n                        return null;\n                    }\n                  })}\n                </div>\n              ))\n            : (this.products || []).map((product, index: number) => {\n                return (\n                  <sc-product-item\n                    key={product?.id}\n                    {...(this.products.length - 1 === index\n                      ? {\n                          'aria-label': sprintf(\n                            __('You have reached the end of product list. %s', 'surecart'),\n                            this.isPaginationAvailable() ? __('Press tab to browse more products using pagination.', 'surecart') : __('No more products to browse.', 'surecart'),\n                          ),\n                        }\n                      : {})}\n                    exportparts=\"title, price, image\"\n                    product={product}\n                    layoutConfig={this.layoutConfig}\n                  ></sc-product-item>\n                );\n              })}\n        </section>\n        {this.isPaginationAvailable() && (\n          <div\n            class={{\n              'product-item-list__pagination': true,\n              '--is-aligned-left': this.paginationAlignment === 'left',\n              '--is-aligned-center': this.paginationAlignment === 'center',\n              '--is-aligned-right': this.paginationAlignment === 'right',\n            }}\n          >\n            <sc-pagination\n              page={this.page}\n              perPage={this.limit}\n              total={this.pagination.total}\n              totalPages={this.pagination.total_pages}\n              totalShowing={this.limit}\n              onScNextPage={() => this.doPagination(this.page + 1)}\n              onScPrevPage={() => this.doPagination(this.page - 1)}\n            ></sc-pagination>\n          </div>\n        )}\n        {(this.busy || this.loading) && <sc-block-ui />}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"}
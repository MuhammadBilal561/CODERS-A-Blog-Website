{"version":3,"names":["ScProvider","watchContext","newContext","this","consumers","forEach","consumer","async","event","stopPropagation","slice","concat","detail","STENCIL_CONTEXT","index","indexOf","newConsumers","length","disconnectedCallback","map","mountEmitter","emit","render","h"],"sources":["./src/components/context/provider/sc-provider.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, h, Listen, Prop, State, Watch } from '@stencil/core';\n\ninterface ConsumerEvent extends Event {\n  detail: Function;\n}\n\n@Component({\n  tag: 'sc-provider',\n})\nexport class ScProvider {\n  @Prop() STENCIL_CONTEXT: { [key: string]: any };\n  @State() consumers: Function[] = [];\n\n  @Watch('STENCIL_CONTEXT')\n  watchContext(newContext) {\n    this.consumers.forEach(consumer => consumer(newContext));\n  }\n  @Event({ eventName: 'mountConsumer' }) mountEmitter: EventEmitter;\n\n  @Listen('mountConsumer')\n  async mountConsumer(event: ConsumerEvent) {\n    event.stopPropagation();\n    this.consumers = this.consumers.slice().concat([event.detail]);\n    await event.detail(this.STENCIL_CONTEXT);\n    const index = this.consumers.indexOf(event.detail);\n    const newConsumers = this.consumers.slice(0, index).concat(this.consumers.slice(index + 1, this.consumers.length));\n    this.consumers = newConsumers;\n  }\n\n  disconnectedCallback() {\n    this.consumers.map(consumer => this.mountEmitter.emit(consumer));\n  }\n\n  render() {\n    return <slot />;\n  }\n}\n"],"mappings":"wDASaA,EAAU,M,mHAEY,E,CAGjCC,aAAaC,GACXC,KAAKC,UAAUC,SAAQC,GAAYA,EAASJ,I,CAK9CK,oBAAoBC,GAClBA,EAAMC,kBACNN,KAAKC,UAAYD,KAAKC,UAAUM,QAAQC,OAAO,CAACH,EAAMI,eAChDJ,EAAMI,OAAOT,KAAKU,iBACxB,MAAMC,EAAQX,KAAKC,UAAUW,QAAQP,EAAMI,QAC3C,MAAMI,EAAeb,KAAKC,UAAUM,MAAM,EAAGI,GAAOH,OAAOR,KAAKC,UAAUM,MAAMI,EAAQ,EAAGX,KAAKC,UAAUa,SAC1Gd,KAAKC,UAAYY,C,CAGnBE,uBACEf,KAAKC,UAAUe,KAAIb,GAAYH,KAAKiB,aAAaC,KAAKf,I,CAGxDgB,SACE,OAAOC,EAAA,Y"}
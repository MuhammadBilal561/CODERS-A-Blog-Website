{"file":"sc-toggles.entry.cjs.js","mappings":";;;;;;AAAA,MAAM,YAAY,GAAG,0MAA0M;;MCOlN,SAAS;;;qBAKS,KAAK;uBAGH,IAAI;iBAGM,SAAS;;EAElD,UAAU;;IACR,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;IAC1E,IAAI,CAAC,OAAO;MAAE,OAAO;IACrB,OAAO,CAAC,MAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,uDAAI,0CAAE,MAAM,mDAAG,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW,CAA2B,KAAI,EAAE,CAAC;GACrH;EAGD,gBAAgB,CAAC,CAAC;IAChB,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,WAAW;MAAE,OAAO;IAC7C,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;KACzE;GACF;EAGD,sBAAsB;IACpB,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;GAC5E;EAED,gBAAgB;IACd,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;MAC3D,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;KACxB;GACF;EAED,MAAM;IACJ,MAAM,GAAG,GAAG,WAAW,KAAK,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,KAAK,CAAC;IAC3D,QACEA,QAAC,GAAG,IAAC,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,kBAAkB,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE,IAAI,EAAC,MAAM,wBAChFA,qBAAa,CACT,EACN;GACH;;;;;;;;;;","names":["h"],"sources":["./src/components/ui/sc-toggles/sc-toggles.scss?tag=sc-toggles&encapsulation=shadow","./src/components/ui/sc-toggles/sc-toggles.tsx"],"sourcesContent":[":host {\n  display: block;\n  --toggle-spacing: 0;\n}\n\n::slotted(*) {\n  margin-bottom: var(--toggle-spacing);\n}\n::slotted(:not(:first-child):not([style*=\"display: none\"])) {\n  border-top: 1px solid var(--sc-input-border-color);\n}\n","import { Component, Element, h, Listen, Prop, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'sc-toggles',\n  styleUrl: 'sc-toggles.scss',\n  shadow: true,\n})\nexport class ScToggles {\n  /** The element */\n  @Element() el: HTMLScTogglesElement;\n\n  /** Should this function as an accordion? */\n  @Prop() accordion: boolean = false;\n\n  /** Are these collapsible? */\n  @Prop() collapsible: boolean = true;\n\n  /** Theme for the toggles */\n  @Prop() theme: 'default' | 'container' = 'default';\n\n  getToggles() {\n    let slotted = this.el.shadowRoot.querySelector('slot') as HTMLSlotElement;\n    if (!slotted) return;\n    return (slotted?.assignedNodes?.()?.filter?.(node => node.nodeName === 'SC-TOGGLE') as HTMLScToggleElement[]) || [];\n  }\n\n  @Listen('scShow')\n  handleShowChange(e) {\n    if (e.target.tagName !== 'SC-TOGGLE') return;\n    if (this.accordion) {\n      this.getToggles().map(details => (details.open = e.target === details));\n    }\n  }\n\n  @Watch('collapsible')\n  handleCollapibleChange() {\n    this.getToggles().map(details => (details.collapsible = this.collapsible));\n  }\n\n  componentDidLoad() {\n    this.handleCollapibleChange();\n    const toggles = this.getToggles();\n    if (toggles?.length && !toggles.some(toggle => toggle.open)) {\n      toggles[0].open = true;\n    }\n  }\n\n  render() {\n    const Tag = 'container' === this.theme ? 'sc-card' : 'div';\n    return (\n      <Tag class={{ toggles: true, [`toggles--theme-${this.theme}`]: true }} part=\"base\" no-padding>\n        <slot></slot>\n      </Tag>\n    );\n  }\n}\n"],"version":3}
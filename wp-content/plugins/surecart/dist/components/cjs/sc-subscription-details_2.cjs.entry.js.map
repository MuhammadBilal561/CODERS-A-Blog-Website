{"file":"sc-subscription-details.sc-subscription-status-badge.entry.cjs.js","mappings":";;;;;;;;;;AAAO,SAAS,UAAU;AAC1B,CAAC,CAAC;AACF,CAAC,OAAO,GAAG;AACX,EAAE,SAAS,EAAE,QAAQ;AACrB,EAAE,SAAS,EAAE,MAAM;AACnB,EAAE;AACF,CAAC,MAAM,GAAG,EAAE;AACZ,EAAE;AACF,CAAC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3D,CAAC,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;AAC5C;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4BA;;AAEA;AACA;AACA;AACA;AACA;;ACpEA,MAAM,wBAAwB,GAAG,0MAA0M;;;;;;;;;;;;;;;;;WC4BhO,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAoCa,eAAO,CAAC,UAAE,qIACnB,eAAO,CAAC,UAAE;;;;;;;gDAcH,eAAO,CACjB,UAAE,weAKH,UAAE,umBASF,UAAE;;8CAOO,eAAO,CACjB,UAAE,2JAKH,UAAE,0GAAuG,UAAE;;;8CAQ5F,eAAO,CAAC,UAAE,mHACnB,eAAO,CAAC,UAAE;;;8CAOD,eAAO,CAAC,UAAE,oOACkC,UAAE,sCAAsC,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mKA4DjG,UAAE,mJAMc,eAAO,CAAC,UAAE,kSAUf,UAAE;;gNA2BX,UAAE;;;;;;;;ACnOnB,MAAM,4BAA4B,GAAG,6BAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8HCsDrB,UAAE,yBAAyB,UAAE;;;;eAO3D,UAAE;;eAEF,UAAE;;eAEF,UAAE;;eAEF,UAAE;;;;;eAKF,UAAE;;eAEF,UAAE;;eAEF,UAAE;;;;8CAMS,eAAO,CAAC,UAAE;;;;;;;;","names":[],"sources":["../admin/util/time.js","../admin/util.js","./src/components/controllers/dashboard/subscription-details/sc-subscription-details.css?tag=sc-subscription-details&encapsulation=shadow","./src/components/controllers/dashboard/subscription-details/sc-subscription-details.tsx","./src/components/ui/subscription-status-badge/sc-subscription-status-badge.css?tag=sc-subscription-status-badge&encapsulation=shadow","./src/components/ui/subscription-status-badge/sc-subscription-status-badge.tsx"],"sourcesContent":["export function formatTime(\n\ts,\n\toptions = {\n\t\ttimeStyle: 'medium',\n\t\tdateStyle: 'full',\n\t},\n\tlocale = []\n) {\n\tconst dtFormat = new Intl.DateTimeFormat(locale, options);\n\treturn dtFormat.format(new Date(s * 1000));\n}\n","import { sprintf, __ } from '@wordpress/i18n';\n\nexport const maybeConvertAmount = (amount, currency) => {\n\treturn [\n\t\t'BIF',\n\t\t'BYR',\n\t\t'CLP',\n\t\t'DJF',\n\t\t'GNF',\n\t\t'ISK',\n\t\t'JPY',\n\t\t'KMF',\n\t\t'KRW',\n\t\t'PYG',\n\t\t'RWF',\n\t\t'UGX',\n\t\t'VND',\n\t\t'VUV',\n\t\t'XAF',\n\t\t'XAG',\n\t\t'XAU',\n\t\t'XBA',\n\t\t'XBB',\n\t\t'XBC',\n\t\t'XBD',\n\t\t'XDR',\n\t\t'XOF',\n\t\t'XPD',\n\t\t'XPF',\n\t\t'XPT',\n\t\t'XTS',\n\t].includes(currency.toUpperCase())\n\t\t? amount\n\t\t: amount / 100;\n};\n\nexport const getHumanDiscount = (coupon, currency = 'usd') => {\n\tif (coupon?.amount_off && currency) {\n\t\treturn sprintf(\n\t\t\t__('%s off', 'surecart'),\n\t\t\tgetFormattedPrice({\n\t\t\t\tamount: coupon.amount_off,\n\t\t\t\tcurrency,\n\t\t\t})\n\t\t);\n\t}\n\n\tif (coupon?.percent_off) {\n\t\treturn sprintf(__('%1d%% off', 'surecart'), coupon.percent_off || 0);\n\t}\n\n\treturn '';\n};\n\nexport const getFormattedPrice = ({ amount, currency = 'usd' }) => {\n\tconst converted = maybeConvertAmount(parseFloat(amount), currency);\n\n\treturn `${new Intl.NumberFormat(undefined, {\n\t\tstyle: 'currency',\n\t\tcurrency,\n\t}).format(parseFloat(converted.toFixed(2)))}`;\n};\n\nexport const formatNumber = (value, currency = '') =>\n\tnew Intl.NumberFormat([], {\n\t\tstyle: 'currency',\n\t\tcurrency: currency.toUpperCase(),\n\t\tcurrencyDisplay: 'symbol',\n\t}).format(maybeConvertAmount(value, currency.toUpperCase()));\n\n// get the currency symbol for a currency code.\nexport const getCurrencySymbol = (code = 'usd') => {\n\tconst formattedParts = new Intl.NumberFormat(undefined, {\n\t\tstyle: 'currency',\n\t\tcurrency: code,\n\t}).formatToParts();\n\treturn formattedParts.find((part) => part.type === 'currency')?.value;\n};\n\nexport const translate = (key) => {\n\tconst map = {\n\t\tday: __('Day', 'surecart'),\n\t\tmonth: __('Month', 'surecart'),\n\t\tyear: __('Year', 'surecart'),\n\t\tnever: __('Lifetime', 'surecart'),\n\t\tarchived: __('Archived', 'surecart'),\n\t\tdraft: __('Draft', 'surecart'),\n\t\tactive: __('Active', 'surecart'),\n\t\tinactive: __('Inactive', 'surecart'),\n\t\tpending: __('Pending', 'surecart'),\n\t\tapproved: __('Approved', 'surecart'),\n\t\tdenied: __('Denied', 'surecart'),\n\t\treviewing: __('Reviewing', 'surecart'),\n\t\tprocessing: __('Processing', 'surecart'),\n\t\tpaid: __('Paid', 'surecart'),\n\t};\n\treturn map?.[key] || key;\n};\n\nexport const filterObject = (obj, predicate) =>\n\tObject.keys(obj)\n\t\t.filter((key) => predicate(obj[key]))\n\t\t.reduce((res, key) => ((res[key] = obj[key]), res), {});\n\nexport const snakeToCamel = (str) =>\n\tstr\n\t\t.toLowerCase()\n\t\t.replace(/([-_][a-z])/g, (group) =>\n\t\t\tgroup.toUpperCase().replace('-', '').replace('_', '')\n\t\t);\n\nexport const camelName = (name) => {\n\tconst camelName = snakeToCamel(name);\n\treturn camelName.charAt(0).toUpperCase() + camelName.toLowerCase().slice(1);\n};\n\nexport const createErrorString = (error) => {\n\tconst additionalErrors = (error?.additional_errors || [])\n\t\t.map((error) => error?.message)\n\t\t.filter((n) => n);\n\treturn `${error?.message || __('Something went wrong.', 'surecart')}${\n\t\tadditionalErrors?.length && ` ${additionalErrors.join('. ')}`\n\t}`;\n};\n",":host {\n  display: block;\n}\n\n.subscription-details {\n  display: grid;\n  gap: 0.25em;\n  color: var(--sc-input-label-color);\n}\n\n.subscription-details__missing-method {\n  display: flex;\n  align-items: center;\n  gap: var(--sc-spacing-x-small);\n}\n","import { Component, h, Prop, State, Watch } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { addQueryArgs } from '@wordpress/url';\n\nimport apiFetch from '../../../../functions/fetch';\nimport { intervalString } from '../../../../functions/price';\nimport { License, Price, Product, Purchase, Subscription } from '../../../../types';\nimport { productNameWithPrice } from '../../../../functions/price';\nimport { formatTime } from '../../../../../../admin/util/time';\nimport { formatNumber } from '../../../../../../admin/util';\n@Component({\n  tag: 'sc-subscription-details',\n  styleUrl: 'sc-subscription-details.css',\n  shadow: true,\n})\nexport class ScSubscriptionDetails {\n  @Prop() subscription: Subscription;\n  @Prop() pendingPrice: Price;\n  @Prop() hideRenewalText: boolean;\n\n  @State() activationsModal: boolean;\n  @State() loading: boolean;\n  @State() hasPendingUpdate: boolean;\n\n  renderName() {\n    if (typeof this.subscription?.price?.product !== 'string') {\n      return productNameWithPrice(this.subscription?.price);\n    }\n    return __('Subscription', 'surecart');\n  }\n\n  @Watch('subscription')\n  async handleSubscriptionChange() {\n    this.hasPendingUpdate = !!Object.keys(this?.subscription?.pending_update || {})?.length;\n    if (this?.subscription?.pending_update?.price && !this?.pendingPrice && !this.hideRenewalText) {\n      this.pendingPrice = await this.fetchPrice(this.subscription.pending_update.price);\n    }\n  }\n\n  componentWillLoad() {\n    this.handleSubscriptionChange();\n  }\n\n  async fetchPrice(price_id: string) {\n    try {\n      this.loading = true;\n      const price = await apiFetch({\n        path: addQueryArgs(`surecart/v1/prices/${price_id}`, {\n          expand: ['product'],\n        }),\n      });\n      return price as Price;\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  renderRenewalText() {\n    const tag = <sc-subscription-status-badge subscription={this?.subscription}></sc-subscription-status-badge>;\n\n    if (this?.subscription?.cancel_at_period_end && this?.subscription?.current_period_end_at) {\n      return (\n        <span aria-label={sprintf(__('Renewal Update - Your plan will be canceled on %s', 'surecart'), formatTime(this.subscription.current_period_end_at))}>\n          {tag} {sprintf(__('Your plan will be canceled on', 'surecart'))}{' '}\n          <sc-format-date date={this.subscription.current_period_end_at * 1000} month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n\n    if (this.hasPendingUpdate) {\n      if (!this.pendingPrice && !this.subscription?.pending_update?.ad_hoc_amount) {\n        return <sc-skeleton></sc-skeleton>;\n      }\n\n      if (this.subscription?.pending_update?.ad_hoc_amount) {\n        return (\n          <span\n            aria-label={sprintf(\n              __('Renewal Update - Your plan switches to %1s on %2s', 'surecart'),\n              formatNumber(this.subscription?.pending_update?.ad_hoc_amount, this.pendingPrice?.currency || this.subscription?.price?.currency),\n              formatTime(this.subscription.current_period_end_at),\n            )}\n          >\n            {__('Your plan switches to', 'surecart')}{' '}\n            <strong>\n              <sc-format-number\n                type=\"currency\"\n                currency={this.pendingPrice?.currency || this.subscription?.price?.currency}\n                value={this.subscription?.pending_update?.ad_hoc_amount}\n              ></sc-format-number>{' '}\n              {intervalString(this.pendingPrice || this.subscription?.price)}\n            </strong>{' '}\n            {__('on', 'surecart')}{' '}\n            <sc-format-date date={this.subscription.current_period_end_at as number} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n          </span>\n        );\n      }\n      return (\n        <span\n          aria-label={sprintf(\n            __('Renewal Update - Your plan switches to %1s on %2s', 'surecart'),\n            (this.pendingPrice.product as Product).name,\n            formatTime(this.subscription.current_period_end_at),\n          )}\n        >\n          {__('Your plan switches to', 'surecart')} <strong>{(this.pendingPrice.product as Product).name}</strong> {__('on', 'surecart')}{' '}\n          <sc-format-date date={this.subscription.current_period_end_at as number} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n\n    if (this?.subscription?.status === 'trialing' && this?.subscription?.trial_end_at) {\n      return (\n        <span aria-label={sprintf(__('Renewal Update - Your plan begins on %s.', 'surecart'), formatTime(this.subscription.trial_end_at))}>\n          {tag} {sprintf(__('Your plan begins on', 'surecart'))}{' '}\n          <sc-format-date date={this?.subscription?.trial_end_at} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n    if (this.subscription?.status === 'active' && this.subscription?.current_period_end_at) {\n      return (\n        <span aria-label={sprintf(__('Renewal Update - Your next payment is on %s', 'surecart'), formatTime(this.subscription.current_period_end_at))}>\n          {tag} {this.subscription?.remaining_period_count === null ? __('Your plan renews on', 'surecart') : __('Your next payment is on', 'surecart')}{' '}\n          <sc-format-date date={this?.subscription?.current_period_end_at} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n\n    return tag;\n  }\n\n  getActivations() {\n    return (((this.subscription?.purchase as Purchase)?.license as License)?.activations?.data || []).filter(activation => {\n      return activation?.counted;\n    });\n  }\n\n  renderActivations() {\n    const activations = this.getActivations();\n    if (!activations?.length) return null;\n    return (\n      <sc-flex justifyContent=\"flex-start\" alignItems=\"center\">\n        <sc-tag size=\"small\">{activations?.[0]?.name}</sc-tag>\n        {activations?.length > 1 && (\n          <sc-text\n            style={{ '--font-size': 'var(--sc-font-size-small)', 'cursor': 'pointer' }}\n            onClick={e => {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              this.activationsModal = true;\n            }}\n          >\n            + {activations?.length - 1} More\n          </sc-text>\n        )}\n      </sc-flex>\n    );\n  }\n\n  showWarning() {\n    // no payment method.\n    if (this.subscription?.payment_method || this.subscription.manual_payment) {\n      return false;\n    }\n    // don't show if not looking for payment.\n    if (!['active', 'past_due', 'unpaid', 'incomplete'].includes(this.subscription?.status)) {\n      return false;\n    }\n    // handle ad_hoc.\n    if (this.subscription?.price?.ad_hoc) {\n      return this.subscription?.ad_hoc_amount !== 0;\n    }\n    // show the warning if the subscription is not free.\n    return this.subscription?.price?.amount !== 0;\n  }\n\n  render() {\n    return (\n      <div class=\"subscription-details\">\n        {this.hasPendingUpdate && (\n          <div>\n            <sc-tag size=\"small\" type=\"warning\">\n              {__('Update Scheduled', 'surecart')}\n            </sc-tag>\n          </div>\n        )}\n\n        <sc-flex alignItems=\"center\" justifyContent=\"flex-start\">\n          <sc-text aria-label={sprintf(__('Plan name - %s', 'surecart'), this.renderName())} style={{ '--font-weight': 'var(--sc-font-weight-bold)' }}>\n            {this.renderName()}\n          </sc-text>\n          {this.renderActivations()}\n        </sc-flex>\n\n        {!this.hideRenewalText && <div>{this.renderRenewalText()} </div>}\n\n        <slot />\n\n        <sc-dialog label={__('Activations', 'surecart')} onScRequestClose={() => (this.activationsModal = false)} open={!!this.activationsModal}>\n          <sc-card no-padding style={{ '--overflow': 'hidden' }}>\n            <sc-stacked-list>\n              {(this.getActivations() || []).map(activation => {\n                return (\n                  <sc-stacked-list-row style={{ '--columns': '2' }} mobileSize={0}>\n                    <sc-text style={{ '--line-height': 'var(--sc-line-height-dense)' }}>\n                      <strong>{activation?.name}</strong>\n                      <div>\n                        <sc-text style={{ '--color': 'var(--sc-color-gray-500)' }}>{activation?.fingerprint}</sc-text>\n                      </div>\n                    </sc-text>\n                    <sc-text style={{ '--color': 'var(--sc-color-gray-500)' }}>\n                      <sc-format-date type=\"timestamp\" month=\"short\" day=\"numeric\" year=\"numeric\" date={activation?.created_at}></sc-format-date>\n                    </sc-text>\n                  </sc-stacked-list-row>\n                );\n              })}\n            </sc-stacked-list>\n          </sc-card>\n        </sc-dialog>\n\n        {this.showWarning() && (\n          <div>\n            <sc-tag type=\"warning\">\n              <div class=\"subscription-details__missing-method\">\n                <sc-icon name=\"alert-triangle\"></sc-icon>\n                {__('Payment Method Missing', 'surecart')}\n              </div>\n            </sc-tag>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n",":host {\n  display: inline-block;\n}\n","import { Component, Fragment, h, Prop } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Subscription, SubscriptionStatus } from '../../../types';\n\n@Component({\n  tag: 'sc-subscription-status-badge',\n  styleUrl: 'sc-subscription-status-badge.css',\n  shadow: true,\n})\nexport class ScSubscriptionStatusBadge {\n  /** Subscription status */\n  @Prop() status: SubscriptionStatus;\n\n  /** The tag's status type. */\n  @Prop() subscription: Subscription;\n\n  /** The tag's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Draws a pill-style tag with rounded edges. */\n  @Prop({ reflect: true }) pill: boolean = false;\n\n  /** Makes the tag clearable. */\n  @Prop() clearable: boolean = false;\n\n  getType() {\n    if (this.subscription?.cancel_at_period_end) {\n      return 'info';\n    }\n    switch (this.status || this.subscription?.status) {\n      case 'incomplete':\n        return 'warning';\n      case 'trialing':\n        return 'info';\n      case 'active':\n        return 'success';\n      case 'completed':\n        return 'success';\n      case 'past_due':\n        return 'warning';\n      case 'canceled':\n        if (this.subscription?.restore_at) {\n          return 'info';\n        }\n        return 'danger';\n      case 'unpaid':\n        return 'warning';\n    }\n  }\n\n  getText() {\n    if (this.subscription?.cancel_at_period_end && this.subscription.current_period_end_at && this.subscription?.status !== 'canceled') {\n      return (\n        <Fragment>\n          {!!this.subscription?.restore_at ? __('Pauses', 'surecart') : __('Cancels', 'surecart')}{' '}\n          <sc-format-date type=\"timestamp\" date={this.subscription.current_period_end_at} month=\"short\" day=\"numeric\"></sc-format-date>\n        </Fragment>\n      );\n    }\n    switch (this.status || this.subscription?.status) {\n      case 'incomplete':\n        return __('Incomplete', 'surecart');\n      case 'trialing':\n        return __('Trialing', 'surecart');\n      case 'active':\n        return __('Active', 'surecart');\n      case 'past_due':\n        return __('Past Due', 'surecart');\n      case 'canceled':\n        if (this.subscription?.restore_at) {\n          return 'Paused';\n        }\n        return __('Canceled', 'surecart');\n      case 'completed':\n        return __('Completed', 'surecart');\n      case 'unpaid':\n        return __('Unpaid', 'surecart');\n    }\n  }\n\n  render() {\n    return (\n      <sc-tag aria-label={sprintf(__('Plan Status - %s', 'surecart'), this.getText())} type={this.getType()}>\n        {this.getText()}\n      </sc-tag>\n    );\n  }\n}\n"],"version":3}
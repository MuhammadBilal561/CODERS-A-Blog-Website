{"file":"index-f9d999d6.js","mappings":";;MAiBa,8BAA8B,GAAG,CAC5C,SAAsC;EAMtC,OAAO,CAAC,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,KAAI,EAAE,EAAE,GAAG,CAAC,IAAI;;IACrC,OAAO;MACL,IAAI,CAAC,EAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC;MACtC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;MACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;MACvB,UAAU,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,EAAE;KAC7B,CAAC;GACH,CAAC,CAAC;AACL,EAAE;AAiCF;;;;;AAKO,MAAM,mBAAmB,GAAG,CAAC,UAAuC;EACzE,OAAO,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,KAAI,EAAE,EAAE,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEK,MAAM,kBAAkB,GAAG,CAAC,UAAuC;EACxE,OAAO,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,KAAI,EAAE,EAAE,GAAG,CAAC,IAAI,cAAI,OAAA,CAAA,MAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAa,0CAAE,EAAE,MAAK,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAe,CAAA,CAAA,EAAA,CAAC,CAAC;AAClG,CAAC,CAAC;MAMW,oBAAoB,GAAG,CAAC,UAAuC,EAAE,OAAe;EAC3F,OAAO,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,KAAI,EAAE,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;AAC1E,EAAE;AAWF;;;MAGa,cAAc,GAAG,CAAC,KAA8B,EAAE,KAAe;EAC5E,MAAM,QAAQ,GAAG,mBAAmB,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,CAAC,CAAC;EACxD,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,MAAK,EAAE,CAAC,CAAC;AACjD,EAAE;AAEF;;;MAGa,aAAa,GAAG,CAAC,IAA4B,EAAE,KAAe;EACzE,MAAM,OAAO,GAAG,kBAAkB,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,CAAC,CAAC;EACtD,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,MAAK,EAAE,CAAC,CAAC;AAC/C,EAAE;AAgCF;MACa,eAAe,GAAG,CAAC,KAAe;;;EAE7C,IAAI,EAAC,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,0CAAE,MAAM,CAAA;IAAE,OAAO,KAAK,CAAC;;EAEnD,OAAO,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,CAAC,IAAI,0CAAE,IAAI,CAAC,IAAI,cAAI,OAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,wBAAwB,CAAA,EAAA,CAAC,CAAC;AACrF;;;;;;;;","names":[],"sources":["./src/functions/line-items/index.ts"],"sourcesContent":["import { getQueryArg } from '@wordpress/url';\n\nimport { Bump, Checkout, ChoiceType, LineItemData, lineItems, Price, PriceChoice, Product, RecursivePartial } from '../../types';\n\n// Get only enabled price choices.\nexport const getEnabledPriceChoices = (choices: Array<PriceChoice>): Array<PriceChoice> => {\n  return (choices || []).filter(choice => choice?.enabled !== false);\n};\n\n// convert price choice to line item data.\nexport const convertPriceChoiceToLineItemData = (choice: PriceChoice): LineItemData => {\n  return {\n    price_id: choice.id,\n    quantity: choice.quantity,\n  };\n};\n\nexport const convertLineItemsToLineItemData = (\n  lineItems: RecursivePartial<lineItems>,\n): Array<{\n  price_id: string;\n  quantity: number;\n  variant_id?: string;\n}> => {\n  return (lineItems?.data || []).map(item => {\n    return {\n      ...(!!item?.id ? { id: item.id } : {}),\n      price_id: item.price.id,\n      quantity: item.quantity,\n      variant_id: item.variant?.id,\n    };\n  });\n};\n\nexport const addLineItem = (lineItems: RecursivePartial<lineItems>, data: { price_id: string; quantity: number }) => {\n  const lineItemData = convertLineItemsToLineItemData(lineItems);\n  const index = lineItemData.findIndex(item => item.price_id === data.price_id);\n  lineItemData[index] = data;\n  return lineItemData;\n};\n/**\n * Calculates the initial line items for the session.\n */\nexport const calculateInitialLineItems = (choices: Array<PriceChoice>, choiceType: ChoiceType) => {\n  // check the url query first.\n  const prices = getQueryArg(window.location.href, 'prices') as unknown as Array<PriceChoice>;\n  if (prices) {\n    return prices.map(convertPriceChoiceToLineItemData);\n  }\n\n  // get prices from choices.\n  return getInitialChoiceLineItems(choices, choiceType);\n};\n\n/**\n * Get the initial choice line items.\n */\nexport const getInitialChoiceLineItems = (choices: Array<PriceChoice>, choiceType: ChoiceType) => {\n  if (choiceType === 'all') {\n    return getEnabledPriceChoices(choices).map(convertPriceChoiceToLineItemData);\n  } else {\n    return [getEnabledPriceChoices(choices).map(convertPriceChoiceToLineItemData)?.[0]];\n  }\n};\n\n/**\n * Get price ids from line items\n * @param order\n * @returns\n */\nexport const getLineItemPriceIds = (line_items: RecursivePartial<lineItems>) => {\n  return (line_items?.data || []).map(item => item.price.id);\n};\n\nexport const getLineItemBumpIds = (line_items: RecursivePartial<lineItems>) => {\n  return (line_items?.data || []).map(item => (item?.bump as Bump)?.id || (item?.bump as string));\n};\n\nexport const getLineItemPrices = (line_items: RecursivePartial<lineItems>) => {\n  return (line_items?.data || []).map(item => item.price);\n};\n\nexport const getLineItemByPriceId = (line_items: RecursivePartial<lineItems>, priceId: string) => {\n  return (line_items?.data || []).find(item => item.price.id === priceId);\n};\n\n/**\n * Is this product in the checkout session?\n */\nexport const isProductInOrder = (product: RecursivePartial<Product>, order: Checkout) => {\n  const prices = getLineItemPrices(order?.line_items);\n  if (!prices?.length) return false;\n  return !!prices.find(price => (price?.product as Product)?.id === product.id);\n};\n\n/**\n * Is the price in a checkout session\n */\nexport const isPriceInOrder = (price: RecursivePartial<Price>, order: Checkout) => {\n  const priceIds = getLineItemPriceIds(order?.line_items);\n  return !!priceIds.find(id => price?.id === id);\n};\n\n/**\n * Is the price in a checkout session\n */\nexport const isBumpInOrder = (bump: RecursivePartial<Bump>, order: Checkout) => {\n  const bumpIds = getLineItemBumpIds(order?.line_items);\n  return !!bumpIds.find(id => bump?.id === id);\n};\n\n/**\n * Attempt to get the session id\n *\n * @param formId The form id.\n * @param order The order\n * @param refresh Should we refresh?\n *\n * @returns string\n */\nexport const getSessionId = (formId, order, refresh = false) => {\n  // if we want to get a fresh session, skip\n  if (refresh === true) {\n    return false;\n  }\n\n  // if we already have an ID set, return that:\n  if (order?.id) {\n    return order.id;\n  }\n\n  // check the url query first\n  const urlId = getQueryArg(window.location.href, 'order');\n  if (urlId) {\n    return urlId;\n  }\n\n  // check id in localstorage\n  return window.localStorage.getItem(formId);\n};\n\n/** Check if the order has a subscription */\nexport const hasSubscription = (order: Checkout) => {\n  // no line items.\n  if (!order?.line_items?.data?.length) return false;\n  // has subscription product.\n  return order?.line_items.data?.some(item => item?.price?.recurring_interval_count);\n};\n\nexport const hasTrial = (order: Checkout) => {\n  return order?.trial_amount;\n};\n\n/** Check if the order has a payment plan. */\nexport const hasPaymentPlan = (order: Checkout) => {\n  return hasSubscription(order) && order?.line_items.data?.some(item => item?.price?.recurring_period_count);\n};\n"],"version":3}
{"file":"sc-consumer.entry.cjs.js","mappings":";;;;;;MAKa,UAAU;EAOrB;;;IAMA,eAAU,GAAG,OAAO,OAAY;MAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;MACvB,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB,CAAC;;;;;IARA,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO;MAChC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;KAC/B,CAAC,CAAC;GACJ;EAOD,iBAAiB;IACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;GACzC;EAED,oBAAoB;IAClB,IAAI,CAAC,cAAc,EAAE,CAAC;GACvB;EAED,MAAM;IACJ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACjB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACpC;;;;;","names":[],"sources":["./src/components/context/consumer/sc-consumer.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'sc-consumer',\n})\nexport class ScConsumer {\n  @Prop() renderer: any;\n  @State() context: any;\n  @Event({ eventName: 'mountConsumer' }) mountEmitter: EventEmitter;\n  @State() promise: Promise<any>;\n  @State() resolvePromise: any;\n\n  constructor() {\n    this.promise = new Promise(resolve => {\n      this.resolvePromise = resolve;\n    });\n  }\n\n  setContext = async (context: any) => {\n    this.context = context;\n    return this.promise;\n  };\n\n  componentWillLoad() {\n    this.mountEmitter.emit(this.setContext);\n  }\n\n  disconnectedCallback() {\n    this.resolvePromise();\n  }\n\n  render() {\n    if (!this.context) {\n      return null;\n    }\n    return this.renderer(this.context);\n  }\n}\n"],"version":3}
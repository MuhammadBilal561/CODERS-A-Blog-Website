{"version":3,"file":"sc-form.js","sourceRoot":"","sources":["../../../../src/components/ui/form/sc-form.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Listen, Method, Prop } from '@stencil/core';\n\nimport { serialize } from '../../../functions/form';\n\n@Component({\n  tag: 'sc-form',\n  styleUrl: 'sc-form.scss',\n  shadow: true,\n})\nexport class ScForm {\n  @Element() form: HTMLElement;\n  private formElement: HTMLFormElement;\n\n  /** Prevent the form from validating inputs before submitting. */\n  @Prop({ reflect: true, mutable: true }) novalidate: boolean = false;\n\n  /**\n   * Emitted when the form is submitted. This event will not be emitted if any form control inside of\n   * it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent\n   * this event, since it doen't send a GET or POST request like native forms. To \"prevent\" submission, use a conditional\n   * around the XHR request you use to submit the form's data with.\n   */\n  @Event({ bubbles: true }) scSubmit: EventEmitter<void>;\n\n  /**\n   * Backwards compat.\n   */\n  @Event() scFormSubmit: EventEmitter<void>;\n\n  /**\n   * Emitted when the form is submitted. This event will not be emitted if any form control inside of\n   * it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent\n   * this event, since it doen't send a GET or POST request like native forms. To \"prevent\" submission, use a conditional\n   * around the XHR request you use to submit the form's data with.\n   */\n  @Event() scFormChange: EventEmitter<Object>;\n\n  /** Serializes all form controls elements and returns a `FormData` object. */\n  @Method('getFormData')\n  async getFormData() {\n    return new FormData(this.formElement);\n  }\n\n  @Method('getFormJson')\n  async getFormJson() {\n    return serialize(this.formElement);\n  }\n\n  @Listen('scChange')\n  async handleChange() {\n    this.scFormChange.emit(serialize(this.formElement));\n  }\n\n  @Method('submit')\n  async submit() {\n    return this.submitForm();\n  }\n\n  /** Gets all form control elements (native and custom). */\n  getFormControls() {\n    return [...this.form.querySelectorAll('*')] as HTMLElement[];\n  }\n\n  @Method('validate')\n  async validate() {\n    const formControls = this.getFormControls();\n    const formControlsThatReport = formControls.filter((el: any) => typeof el.reportValidity === 'function') as any;\n\n    if (!this.novalidate) {\n      for (const el of formControlsThatReport) {\n        // element is hidden, don't client-side validate.\n        if (!(el.offsetWidth || el.offsetHeight || el.getClientRects().length)) {\n          continue;\n        }\n\n        const isValid = await el.reportValidity();\n\n        if (!isValid) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  submitForm() {\n    // Calling form.submit() seems to bypass the submit event and constraint validation. Instead, we can inject a\n    // native submit button into the form, click it, then remove it to simulate a standard form submission.\n    const button = document.createElement('button');\n    if (this.formElement) {\n      button.type = 'submit';\n      button.style.position = 'absolute';\n      button.style.width = '0';\n      button.style.height = '0';\n      button.style.clip = 'rect(0 0 0 0)';\n      button.style.clipPath = 'inset(50%)';\n      button.style.overflow = 'hidden';\n      button.style.whiteSpace = 'nowrap';\n      this.formElement.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n\n  render() {\n    return (\n      <div part=\"base\" class=\"form\" role=\"form\">\n        <form\n          part=\"form\"\n          ref={el => (this.formElement = el as HTMLFormElement)}\n          class=\"test\"\n          onSubmit={async e => {\n            e.preventDefault();\n            const isValid = await this.validate();\n            if (!isValid) {\n              return false;\n            }\n            this.scSubmit.emit();\n            this.scFormSubmit.emit();\n          }}\n          novalidate={this.novalidate}\n        >\n          <slot />\n        </form>\n      </div>\n    );\n  }\n}\n"]}
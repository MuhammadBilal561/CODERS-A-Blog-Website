{"version":3,"file":"sc-password.js","sourceRoot":"","sources":["../../../../src/components/ui/sc-password/sc-password.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Method, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\n\nlet showHintTimer, showVerificationTimer;\n\n@Component({\n  tag: 'sc-password',\n  styleUrl: 'sc-password.scss',\n  shadow: true,\n})\nexport class ScPassword {\n  private input: HTMLScInputElement;\n  private confirmInput: HTMLScInputElement;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** The input's password confirmation attribute. */\n  @Prop({ reflect: true }) confirmation = false;\n\n  /** The name for the input. */\n  @Prop() name: string = 'password';\n\n  /** The input's confirmation label text. */\n  @Prop() confirmationLabel: string;\n\n  /** The input's confirmation placeholder text. */\n  @Prop() confirmationPlaceholder: string;\n\n  /** The input's confirmation help text. */\n  @Prop() confirmationHelp: string;\n\n  /** Ensures strong password validation. */\n  @Prop({ reflect: true }) enableValidation = true;\n\n  /** Hint Text. */\n  @State() hintText: string;\n\n  /** Verify Text. */\n  @State() verifyText: string;\n\n  /** Sets focus on the input. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.triggerFocus(options);\n  }\n\n  @Method()\n  async reportValidity() {\n    this.input?.setCustomValidity?.('');\n    this.confirmInput?.setCustomValidity?.('');\n\n    // confirmation is enabled.\n    if (this.confirmation) {\n      if (this.confirmInput?.value && this.input?.value !== this.confirmInput?.value) {\n        this.confirmInput.setCustomValidity(__('Password does not match.', 'surecart'));\n        speak(__('Password does not match.', 'surecart'), 'assertive');\n      }\n    }\n\n    // hint text is not empty.\n    if (!!this.hintText) {\n      this.input.setCustomValidity(__(this.hintText, 'surecart'));\n    }\n\n    const valid = await this.input.reportValidity();\n    if (!valid) {\n      return false;\n    }\n\n    if (this.confirmInput) {\n      return this.confirmInput.reportValidity();\n    }\n\n    return valid;\n  }\n\n  /** Handle password verification. */\n  handleVerification() {\n    clearTimeout(showVerificationTimer);\n    // show hint text after some delay\n    showVerificationTimer = setTimeout(() => {\n      this.verifyPassword();\n    }, 500);\n  }\n\n  /** Handle password validation. */\n  handleValidate() {\n    this.handleVerification();\n    // clear existing timeout\n    clearTimeout(showHintTimer);\n\n    // show hint text after some delay\n    showHintTimer = setTimeout(() => {\n      this.validatePassword();\n    }, 500);\n  }\n\n  /** Validate the password input. */\n  validatePassword() {\n    if (!this.enableValidation) return;\n\n    // nothing entered.\n    if (this.input?.value.trim().length === 0) {\n      this.hintText = '';\n      return;\n    }\n\n    // must be at least 6 characters.\n    if (this.input?.value.trim().length < 6) {\n      return (this.hintText = __('The password must be at least 6 characters in length.', 'surecart'));\n    }\n\n    // must contain a special charater.\n    const regex = /[-'`~!#*$@_%+=.,^&(){}[\\]|;:”<>?\\\\]/;\n    if (!regex.test(this.input?.value)) {\n      return (this.hintText = __('Passwords must contain a special character.', 'surecart'));\n    }\n\n    this.hintText = '';\n  }\n\n  /** Verify the password confirmation. */\n  verifyPassword() {\n    if (this.confirmInput?.value && this.input?.value !== this.confirmInput?.value) {\n      this.verifyText = __('Password does not match.', 'surecart');\n      speak(this.verifyText, 'assertive');\n      return;\n    }\n\n    if (!!this.input?.value && !!this.confirmInput?.value && this.input?.value === this.confirmInput?.value) {\n      speak(__('Password is matched.', 'surecart'), 'assertive');\n    }\n\n    this.verifyText = '';\n  }\n\n  @Watch('hintText')\n  handleHintTextChange() {\n    speak(this.hintText, 'assertive');\n  }\n\n  render() {\n    return (\n      <div class=\"password\">\n        <div>\n          <sc-input\n            ref={el => (this.input = el as HTMLScInputElement)}\n            label={this.label}\n            help={this.help}\n            autofocus={this.autofocus}\n            placeholder={this.placeholder}\n            showLabel={this.showLabel}\n            size={this.size ? this.size : 'medium'}\n            type=\"password\"\n            name=\"password\"\n            value={this.value}\n            required={this.required}\n            disabled={this.disabled}\n            onScInput={() => this.handleValidate()}\n          />\n          {!!this.hintText && <small class=\"password__hint\">{this.hintText}</small>}\n        </div>\n\n        {this.confirmation && (\n          <div>\n            <sc-input\n              ref={el => (this.confirmInput = el as HTMLScInputElement)}\n              label={this.confirmationLabel ?? __('Confirm Password', 'surecart')}\n              help={this.confirmationHelp}\n              placeholder={this.confirmationPlaceholder}\n              size={this.size ? this.size : 'medium'}\n              type=\"password\"\n              value={this.value}\n              onScInput={() => this.handleVerification()}\n              required={this.required}\n              disabled={this.disabled}\n            />\n            {!!this.verifyText && <small class=\"password__hint\">{this.verifyText}</small>}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}
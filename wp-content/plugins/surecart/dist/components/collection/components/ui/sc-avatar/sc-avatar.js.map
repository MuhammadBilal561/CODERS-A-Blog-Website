{"version":3,"file":"sc-avatar.js","sourceRoot":"","sources":["../../../../src/components/ui/sc-avatar/sc-avatar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAOjE,MAAM,OAAO,QAAQ;;oBACS,KAAK;iBAGjB,EAAE;iBAGF,EAAE;oBAGC,EAAE;mBAGe,OAAO;iBAGuB,QAAQ;;EAG1E,iBAAiB;IACf,+CAA+C;IAC/C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;EACxB,CAAC;EAED,MAAM;IACJ,OAAO,CACL,WACE,IAAI,EAAC,MAAM,EACX,KAAK,EAAE;QACL,QAAQ,EAAE,IAAI;QACd,gBAAgB,EAAE,IAAI,CAAC,KAAK,KAAK,QAAQ;QACzC,iBAAiB,EAAE,IAAI,CAAC,KAAK,KAAK,SAAS;QAC3C,gBAAgB,EAAE,IAAI,CAAC,KAAK,KAAK,QAAQ;OAC1C,EACD,IAAI,EAAC,KAAK,gBACE,IAAI,CAAC,KAAK;MAErB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CACf,WAAK,IAAI,EAAC,UAAU,EAAC,KAAK,EAAC,kBAAkB,IAC1C,IAAI,CAAC,QAAQ,CACV,CACP,CAAC,CAAC,CAAC,CACF,WAAK,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,cAAc,iBAAa,MAAM;QACtD,YAAM,IAAI,EAAC,MAAM;UACf,eAAS,IAAI,EAAC,aAAa,EAAC,OAAO,EAAC,QAAQ,GAAW,CAClD,CACH,CACP;MACA,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,WAAK,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,eAAe,EAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,EAAC,EAAE,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAI,CAC7J,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, State, Prop, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'sc-avatar',\n  styleUrl: 'sc-avatar.css',\n  shadow: true,\n})\nexport class ScAvatar {\n  @State() private hasError = false;\n\n  /** The image source to use for the avatar. */\n  @Prop() image = '';\n\n  /** A label to use to describe the avatar to assistive devices. */\n  @Prop() label = '';\n\n  /** Initials to use as a fallback when no image is available (1-2 characters max recommended). */\n  @Prop() initials = '';\n\n  /** Indicates how the browser should load the image. */\n  @Prop() loading: 'eager' | 'lazy' = 'eager';\n\n  /** The shape of the avatar. */\n  @Prop({ reflect: true }) shape: 'circle' | 'square' | 'rounded' = 'circle';\n\n  @Watch('image')\n  handleImageChange() {\n    // Reset the error when a new image is provided\n    this.hasError = false;\n  }\n\n  render() {\n    return (\n      <div\n        part=\"base\"\n        class={{\n          'avatar': true,\n          'avatar--circle': this.shape === 'circle',\n          'avatar--rounded': this.shape === 'rounded',\n          'avatar--square': this.shape === 'square',\n        }}\n        role=\"img\"\n        aria-label={this.label}\n      >\n        {this.initials ? (\n          <div part=\"initials\" class=\"avatar__initials\">\n            {this.initials}\n          </div>\n        ) : (\n          <div part=\"icon\" class=\"avatar__icon\" aria-hidden=\"true\">\n            <slot name=\"icon\">\n              <sl-icon name=\"person-fill\" library=\"system\"></sl-icon>\n            </slot>\n          </div>\n        )}\n        {this.image && !this.hasError && <img part=\"image\" class=\"avatar__image\" src={this.image} loading={this.loading} alt=\"\" onError={() => (this.hasError = true)} />}\n      </div>\n    );\n  }\n}\n"]}
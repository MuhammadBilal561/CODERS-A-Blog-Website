{"version":3,"file":"sc-address.js","sourceRoot":"","sources":["../../../../src/components/ui/address/sc-address.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { hasState, hasCity, hasPostal, countryChoices } from '../../../functions/address';\nimport { reportChildrenValidity } from '../../../functions/form-data';\nimport { Address } from '../../../types';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-address',\n  styleUrl: 'sc-address.scss',\n  shadow: true,\n})\nexport class ScAddress {\n  @Element() el: HTMLScAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    name: 'shipping_name',\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  @Prop() placeholders: Partial<Address> = {};\n\n  /** Is this loading?  */\n  @Prop() loading: boolean = false;\n\n  /** Is this disabled? */\n  @Prop() disabled: boolean;\n\n  /** The label for the field. */\n  @Prop() label: string;\n\n  /** Should we show name field? */\n  @Prop({ reflect: true, mutable: true }) showName: boolean;\n\n  /** Should we show name field? */\n  @Prop() showLine2: boolean;\n\n  /** Is this required? */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Is the name required */\n  @Prop({ reflect: true }) requireName: boolean = false;\n\n  /** Should we show the city field? */\n  @State() showCity: boolean = true;\n\n  /** Should we show the postal field? */\n  @State() showPostal: boolean = true;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address change event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address.country) return;\n    this.setRegions();\n    this.showPostal = hasPostal(this.address.country);\n    this.showCity = hasCity(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  @Watch('requireName')\n  handleNameChange() {\n    if (this.requireName) {\n      this.showName = true;\n    }\n  }\n\n  decodeHtmlEntities(html: string) {\n    return new DOMParser().parseFromString(html, 'text/html')?.body.textContent || html;\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      name: this.address?.name,\n      country: null,\n      city: null,\n      line_1: null,\n      line_2: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    if (hasState(this.address.country)) {\n      import('./countries.json').then(module => {\n        const countryRegions = module?.[this.address.country] as Array<{ value: string; label: string }>;\n\n        this.regions = (countryRegions || []).map(region => ({\n          ...region,\n          label: this.decodeHtmlEntities(region.label),\n        }));\n      });\n    } else {\n      this.regions = [];\n    }\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address.country)?.value || null;\n    this.updateAddress({ country });\n    this.handleNameChange();\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  render() {\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control label={this.label} exportparts=\"label, help-text, form-control\" class=\"sc-address__control\" required={this.required}>\n          {this.showName && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.name}\n              onScChange={(e: any) => this.updateAddress({ name: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.name || __('Name or Company Name', 'surecart')}\n              name={this.names?.name}\n              squared-bottom\n              disabled={this.disabled}\n              required={this.requireName}\n              aria-label={this.placeholders.name || __('Name or Company Name', 'surecart')}\n            />\n          )}\n\n          <sc-select\n            exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n            part=\"name__input\"\n            value={this.address?.country}\n            onScChange={(e: any) => {\n              this.clearAddress();\n              this.updateAddress({ country: e.target.value });\n            }}\n            choices={this.countryChoices}\n            autocomplete={'country-name'}\n            placeholder={this.placeholders.country || __('Country', 'surecart')}\n            name={this.names?.country}\n            search\n            unselect={false}\n            squared-bottom\n            squared={this.showName}\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.country || __('Country', 'surecart')}\n          />\n\n          <sc-input\n            exportparts=\"base:input__base, input, form-control, label, help-text\"\n            value={this?.address?.line_1}\n            onScChange={(e: any) => this.updateAddress({ line_1: e.target.value || null })}\n            onScInput={(e: any) => this.handleAddressInput({ line_1: e.target.value || null })}\n            autocomplete=\"street-address\"\n            placeholder={this.placeholders.line_1 || __('Address', 'surecart')}\n            name={this.names?.line_1}\n            squared\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.line_1 || __('Address', 'surecart')}\n          />\n\n          {this.showLine2 && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.line_2}\n              onScChange={(e: any) => this.updateAddress({ line_2: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ line_2: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n              name={this.names?.line_2}\n              squared\n              disabled={this.disabled}\n              aria-label={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n            />\n          )}\n\n          <div class=\"sc-address__columns\" part=\"columns\">\n            {this.showCity && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.city || __('City', 'surecart')}\n                name={this.names?.city}\n                value={this?.address?.city}\n                onScChange={(e: any) => this.updateAddress({ city: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ city: e.target.value || null })}\n                required={this.required}\n                squared={!!this?.regions?.length}\n                // style={{ marginRight: this.showPostal ? '-1px' : '0' }}\n                squared-top\n                disabled={this.disabled}\n                squared-right={this.showPostal}\n                aria-label={this.placeholders.city || __('City', 'surecart')}\n              />\n            )}\n\n            {this.showPostal && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n                name={this.names?.postal_code}\n                onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ postal_code: e.target.value || null })}\n                autocomplete={'postal-code'}\n                required={this.required}\n                value={this?.address?.postal_code}\n                squared={!!this?.regions?.length}\n                squared-top\n                disabled={this.disabled}\n                maxlength={this.address?.country === 'US' ? 5 : null}\n                squared-left={this.showCity}\n                aria-label={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n              />\n            )}\n          </div>\n\n          {!!this?.regions?.length && !!this?.address?.country && (\n            <sc-select\n              exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n              placeholder={this.placeholders.state || __('State/Province/Region', 'surecart')}\n              name={this.names?.state}\n              autocomplete={'address-level1'}\n              value={this?.address?.state}\n              onScChange={(e: any) => this.updateAddress({ state: e.target.value || e.detail?.value || null })}\n              choices={this.regions}\n              required={this.required}\n              disabled={this.disabled}\n              search\n              squared-top\n              aria-label={this.placeholders.state || __('State/Province/Region', 'surecart')}\n            />\n          )}\n        </sc-form-control>\n\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n"]}
{"version":3,"file":"sc-tax-id-input.js","sourceRoot":"","sources":["../../../../src/components/ui/tax-id-input/sc-tax-id-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Prop, Fragment, Watch, Event, EventEmitter, Method } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\nimport { zones } from '../../../functions/tax';\n\n@Component({\n  tag: 'sc-tax-id-input',\n  styleUrl: 'sc-tax-id-input.css',\n  shadow: true,\n})\nexport class ScTaxIdInput {\n  /** The input */\n  private input: HTMLScInputElement;\n\n  /** The country code. */\n  @Prop() country: string;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Type of tax id */\n  @Prop({ mutable: true }) type: string = 'other';\n\n  /** Tax ID Number */\n  @Prop() number: string = null;\n\n  /** The status */\n  @Prop() status: 'valid' | 'invalid' | 'unknown' = 'unknown';\n\n  /** Is this loading? */\n  @Prop() loading: boolean;\n\n  /** Help text. */\n  @Prop() help: string;\n\n  /** Other zones label */\n  @Prop() otherLabel: string = __('Tax ID', 'surecart');\n\n  /** GST zone label */\n  @Prop() caGstLabel: string = __('GST Number', 'surecart');\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string = __('ABN Number', 'surecart');\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string = __('UK VAT', 'surecart');\n\n  /** EU zone label */\n  @Prop() euVatLabel: string = __('EU VAT', 'surecart');\n\n  /** Tax ID Types which will be shown */\n  @Prop() taxIdTypes: string[] = [];\n\n  /** Whether tax input is required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Make a request to update the order. */\n  @Event() scChange: EventEmitter<{ number: string; number_type: string }>;\n\n  /** Make a request to update the order. */\n  @Event() scInput: EventEmitter<Partial<{ number: string; number_type: string }>>;\n\n  /** Change the Type */\n  @Event() scInputType: EventEmitter<string>;\n\n  /** Set the checkout state. */\n  @Event() scSetState: EventEmitter<string>;\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  @Watch('otherLabel')\n  @Watch('caGstLabel')\n  @Watch('auAbnLabel')\n  @Watch('gbVatLabel')\n  @Watch('euVatLabel')\n  onLabelChange() {\n    zones.ca_gst.label = this.caGstLabel || zones.ca_gst.label;\n    zones.au_abn.label = this.auAbnLabel || zones.au_abn.label;\n    zones.gb_vat.label = this.gbVatLabel || zones.gb_vat.label;\n    zones.eu_vat.label = this.euVatLabel || zones.eu_vat.label;\n    zones.other.label = this.otherLabel || zones.other.label;\n  }\n\n  componentWillLoad() {\n    this.onLabelChange();\n  }\n\n  renderStatus() {\n    if (this.status === 'valid') {\n      return <sc-icon name=\"check\" slot=\"prefix\" style={{ color: 'var(--sc-color-success-500)' }}></sc-icon>;\n    }\n    if (this.status === 'invalid') {\n      return <sc-icon name=\"x\" slot=\"prefix\" style={{ color: 'var(--sc-color-danger-500)' }}></sc-icon>;\n    }\n  }\n\n  filteredZones() {\n    if (!!this.taxIdTypes.length) {\n      return Object.keys(zones)\n        .filter(name => this.taxIdTypes.includes(name))\n        .reduce((obj, key) => {\n          obj[key] = zones[key];\n          return obj;\n        }, {});\n    }\n\n    return zones;\n  }\n\n  @Watch('taxIdTypes')\n  onTaxIdTypesChange() {\n    // If there is no other type, set the first one as default type.\n    if (!!this.taxIdTypes.length) {\n      this.type = !this.taxIdTypes.includes('other') ? this.taxIdTypes[0] : 'other';\n    }\n  }\n\n  getZoneLabel() {\n    const filteredZones = this.filteredZones() || {};\n\n    // Get the label of the current type or the other type.\n    // If there is no other type, get the first one.\n    return filteredZones?.[this?.type || 'other']?.label || filteredZones?.[Object.keys(filteredZones)[0]]?.label;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <sc-input name=\"tax_identifier.number_type\" required={this.required} value={this.type} style={{ display: 'none' }} />\n        <sc-input\n          ref={el => (this.input = el as HTMLScInputElement)}\n          label={this.getZoneLabel()}\n          aria-label={__('Tax ID', 'surecart')}\n          placeholder={__('Enter Tax ID', 'surecart')}\n          name=\"tax_identifier.number\"\n          value={this.number}\n          onScInput={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scInput.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          onScChange={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scChange.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          help={this.help}\n          required={this.required}\n        >\n          {this.loading && this.type === 'eu_vat' ? <sc-spinner slot=\"prefix\" style={{ '--spinner-size': '10px' }}></sc-spinner> : this.renderStatus()}\n\n          {Object.keys(this.filteredZones() || {})?.length === 1 ? (\n            <span slot=\"suffix\">{Object.values(this.filteredZones() || {})?.[0]?.['label_small']}</span>\n          ) : (\n            <sc-dropdown slot=\"suffix\" position=\"bottom-right\" role=\"select\" aria-multiselectable=\"false\" aria-label={__('Select number type', 'surecart')}>\n              <sc-button type=\"text\" slot=\"trigger\" caret loading={false} style={{ color: 'var(--sc-input-label-color)' }} tabindex=\"0\">\n                {this.filteredZones()?.[this?.type || 'other']?.label_small}\n              </sc-button>\n              <sc-menu>\n                {Object.keys(this.filteredZones() || {}).map(name => (\n                  <sc-menu-item\n                    role=\"option\"\n                    onClick={() => {\n                      this.scInput.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.scChange.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.type = name;\n                    }}\n                    onKeyDown={e => {\n                      if (e.key === 'Enter') {\n                        this.scInput.emit({\n                          number: this.number,\n                          number_type: name,\n                        });\n                        this.scChange.emit({\n                          number: this.number,\n                          number_type: name,\n                        });\n                        this.type = name;\n                        this.input?.triggerFocus();\n                        speak(sprintf(__('%s selected', 'surecart'), zones[name].label_small, 'assertive'));\n                      }\n                    }}\n                    checked={this.type === name}\n                    aria-selected={this.type === name ? 'true' : 'false'}\n                    aria-label={zones[name].label_small}\n                  >\n                    {zones[name].label_small}\n                  </sc-menu-item>\n                ))}\n              </sc-menu>\n            </sc-dropdown>\n          )}\n        </sc-input>\n      </Fragment>\n    );\n  }\n}\n"]}
{"version":3,"file":"sc-stripe-payment-element.js","sourceRoot":"","sources":["../../../../src/components/ui/stripe-payment-element/sc-stripe-payment-element.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Method, State, Watch } from '@stencil/core';\nimport { loadStripe } from '@stripe/stripe-js/pure';\nimport { __ } from '@wordpress/i18n';\nimport { addQueryArgs } from '@wordpress/url';\nimport { state as selectedProcessor } from '@store/selected-processor';\n\nimport { CustomStripeElementChangeEvent, FormStateSetter, PaymentInfoAddedParams, ShippingAddress } from '../../../types';\nimport { state as checkoutState, onChange } from '@store/checkout';\nimport { onChange as onChangeFormState } from '@store/form';\nimport { state as processorsState } from '@store/processors';\nimport { currentFormState } from '@store/form/getters';\nimport { createErrorNotice } from '@store/notices/mutations';\nimport { updateFormState } from '@store/form/mutations';\nimport { getCompleteAddress } from '@store/checkout/getters';\nimport { getProcessorByType } from '@store/processors/getters';\n\n@Component({\n  tag: 'sc-stripe-payment-element',\n  styleUrl: 'sc-stripe-payment-element.scss',\n  shadow: false,\n})\nexport class ScStripePaymentElement {\n  /** This element */\n  @Element() el: HTMLScStripePaymentElementElement;\n\n  /** Holds the element container. */\n  private container: HTMLDivElement;\n\n  /** holds the stripe element. */\n  private element: any;\n\n  private unlistenToFormState: () => void;\n  private unlistenToCheckout: () => void;\n\n  /** The error. */\n  @State() error: string;\n\n  /** Are we confirming the order? */\n  @State() confirming: boolean = false;\n\n  /** Are we loaded? */\n  @State() loaded: boolean = false;\n\n  /** The order/invoice was paid for. */\n  @Event() scPaid: EventEmitter<void>;\n\n  /** Set the state */\n  @Event() scSetState: EventEmitter<FormStateSetter>;\n\n  /** Payment information was added */\n  @Event() scPaymentInfoAdded: EventEmitter<PaymentInfoAddedParams>;\n\n  @State() styles: CSSStyleDeclaration;\n\n  async componentWillLoad() {\n    this.fetchStyles();\n  }\n\n  @Watch('styles')\n  async handleStylesChange() {\n    this.createOrUpdateElements();\n  }\n\n  async fetchStyles() {\n    this.styles = (await this.getComputedStyles()) as CSSStyleDeclaration;\n  }\n\n  /**\n   * We wait for our property value to resolve (styles have been loaded)\n   * This prevents the element appearance api being set before the styles are loaded.\n   */\n  getComputedStyles() {\n    return new Promise(resolve => {\n      let checkInterval = setInterval(() => {\n        const styles = window.getComputedStyle(document.body);\n        const color = styles.getPropertyValue('--sc-color-primary-500');\n        if (color) {\n          clearInterval(checkInterval);\n          resolve(styles);\n        }\n      }, 100);\n    });\n  }\n\n  /** Maybe load the stripe element on load. */\n  async componentDidLoad() {\n    const { processor_data } = getProcessorByType('stripe') || {};\n\n    try {\n      processorsState.instances.stripe = await loadStripe(processor_data?.publishable_key, { stripeAccount: processor_data?.account_id });\n    } catch (e) {\n      this.error = e?.message || __('Stripe could not be loaded', 'surecart');\n      // don't continue.\n      return;\n    }\n\n    // create or update elements.\n    this.createOrUpdateElements();\n    this.handleUpdateElement();\n    this.unlistenToCheckout = onChange('checkout', () => {\n      this.fetchStyles();\n      this.createOrUpdateElements();\n      this.handleUpdateElement();\n    });\n\n    // we need to listen to the form state and pay when the form state enters the paying state.\n    this.unlistenToFormState = onChangeFormState('formState', () => {\n      if (!checkoutState?.checkout?.payment_method_required) return;\n      if ('paying' === currentFormState()) {\n        this.maybeConfirmOrder();\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    this.unlistenToFormState();\n    this.unlistenToCheckout();\n  }\n\n  getElementsConfig() {\n    const styles = getComputedStyle(this.el);\n    return {\n      mode: checkoutState.checkout?.remaining_amount_due > 0 ? 'payment' : 'setup',\n      amount: checkoutState.checkout?.remaining_amount_due,\n      currency: checkoutState.checkout?.currency,\n      setupFutureUsage: checkoutState.checkout?.reusable_payment_method_required ? 'off_session' : null,\n      appearance: {\n        variables: {\n          colorPrimary: styles.getPropertyValue('--sc-color-primary-500') || 'black',\n          colorText: styles.getPropertyValue('--sc-input-label-color') || 'black',\n          borderRadius: styles.getPropertyValue('--sc-input-border-radius-medium') || '4px',\n          colorBackground: styles.getPropertyValue('--sc-input-background-color') || 'white',\n          fontSizeBase: styles.getPropertyValue('--sc-input-font-size-medium') || '16px',\n          colorLogo: styles.getPropertyValue('--sc-stripe-color-logo') || 'light',\n          colorLogoTab: styles.getPropertyValue('--sc-stripe-color-logo-tab') || 'light',\n          colorLogoTabSelected: styles.getPropertyValue('--sc-stripe-color-logo-tab-selected') || 'light',\n          colorTextPlaceholder: styles.getPropertyValue('--sc-input-placeholder-color') || 'black',\n        },\n        rules: {\n          '.Input': {\n            border: styles.getPropertyValue('--sc-input-border'),\n          },\n        },\n      },\n    };\n  }\n\n  /** Update the payment element mode, amount and currency when it changes. */\n  createOrUpdateElements() {\n    // need an order amount, etc.\n    if (!checkoutState?.checkout?.payment_method_required) return;\n    if (!processorsState.instances.stripe) return;\n    if (checkoutState.checkout?.status && ['paid', 'processing'].includes(checkoutState.checkout?.status)) return;\n\n    // create the elements if they have not yet been created.\n    if (!processorsState.instances.stripeElements) {\n      // we have what we need, load elements.\n      processorsState.instances.stripeElements = processorsState.instances.stripe.elements(this.getElementsConfig() as any);\n      const address = getCompleteAddress('shipping');\n\n      // create the payment element.\n      (processorsState.instances.stripeElements as any)\n        .create('payment', {\n          defaultValues: {\n            billingDetails: {\n              name: checkoutState.checkout?.name,\n              email: checkoutState.checkout?.email,\n              ...(!!address ? { address } : {}),\n            },\n          },\n          fields: {\n            billingDetails: {\n              email: 'never',\n            },\n          },\n        })\n        .mount(this.container);\n\n      this.element = processorsState.instances.stripeElements.getElement('payment');\n      this.element.on('ready', () => (this.loaded = true));\n      this.element.on('change', (event: CustomStripeElementChangeEvent) => {\n        const requiredShippingPaymentTypes = ['cashapp', 'klarna', 'clearpay'];\n        checkoutState.paymentMethodRequiresShipping = requiredShippingPaymentTypes.includes(event?.value?.type);\n\n        if (event.complete) {\n          this.scPaymentInfoAdded.emit({\n            checkout_id: checkoutState.checkout?.id,\n            currency: checkoutState.checkout?.currency,\n            processor_type: 'stripe',\n            total_amount: checkoutState.checkout?.total_amount,\n            line_items: checkoutState.checkout?.line_items,\n            payment_method: {\n              billing_details: {\n                email: checkoutState.checkout?.email,\n                name: checkoutState.checkout?.name,\n              },\n            },\n          });\n        }\n      });\n      return;\n    }\n    processorsState.instances.stripeElements.update(this.getElementsConfig());\n  }\n\n  /** Update the default attributes of the element when they cahnge. */\n  handleUpdateElement() {\n    if (!this.element) return;\n    if (checkoutState.checkout?.status !== 'draft') return;\n\n    const { name, email } = checkoutState.checkout;\n    const { line_1: line1, line_2: line2, city, state, country, postal_code } = (checkoutState.checkout?.shipping_address as ShippingAddress) || {};\n\n    this.element.update({\n      defaultValues: {\n        billingDetails: {\n          name,\n          email,\n          address: {\n            line1,\n            line2,\n            city,\n            state,\n            country,\n            postal_code,\n          },\n        },\n      },\n      fields: {\n        billingDetails: {\n          email: 'never',\n        },\n      },\n    });\n  }\n\n  async submit() {\n    // this processor is not selected.\n    if (selectedProcessor?.id !== 'stripe') return;\n    // submit the elements.\n    const { error } = await (processorsState.instances.stripeElements as any).submit();\n    if (error) {\n      console.error({ error });\n      updateFormState('REJECT');\n      createErrorNotice(error);\n      this.error = error.message;\n      return;\n    }\n  }\n\n  /**\n   * Watch order status and maybe confirm the order.\n   */\n  async maybeConfirmOrder() {\n    // this processor is not selected.\n    if (selectedProcessor?.id !== 'stripe') return;\n    // must be a stripe session\n    if (checkoutState.checkout?.payment_intent?.processor_type !== 'stripe') return;\n    // need an external_type\n    if (!checkoutState.checkout?.payment_intent?.processor_data?.stripe?.type) return;\n    // we need a client secret.\n    if (!checkoutState.checkout?.payment_intent?.processor_data?.stripe?.client_secret) return;\n    // confirm the intent.\n    return await this.confirm(checkoutState.checkout?.payment_intent?.processor_data?.stripe?.type);\n  }\n\n  @Method()\n  async confirm(type, args = {}) {\n    const confirmArgs = {\n      elements: processorsState.instances.stripeElements,\n      clientSecret: checkoutState.checkout?.payment_intent?.processor_data?.stripe?.client_secret,\n      confirmParams: {\n        return_url: addQueryArgs(window.location.href, {\n          ...(checkoutState.checkout.id ? { checkout_id: checkoutState.checkout.id } : {}),\n        }),\n        payment_method_data: {\n          billing_details: {\n            email: checkoutState.checkout.email,\n          },\n        },\n      },\n      redirect: 'if_required',\n      ...args,\n    };\n\n    // prevent possible double-charges\n    if (this.confirming) return;\n\n    // stripe must be loaded.\n    if (!processorsState.instances.stripe) return;\n\n    try {\n      this.scSetState.emit('PAYING');\n      const response =\n        type === 'setup' ? await processorsState.instances.stripe.confirmSetup(confirmArgs as any) : await processorsState.instances.stripe.confirmPayment(confirmArgs as any);\n      if (response?.error) {\n        this.error = response.error.message;\n        throw response.error;\n      } else {\n        this.scSetState.emit('PAID');\n        // paid\n        this.scPaid.emit();\n      }\n    } catch (e) {\n      console.error(e);\n      updateFormState('REJECT');\n      createErrorNotice(e);\n      if (e.message) {\n        this.error = e.message;\n      }\n    } finally {\n      this.confirming = false;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"sc-stripe-payment-element\" data-testid=\"stripe-payment-element\">\n        {!!this.error && (\n          <sc-text\n            style={{\n              'color': 'var(--sc-color-danger-500)',\n              '--font-size': 'var(--sc-font-size-small)',\n              'marginBottom': '0.5em',\n            }}\n          >\n            {this.error}\n          </sc-text>\n        )}\n\n        <div class=\"loader\" hidden={this.loaded}>\n          <div class=\"loader__row\">\n            <div style={{ width: '50%' }}>\n              <sc-skeleton style={{ width: '50%', marginBottom: '0.5em' }}></sc-skeleton>\n              <sc-skeleton></sc-skeleton>\n            </div>\n            <div style={{ flex: '1' }}>\n              <sc-skeleton style={{ width: '50%', marginBottom: '0.5em' }}></sc-skeleton>\n              <sc-skeleton></sc-skeleton>\n            </div>\n            <div style={{ flex: '1' }}>\n              <sc-skeleton style={{ width: '50%', marginBottom: '0.5em' }}></sc-skeleton>\n              <sc-skeleton></sc-skeleton>\n            </div>\n          </div>\n          <div class=\"loader__details\">\n            <sc-skeleton style={{ height: '1rem' }}></sc-skeleton>\n            <sc-skeleton style={{ height: '1rem', width: '30%' }}></sc-skeleton>\n          </div>\n        </div>\n\n        <div hidden={!this.loaded} class=\"sc-payment-element-container\" ref={el => (this.container = el as HTMLDivElement)}></div>\n      </div>\n    );\n  }\n}\n"]}
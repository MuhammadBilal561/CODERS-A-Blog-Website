{"version":3,"file":"sc-textarea.js","sourceRoot":"","sources":["../../../../src/components/ui/sc-textarea/sc-textarea.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAgB,MAAM,EAAE,MAAM,eAAe,CAAC;AACvG,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,iBAAiB,CAAC;AAC9C,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAChC,IAAI,EAAE,GAAG,CAAC,CAAC;AAEX;;;;;;GAMG;AAMH,MAAM,OAAO,UAAU;;IACb,YAAO,GAAW,YAAY,EAAE,EAAE,EAAE,CAAC;IACrC,WAAM,GAAG,sBAAsB,EAAE,EAAE,CAAC;IACpC,YAAO,GAAG,kBAAkB,EAAE,EAAE,CAAC;oBASb,KAAK;yBACA,KAAK;gBAGwB,QAAQ;;iBAMtD,EAAE;kBAGyB,KAAK;iBAGhC,EAAE;qBAGW,IAAI;gBAGlB,EAAE;;gBAMM,CAAC;kBAGuB,UAAU;oBAGZ,KAAK;oBAGL,KAAK;;;oBASL,KAAK;mBAMN,KAAK;;;;;;;;;EAgCjD,gBAAgB;IACd,IAAI,CAAC,iBAAiB,EAAE,CAAC;EAC3B,CAAC;EAGD,iBAAiB;IACf,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,oBAAoB,CAAC;EAClF,CAAC;EAGD,oBAAoB;IAClB,iGAAiG;IACjG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IACpC,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;EAC7C,CAAC;EAED,+BAA+B;EAE/B,KAAK,CAAC,YAAY,CAAC,OAAsB;IACvC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EACnC,CAAC;EAED,kCAAkC;EAClC,KAAK,CAAC,OAAsB;IAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EAC5B,CAAC;EAED,uCAAuC;EACvC,IAAI;IACF,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;EACpB,CAAC;EAED,4CAA4C;EAC5C,MAAM;IACJ,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;EACtB,CAAC;EAED,mDAAmD;EACnD,cAAc,CAAC,QAA0C;IACvD,IAAI,QAAQ,EAAE;MACZ,IAAI,OAAO,QAAQ,CAAC,GAAG,KAAK,QAAQ;QAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC;MAC1E,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ;QAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;MAC7E,OAAO;KACR;IAED,6CAA6C;IAC7C,OAAO;MACL,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;MACzB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;KAC3B,CAAC;EACJ,CAAC;EAED,wEAAwE;EACxE,iBAAiB,CAAC,cAAsB,EAAE,YAAoB,EAAE,qBAAsD,MAAM;IAC1H,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAc,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAC;EACjF,CAAC;EAED,kDAAkD;EAClD,YAAY,CAAC,WAAmB,EAAE,KAAa,EAAE,GAAW,EAAE,aAAsD,UAAU;IAC5H,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;IAE7D,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;MACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;KACrB;IAED,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;MACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;MACzB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;MACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;KACtB;EACH,CAAC;EAED,gGAAgG;EAEhG,KAAK,CAAC,cAAc;IAClB,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;EACrC,CAAC;EAED,yGAAyG;EACzG,iBAAiB,CAAC,OAAe;IAC/B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACtC,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;EAC7C,CAAC;EAED,UAAU;IACR,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;EACrB,CAAC;EAED,YAAY;IACV,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;EACvB,CAAC;EAED,WAAW;IACT,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EACtB,CAAC;EAED,WAAW;IACT,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACzB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EACtB,CAAC;EAED,iBAAiB;IACf,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,cAAc,CAAA,EAAE;MAC3B,OAAO;KACR;IACD,IAAI,CAAC,cAAc,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;EAClF,CAAC;EAED,gBAAgB;IACd,IAAI,CAAC,cAAc,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IACtE,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,cAAc,CAAA,EAAE;MAC3B,OAAO;KACR;IACD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC1C,CAAC;EAED,oBAAoB;;IAClB,MAAA,IAAI,CAAC,cAAc,0CAAE,cAAc,EAAE,CAAC;IACtC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC5C,CAAC;EAED,iBAAiB;IACf,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;MAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;MACjC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC;KAC1D;SAAM;MACJ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAA6B,GAAG,SAAS,CAAC;KAC7D;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,WACE,IAAI,EAAC,cAAc,EACnB,KAAK,EAAE;QACL,cAAc,EAAE,IAAI;QACpB,qBAAqB,EAAE,IAAI,CAAC,IAAI,KAAK,OAAO;QAC5C,sBAAsB,EAAE,IAAI,CAAC,IAAI,KAAK,QAAQ;QAC9C,qBAAqB,EAAE,IAAI,CAAC,IAAI,KAAK,OAAO;OAC7C;MAED,uBACE,WAAW,EAAC,gCAAgC,EAC5C,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAE,IAAI,CAAC,IAAI;QAEf,WAAK,IAAI,EAAC,oBAAoB,EAAC,KAAK,EAAC,oBAAoB;UACvD,WACE,IAAI,EAAC,MAAM,EACX,KAAK,EAAE;cACL,UAAU,EAAE,IAAI;cAChB,iBAAiB,EAAE,IAAI,CAAC,IAAI,KAAK,OAAO;cACxC,kBAAkB,EAAE,IAAI,CAAC,IAAI,KAAK,QAAQ;cAC1C,iBAAiB,EAAE,IAAI,CAAC,IAAI,KAAK,OAAO;cACxC,oBAAoB,EAAE,CAAC,IAAI,CAAC,MAAM;cAClC,kBAAkB,EAAE,IAAI,CAAC,MAAM;cAC/B,oBAAoB,EAAE,IAAI,CAAC,QAAQ;cACnC,mBAAmB,EAAE,IAAI,CAAC,QAAQ;cAClC,iBAAiB,EAAE,CAAC,IAAI,CAAC,KAAK;cAC9B,mBAAmB,EAAE,IAAI,CAAC,OAAO;cACjC,uBAAuB,EAAE,IAAI,CAAC,MAAM,KAAK,MAAM;cAC/C,2BAA2B,EAAE,IAAI,CAAC,MAAM,KAAK,UAAU;cACvD,uBAAuB,EAAE,IAAI,CAAC,MAAM,KAAK,MAAM;aAChD;YAED,gBACE,IAAI,EAAC,UAAU,EACf,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAyB,CAAC,EACnD,EAAE,EAAC,OAAO,EACV,KAAK,EAAC,mBAAmB,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,SAAS,EAAE,IAAI,CAAC,SAAS,sBACR,WAAW,EAC5B,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,EACnC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,EACjC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,EACjC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,EAC/B,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE,GAC3B,CACR;UACL,IAAI,CAAC,aAAa,IAAI,CACrB,WAAK,IAAI,EAAC,MAAM,EAAC,KAAK,EAAE,8BAA8B,IACnD,OAAO,CAAC,EAAE,CAAC,yBAAyB,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CACzF,CACP,CACG,CACU,CACdsourcesContent":["import { Component, h, State, Prop, Element, Watch, Event, EventEmitter, Method } from '@stencil/core';\nimport { sprintf, __ } from '@wordpress/i18n';\nimport { FormSubmitController } from '../../../functions/form-data';\n\nconst CHAR_LIMIT_THRESHOLD = 20;\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n */\n@Component({\n  tag: 'sc-textarea',\n  styleUrl: 'sc-textarea.css',\n  shadow: true,\n})\nexport class ScTextarea {\n  private inputId: string = `textarea-${++id}`;\n  private helpId = `textarea-help-text-${id}`;\n  private labelId = `textarea-label-${id}`;\n\n  @Element() el: HTMLScTextareaElement;\n\n  private formController: any;\n\n  private input: HTMLTextAreaElement;\n  private resizeObserver: ResizeObserver;\n\n  @State() private hasFocus = false;\n  @State() private showCharLimit = false;\n\n  /** The textarea's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The textarea's name attribute. */\n  @Prop() name: string;\n\n  /** The textarea's value attribute. */\n  @Prop() value = '';\n\n  /** Draws a filled textarea. */\n  @Prop({ reflect: true }) filled: boolean = false;\n\n  /** The textarea's label. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The textarea's help text. Alternatively, you can use the help-text slot. */\n  @Prop() help = '';\n\n  /** The textarea's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** The number of rows to display by default. */\n  @Prop() rows: number = 4;\n\n  /** Controls how the textarea can be resized. */\n  @Prop() resize: 'none' | 'vertical' | 'auto' = 'vertical';\n\n  /** Disables the textarea. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the textarea readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** The minimum length of input that will be considered valid. */\n  @Prop() minlength: number;\n\n  /** The maximum length of input that will be considered valid. */\n  @Prop() maxlength: number;\n\n  /** Makes the textarea a required field. */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, and `maxlength` using the browser's constraint validation API.\n   */\n  @Prop({ reflect: true }) invalid: boolean = false;\n\n  /** The textarea's autocapitalize attribute. */\n  @Prop() autocapitalize: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\n\n  /** The textarea's autocorrect attribute. */\n  @Prop() autocorrect: string;\n\n  /** The textarea's autocomplete attribute. */\n  @Prop() autocomplete: string;\n\n  /** The textarea's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /**\n   * The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\n   * keyboards.\n   */\n  @Prop() enterkeyhint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n\n  /** Enables spell checking on the textarea. */\n  @Prop() spellcheck: boolean;\n\n  /** The textarea's inputmode attribute. */\n  @Prop() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  @Event() scChange: EventEmitter<void>;\n  @Event() scInput: EventEmitter<void>;\n  @Event() scBlur: EventEmitter<void>;\n  @Event() scFocus: EventEmitter<void>;\n\n  @Watch('rows')\n  handleRowsChange() {\n    this.setTextareaHeight();\n  }\n\n  @Watch('value')\n  handleValueChange() {\n    this.invalid = !this.input.checkValidity();\n    this.showCharLimit = this.maxlength - this.value.length <= CHAR_LIMIT_THRESHOLD;\n  }\n\n  @Watch('disabled')\n  handleDisabledChange() {\n    // Disabled form controls are always valid, so we need to recheck validity when the state changes\n    this.input.disabled = this.disabled;\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Sets focus on the input. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.focus(options);\n  }\n\n  /** Sets focus on the textarea. */\n  focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the textarea. */\n  blur() {\n    this.input.blur();\n  }\n\n  /** Selects all the text in the textarea. */\n  select() {\n    this.input.select();\n  }\n\n  /** Gets or sets the textarea's scroll position. */\n  scrollPosition(position?: { top?: number; left?: number }): { top: number; left: number } | undefined {\n    if (position) {\n      if (typeof position.top === 'number') this.input.scrollTop = position.top;\n      if (typeof position.left === 'number') this.input.scrollLeft = position.left;\n      return;\n    }\n\n    // eslint-disable-next-line consistent-return\n    return {\n      top: this.input.scrollTop,\n      left: this.input.scrollTop,\n    };\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection: 'forward' | 'backward' | 'none' = 'none') {\n    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  setRangeText(replacement: string, start: number, end: number, selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve') {\n    this.input.setRangeText(replacement, start, end, selectMode);\n\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.scInput.emit();\n    }\n\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.setTextareaHeight();\n      this.scInput.emit();\n      this.scChange.emit();\n    }\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleChange() {\n    this.value = this.input.value;\n    this.setTextareaHeight();\n    this.scChange.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleInput() {\n    this.value = this.input.value;\n    this.setTextareaHeight();\n    this.scInput.emit();\n  }\n\n  componentWillLoad() {\n    if (!window?.ResizeObserver) {\n      return;\n    }\n    this.resizeObserver = new window.ResizeObserver(() => this.setTextareaHeight());\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el).addFormData();\n    if (!window?.ResizeObserver) {\n      return;\n    }\n    this.resizeObserver.observe(this.input);\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n    this.resizeObserver.unobserve(this.input);\n  }\n\n  setTextareaHeight() {\n    if (this.resize === 'auto') {\n      this.input.style.height = 'auto';\n      this.input.style.height = `${this.input.scrollHeight}px`;\n    } else {\n      (this.input.style.height as string | undefined) = undefined;\n    }\n  }\n\n  render() {\n    return (\n      <div\n        part=\"form-control\"\n        class={{\n          'form-control': true,\n          'form-control--small': this.size === 'small',\n          'form-control--medium': this.size === 'medium',\n          'form-control--large': this.size === 'large',\n        }}\n      >\n        <sc-form-control\n          exportparts=\"label, help-text, form-control\"\n          size={this.size}\n          required={this.required}\n          label={this.label}\n          showLabel={this.showLabel}\n          help={this.help}\n          inputId={this.inputId}\n          helpId={this.helpId}\n          labelId={this.labelId}\n          name={this.name}\n        >\n          <div part=\"form-control-input\" class=\"form-control-input\">\n            <div\n              part=\"base\"\n              class={{\n                'textarea': true,\n                'textarea--small': this.size === 'small',\n                'textarea--medium': this.size === 'medium',\n                'textarea--large': this.size === 'large',\n                'textarea--standard': !this.filled,\n                'textarea--filled': this.filled,\n                'textarea--disabled': this.disabled,\n                'textarea--focused': this.hasFocus,\n                'textarea--empty': !this.value,\n                'textarea--invalid': this.invalid,\n                'textarea--resize-none': this.resize === 'none',\n                'textarea--resize-vertical': this.resize === 'vertical',\n                'textarea--resize-auto': this.resize === 'auto',\n              }}\n            >\n              <textarea\n                part=\"textarea\"\n                ref={el => (this.input = el as HTMLTextAreaElement)}\n                id=\"input\"\n                class=\"textarea__control\"\n                name={this.name}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                placeholder={this.placeholder}\n                rows={this.rows}\n                minlength={this.minlength}\n                maxlength={this.maxlength}\n                autocapitalize={this.autocapitalize}\n                autocorrect={this.autocorrect}\n                autofocus={this.autofocus}\n                spellcheck={this.spellcheck}\n                enterkeyhint={this.enterkeyhint}\n                inputmode={this.inputmode}\n                aria-describedby=\"help-text\"\n                onChange={() => this.handleChange()}\n                onInput={() => this.handleInput()}\n                onFocus={() => this.handleFocus()}\n                onBlur={() => this.handleBlur()}\n                onKeyDown={(e) => e.stopPropagation()}\n              ></textarea>\n            </div>\n            {this.showCharLimit && (\n              <div slot=\"help\" class={'textarea__char-limit-warning'}>\n                {sprintf(__('%d characters remaining', 'surecart'), this.maxlength - this.input.value.length)}\n              </div>\n            )}\n          </div>\n        </sc-form-control>\n      </div>\n    );\n  }\n}\n"]}
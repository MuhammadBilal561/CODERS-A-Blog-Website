{"version":3,"file":"sc-order-detail.js","sourceRoot":"","sources":["../../../../../src/components/controllers/confirmation/order-detail/sc-order-detail.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Checkout } from '../../../../types';\nimport { Component, h, Prop } from '@stencil/core';\nimport dotProp from 'dot-prop-immutable';\nimport { openWormhole } from 'stencil-wormhole';\n\n@Component({\n  tag: 'sc-order-detail',\n  styleUrl: 'sc-order-detail.scss',\n  shadow: true,\n})\nexport class ScSessionDetail {\n  @Prop() order: Checkout;\n  @Prop() value: string;\n  @Prop() fallback: string;\n  @Prop() metaKey: string;\n  @Prop() loading: boolean;\n  @Prop() label: string;\n\n  getPropByPath(object, path, defaultValue) {\n    if (object && path.length) return this.getPropByPath(object[path.shift()], path, defaultValue);\n    return object === undefined ? defaultValue : object;\n  }\n\n  getValue() {\n    if (!this.value) {\n      return;\n    }\n\n    let value = '';\n\n    // get metadata value\n    if (this.value === 'metadata') {\n      return dotProp.get(this?.order?.metadata, this.value || '');\n    }\n\n    // get value\n    value = dotProp.get(this?.order, this.value || '');\n\n    // if number, format it\n    if (typeof value === 'number') {\n      value = <sc-format-number type=\"currency\" currency={this?.order?.currency} value={value}></sc-format-number>;\n    }\n\n    return value;\n  }\n\n  render() {\n    if (this.loading) {\n      return (\n        <div\n          part=\"base\"\n          class={{\n            'order-detail': true,\n          }}\n        >\n          <span part=\"label\" class=\"order-detail__label\">\n            <sc-skeleton style={{ width: '60px', height: '8px', display: 'inline-block' }}></sc-skeleton>\n          </span>\n          <span part=\"value\" class=\"order-detail__value\">\n            <sc-skeleton style={{ width: '120px', display: 'inline-block' }}></sc-skeleton>\n          </span>\n        </div>\n      );\n    }\n\n    const value = this.getValue();\n    if (!value) {\n      if (!this.fallback) {\n        return;\n      }\n    }\n\n    return (\n      <div\n        part=\"base\"\n        class={{\n          'order-detail': true,\n        }}\n      >\n        <span part=\"label\" class=\"order-detail__label\">\n          <slot name=\"label\">{this.label}</slot>\n        </span>\n        <span part=\"value\" class=\"order-detail__value\">\n          <slot name=\"value\">{value || this.fallback}</slot>\n        </span>\n      </div>\n    );\n  }\n}\n\nopenWormhole(ScSessionDetail, ['order', 'loading'], false);\n"]}
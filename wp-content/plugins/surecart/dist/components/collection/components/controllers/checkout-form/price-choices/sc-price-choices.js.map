{"version":3,"file":"sc-price-choices.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/price-choices/sc-price-choices.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACnG,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAC;AAExE,OAAO,EAAE,KAAK,IAAI,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAOzD,MAAM,OAAO,cAAc;;;mBAOC,CAAC;oBAGC,IAAI;;EAShC,YAAY;IACV,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;;MAChE,MAAM,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;MAC1G,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAA,EAAE;QACpB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;OAC/F;WAAM;QACL,MAAM,QAAQ,GAAG,oBAAoB,CAAC,MAAA,aAAa,CAAC,QAAQ,0CAAE,UAAU,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QACxF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,MAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAA,IAAI,CAAC,EAAE,CAAC,CAAC;OAC3H;IACH,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,QAAQ;MACP,kBAAY,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAC,uBAAuB,EAAC,KAAK,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;QACnI,eAAQ,CACG,CACJ,CACZ,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Event, EventEmitter, Fragment, h, Listen, Prop } from '@stencil/core';\nimport { getLineItemByPriceId } from '../../../../functions/line-items';\nimport { LineItemData } from '../../../../types';\nimport { state as checkoutState } from '@store/checkout';\n\n@Component({\n  tag: 'sc-price-choices',\n  styleUrl: 'sc-price-choices.css',\n  shadow: false,\n})\nexport class ScPriceChoices {\n  @Element() el: HTMLScPriceChoicesElement;\n\n  /** Selector label */\n  @Prop() label: string;\n\n  /** Number of columns */\n  @Prop() columns: number = 1;\n\n  /** Required by default */\n  @Prop() required: boolean = true;\n\n  /** Toggle line item event */\n  @Event() scRemoveLineItem: EventEmitter<LineItemData>;\n\n  /** Toggle line item event */\n  @Event() scUpdateLineItem: EventEmitter<LineItemData>;\n\n  @Listen('scChange')\n  handleChange() {\n    this.el.querySelectorAll('sc-price-choice').forEach(priceChoice => {\n      const choice = priceChoice.querySelector('sc-choice') || priceChoice.querySelector('sc-choice-container');\n      if (!choice?.checked) {\n        this.scRemoveLineItem.emit({ price_id: priceChoice.priceId, quantity: priceChoice.quantity });\n      } else {\n        const lineItem = getLineItemByPriceId(checkoutState.checkout?.line_items, choice.value);\n        this.scUpdateLineItem.emit({ price_id: priceChoice.priceId, quantity: lineItem?.quantity || priceChoice?.quantity || 1 });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <sc-choices label={this.label} required={this.required} class=\"loaded price-selector\" style={{ '--columns': this.columns.toString() }}>\n          <slot />\n        </sc-choices>\n      </Fragment>\n    );\n  }\n}\n"]}
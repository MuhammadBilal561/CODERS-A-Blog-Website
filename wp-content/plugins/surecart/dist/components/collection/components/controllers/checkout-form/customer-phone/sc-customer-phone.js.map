{"version":3,"file":"sc-customer-phone.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/customer-phone/sc-customer-phone.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, h, Method, Prop } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { state as checkoutState, onChange } from '@store/checkout';\n\nimport { Customer } from '../../../../types';\n\n@Component({\n  tag: 'sc-customer-phone',\n  styleUrl: 'sc-customer-phone.css',\n  shadow: true,\n})\nexport class ScCustomerPhone {\n  private input: HTMLScInputElement;\n\n  /** Remove the change listener */\n  private removeChangeListener: () => void;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** Error focus */\n  @Prop({ mutable: true }) error: boolean;\n\n  /** Emitted when the control's value changes. */\n  @Event({ composed: true }) scChange: EventEmitter<void>;\n\n  /** Emitted when the clear button is activated. */\n  @Event() scClear: EventEmitter<void>;\n\n  /** Emitted when the control receives input. */\n  @Event() scInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  async handleChange() {\n    this.value = this.input.value;\n    this.scChange.emit();\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input?.reportValidity?.();\n  }\n\n  componentWillLoad() {\n    this.handleCheckoutChange();\n    this.removeChangeListener = onChange('checkout', () => this.handleCheckoutChange());\n  }\n\n  disconnectedCallback() {\n    this.removeChangeListener();\n  }\n\n  handleCheckoutChange() {\n    // we only want to do this  if we don't have a value.\n    if (this?.value) return;\n\n    // if the checkout has a phone, use that.\n    if (checkoutState.checkout?.phone) {\n      this.value = checkoutState.checkout?.phone;\n      return;\n    }\n\n    // if the customer has a phone, use that.\n    if ((checkoutState.checkout?.customer as Customer)?.phone) {\n      this.value = (checkoutState.checkout?.customer as Customer)?.phone;\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <sc-phone-input\n        name=\"phone\"\n        ref={el => (this.input = el as HTMLScInputElement)}\n        value={this.value}\n        label={this.label}\n        help={this.help}\n        autocomplete=\"phone\"\n        placeholder={this.placeholder}\n        readonly={this.readonly}\n        required={this.required}\n        invalid={this.invalid}\n        autofocus={this.autofocus}\n        hasFocus={this.hasFocus}\n        onScChange={() => this.handleChange()}\n        onScInput={() => this.scInput.emit()}\n        onScFocus={() => this.scFocus.emit()}\n        onScBlur={() => this.scBlur.emit()}\n      />\n    );\n  }\n}\n"]}
{"version":3,"file":"sc-customer-email.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/customer-email/sc-customer-email.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, h, Host, Method, Prop } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\n\nimport { createOrUpdateCheckout } from '../../../../services/session';\nimport { Checkout, Customer } from '../../../../types';\nimport { getValueFromUrl } from '../../../../functions/util';\nimport { state as userState } from '@store/user';\nimport { state as checkoutState, onChange } from '@store/checkout';\n\n@Component({\n  tag: 'sc-customer-email',\n  styleUrl: 'sc-customer-email.scss',\n  shadow: true,\n})\nexport class ScCustomerEmail {\n  private input: HTMLScInputElement;\n\n  private removeCheckoutListener: () => void;\n\n  /** A message for tracking confirmation. */\n  @Prop() trackingConfirmationMessage: string;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = getValueFromUrl('email');\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** Emitted when the control's value changes. */\n  @Event({ composed: true }) scChange: EventEmitter<void>;\n\n  /** Emitted when the clear button is activated. */\n  @Event() scClear: EventEmitter<void>;\n\n  /** Emitted when the control receives input. */\n  @Event() scInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Update the order state. */\n  @Event() scUpdateOrderState: EventEmitter<Checkout>;\n\n  /** Update the abandoned cart. */\n  @Event() scUpdateAbandonedCart: EventEmitter<boolean>;\n\n  /** Prompt for login. */\n  @Event() scLoginPrompt: EventEmitter<void>;\n\n  async handleChange() {\n    this.value = this.input.value;\n    this.scChange.emit();\n\n    try {\n      checkoutState.checkout = (await createOrUpdateCheckout({ id: checkoutState.checkout.id, data: { email: this.input.value } })) as Checkout;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input?.reportValidity?.();\n  }\n\n  /** Sync customer email with session if it's updated by other means */\n  handleSessionChange() {\n    // we already have a value and we are not yet logged in.\n    if (this.value && !userState.loggedIn) return;\n\n    // we are logged in already.\n    if (userState.loggedIn) {\n      // get email from user state fist.\n      this.value = userState.email || (checkoutState?.checkout?.customer as Customer)?.email || checkoutState?.checkout?.email;\n      return;\n    }\n\n    const fromUrl = getValueFromUrl('email');\n    if (!userState.loggedIn && !!fromUrl) {\n      this.value = fromUrl;\n      return;\n    }\n\n    this.value = checkoutState?.checkout?.email || (checkoutState?.checkout?.customer as Customer)?.email;\n  }\n\n  /** Listen to checkout. */\n  componentWillLoad() {\n    this.handleSessionChange();\n    this.removeCheckoutListener = onChange('checkout', () => this.handleSessionChange());\n  }\n\n  /** Remove listener. */\n  disconnectedCallback() {\n    this.removeCheckoutListener();\n  }\n\n  renderOptIn() {\n    if (!this.trackingConfirmationMessage) return null;\n\n    if (checkoutState.abandonedCheckoutEnabled !== false) {\n      return (\n        <div class=\"tracking-confirmation-message\">\n          <span>{this.trackingConfirmationMessage}</span>{' '}\n          <a\n            href=\"#\"\n            onClick={e => {\n              e.preventDefault();\n              this.scUpdateAbandonedCart.emit(false);\n            }}\n          >\n            {__('No Thanks', 'surecart')}\n          </a>\n        </div>\n      );\n    }\n\n    return (\n      <div class=\"tracking-confirmation-message\">\n        <span> {__(\"You won't receive further emails from us.\", 'surecart')}</span>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <sc-input\n          exportparts=\"base, input, form-control, label, help-text, prefix, suffix\"\n          type=\"email\"\n          name=\"email\"\n          ref={el => (this.input = el as HTMLScInputElement)}\n          value={this.value}\n          help={this.help}\n          label={this.label}\n          autocomplete={'email'}\n          placeholder={this.placeholder}\n          disabled={!!userState.loggedIn && !!this.value?.length && !this.invalid}\n          readonly={this.readonly}\n          required={true}\n          invalid={this.invalid}\n          autofocus={this.autofocus}\n          hasFocus={this.hasFocus}\n          onScChange={() => this.handleChange()}\n          onScInput={() => this.scInput.emit()}\n          onScFocus={() => this.scFocus.emit()}\n          onScBlur={() => this.scBlur.emit()}\n        ></sc-input>\n\n        {this.renderOptIn()}\n      </Host>\n    );\n  }\n}\n"]}
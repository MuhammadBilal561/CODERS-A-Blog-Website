{"version":3,"file":"sc-format-bytes.js","sourceRoot":"","sources":["../../../../src/components/util/format-bytes/sc-format-bytes.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAOhD,MAAM,OAAO,aAAa;;;iBAKA,CAAC;gBAGM,MAAM;mBAGU,OAAO;;EAEtD,MAAM;IACJ,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MACrB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,WAAW,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,iCAAiC;IAC3F,MAAM,YAAY,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAClE,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC;IAChE,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/F,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IACvC,MAAM,aAAa,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtF,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,EAAS,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;EAC7H,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'sc-format-bytes',\n  styleUrl: 'sc-format-bytes.css',\n  shadow: true,\n})\nexport class ScFormatBytes {\n  /** The locale to use when formatting the number. */\n  @Prop() locale: string;\n\n  /** The number to format in bytes. */\n  @Prop() value: number = 0;\n\n  /** The unit to display. */\n  @Prop() unit: 'byte' | 'bit' = 'byte';\n\n  /** Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\". */\n  @Prop() display: 'long' | 'short' | 'narrow' = 'short';\n\n  render() {\n    if (isNaN(this.value)) {\n      return '';\n    }\n\n    const bitPrefixes = ['', 'kilo', 'mega', 'giga', 'tera']; // petabit isn't a supported unit\n    const bytePrefixes = ['', 'kilo', 'mega', 'giga', 'tera', 'peta'];\n    const prefix = this.unit === 'bit' ? bitPrefixes : bytePrefixes;\n    const index = Math.max(0, Math.min(Math.floor(Math.log10(this.value) / 3), prefix.length - 1));\n    const unit = prefix[index] + this.unit;\n    const valueToFormat = parseFloat((this.value / Math.pow(1000, index)).toPrecision(3));\n\n    return new Intl.NumberFormat(this.locale, { style: 'unit', unit, unitDisplay: this.display } as any).format(valueToFormat);\n  }\n}\n"]}
{"version":3,"file":"sc-provider.js","sourceRoot":"","sources":["../../../../src/components/context/provider/sc-provider.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAS9F,MAAM,OAAO,UAAU;;;qBAEY,EAAE;;EAGnC,YAAY,CAAC,UAAU;IACrB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;EAC3D,CAAC;EAID,KAAK,CAAC,aAAa,CAAC,KAAoB;IACtC,KAAK,CAAC,eAAe,EAAE,CAAC;IACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC/D,MAAM,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACzC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACnD,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACnH,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;EAChC,CAAC;EAED,oBAAoB;IAClB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,MAAM;IACJ,OAAO,eAAQ,CAAC;EAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, h, Listen, Prop, State, Watch } from '@stencil/core';\n\ninterface ConsumerEvent extends Event {\n  detail: Function;\n}\n\n@Component({\n  tag: 'sc-provider',\n})\nexport class ScProvider {\n  @Prop() STENCIL_CONTEXT: { [key: string]: any };\n  @State() consumers: Function[] = [];\n\n  @Watch('STENCIL_CONTEXT')\n  watchContext(newContext) {\n    this.consumers.forEach(consumer => consumer(newContext));\n  }\n  @Event({ eventName: 'mountConsumer' }) mountEmitter: EventEmitter;\n\n  @Listen('mountConsumer')\n  async mountConsumer(event: ConsumerEvent) {\n    event.stopPropagation();\n    this.consumers = this.consumers.slice().concat([event.detail]);\n    await event.detail(this.STENCIL_CONTEXT);\n    const index = this.consumers.indexOf(event.detail);\n    const newConsumers = this.consumers.slice(0, index).concat(this.consumers.slice(index + 1, this.consumers.length));\n    this.consumers = newConsumers;\n  }\n\n  disconnectedCallback() {\n    this.consumers.map(consumer => this.mountEmitter.emit(consumer));\n  }\n\n  render() {\n    return <slot />;\n  }\n}\n"]}
{"version":3,"file":"watchers.js","sourceRoot":"","sources":["../../../src/store/product/watchers.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProductState } from 'src/types';\nimport state, { on } from './store';\nimport { setProduct } from './setters';\nimport { getVariantFromValues } from '../../functions/util';\nimport { isStockNeedsToBeChecked } from './getters';\nimport { speak } from '@wordpress/a11y';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/** Handle set event on products store. */\non('set', (productId: string, newValue: ProductState, oldValue: ProductState) => {\n  if (newValue?.selectedPrice?.id !== oldValue?.selectedPrice?.id) {\n    updateSelectedPrice(productId, newValue);\n  }\n\n  // if variants change, check the stock.\n  if (newValue?.selectedVariant?.id !== oldValue?.selectedVariant?.id) {\n    handleStockWithSelectedVariant(productId);\n  }\n\n  const shouldUpdateLineItem =\n    !oldValue || ['selectedPrice', 'adHocAmount', 'quantity', 'selectedVariant'].some(key => JSON.stringify(newValue[key]) !== JSON.stringify(oldValue[key]));\n  if (shouldUpdateLineItem) {\n    setLineItem(productId);\n  }\n\n  const shouldUpdateVariants = !oldValue || JSON.stringify(newValue?.variantValues) !== JSON.stringify(oldValue?.variantValues);\n  if (shouldUpdateVariants) {\n    updateSelectedVariant(productId, newValue);\n  }\n});\n\n/**\n * Update the selected variant based on chosen values.\n */\nconst updateSelectedVariant = (productId: string, newValue: ProductState) => {\n  const matchedVariant = getVariantFromValues({ variants: state[productId].variants, values: newValue?.variantValues });\n\n  if (matchedVariant) {\n    setProduct(productId, { selectedVariant: matchedVariant });\n  }\n};\n\n/**\n * Handle when the selected variant changes.\n */\nconst handleStockWithSelectedVariant = (productId: string) => {\n  // make sure we have a selected variant and stock needs to be checked.\n  if (!state[productId].selectedVariant || !isStockNeedsToBeChecked) {\n    return;\n  }\n\n  // if available stock is less than the quantity, adjust the quantity to the max available.\n  if (state[productId]?.selectedVariant.available_stock < state[productId]?.quantity) {\n    state[productId].quantity = state[productId]?.selectedVariant.available_stock || 1;\n    speak(\n      sprintf(__('There are just %d items left in stock, and the quantity has been adjusted to %d.', 'surecart'), state[productId].quantity, state[productId].quantity),\n      'assertive',\n    );\n  }\n};\n\nconst updateSelectedPrice = (productId: string, newValue: ProductState) => {\n  setProduct(productId, {\n    // update the total when the selected price changes.\n    total: state[productId].adHocAmount || newValue?.selectedPrice?.amount || 0,\n    // set the ad hoc amount to the selected product amount.\n    adHocAmount: newValue?.selectedPrice?.amount,\n    // update disabled based on if price is archived or product is archived.\n    disabled: newValue?.selectedPrice?.archived || state[productId].product?.archived,\n  });\n};\n\nconst setLineItem = (productId: string) => {\n  setProduct(productId, {\n    line_item: {\n      price_id: state[productId]?.selectedPrice?.id,\n      quantity: Math.max(state[productId]?.selectedPrice?.ad_hoc ? 1 : state[productId].quantity, 1),\n      ...(state[productId]?.selectedPrice?.ad_hoc ? { ad_hoc_amount: state[productId]?.adHocAmount } : {}),\n      variant: state[productId].selectedVariant?.id,\n    },\n  });\n};\n"]}
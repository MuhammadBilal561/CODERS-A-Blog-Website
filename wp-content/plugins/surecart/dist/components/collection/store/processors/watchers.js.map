{"version":3,"file":"watchers.js","sourceRoot":"","sources":["../../../src/store/processors/watchers.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAE,QAAQ,IAAI,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC3D,OAAO,EAAE,QAAQ,IAAI,iBAAiB,EAAE,KAAK,IAAI,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAClG,OAAO,EAAE,6BAA6B,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,MAAM,WAAW,CAAC;AACrG,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC;;GAEG;AACH,MAAM,oBAAoB,GAAG,GAAG,EAAE;EAChC,kDAAkD;EAClD,MAAM,GAAG,GAAG,CAAC,GAAG,mBAAmB,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE,GAAG,6BAA6B,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3I,mCAAmC;EACnC,IAAI,GAAG,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;IAAE,OAAO;EAC/C,gDAAgD;EAChD,iBAAiB,CAAC,EAAE,GAAG,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,EAAC,CAAC,CAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AACvD,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,iBAAiB,GAAG,GAAG,EAAE;EAC7B,kBAAkB;EAClB,MAAM,GAAG,GAAG,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/D,oDAAoD;EACpD,IAAI,CAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,EAAE,MAAK,QAAQ,EAAE;IACtC,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC;IAChC,OAAO;GACR;EACD,+BAA+B;EAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC;IAAE,OAAO;EACnD,gEAAgE;EAChE,iBAAiB,CAAC,MAAM,GAAG,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,EAAC,CAAC,CAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC3D,CAAC,CAAC;AAEF,qDAAqD;AACrD,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE;EAChC,oBAAoB,EAAE,CAAC;EACvB,iBAAiB,EAAE,CAAC;AACtB,CAAC,CAAC,CAAC;AACH,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,oBAAoB,EAAE,CAAC,CAAC;AAEtD,kEAAkE;AAClE,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,oBAAoB,EAAE,CAAC,CAAC;AACrD,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC,CAAC","sourcesContent":["/**\n * Internal dependencies.\n */\nimport { onChange as onChangeCheckout } from '../checkout';\nimport { onChange as onChangeProcessor, state as selectedProcessor } from '../selected-processor';\nimport { availableManualPaymentMethods, availableMethodTypes, availableProcessors } from './getters';\nimport { onChange } from './store';\n\n/**\n * Look through available processors and maybe switch if the processor has been removed.\n */\nconst maybeUpdateProcessor = () => {\n  // get array of manual and regular processors ids.\n  const ids = [...availableProcessors().map(({ processor_type }) => processor_type), ...availableManualPaymentMethods().map(({ id }) => id)];\n  // selected processor is available.\n  if (ids.includes(selectedProcessor.id)) return;\n  // set to first if we have one, otherwise unset.\n  selectedProcessor.id = ids?.length ? ids?.[0] : null;\n};\n\n/**\n * Look through available methods and maybe switch if the processor has been removed.\n */\nconst maybeUpdateMethod = () => {\n  // get method ids.\n  const ids = (availableMethodTypes() || []).map(({ id }) => id);\n  // if the processor is not mollie, unset the method.\n  if (selectedProcessor?.id !== 'mollie') {\n    selectedProcessor.method = null;\n    return;\n  }\n  // selected method is available\n  if (ids.includes(selectedProcessor.method)) return;\n  // if the current method is not available, set the first method.\n  selectedProcessor.method = ids?.length ? ids?.[0] : null;\n};\n\n// when the checkout changes, maybe update selection.\nonChangeCheckout('checkout', () => {\n  maybeUpdateProcessor();\n  maybeUpdateMethod();\n});\nonChangeProcessor('id', () => maybeUpdateProcessor());\n\n// when processors and methods are first loaded, select first one.\nonChange('processors', () => maybeUpdateProcessor());\nonChange('methods', () => maybeUpdateMethod());\n"]}
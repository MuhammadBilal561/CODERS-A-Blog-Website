{"version":3,"file":"getters.js","sourceRoot":"","sources":["../../../src/store/processors/getters.ts"],"names":[],"mappings":"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","sourcesContent":["import { sortByArray } from '../../functions/util';\nimport state from './store';\nimport { state as checkoutState } from '@store/checkout';\n\n/**\n * Gets a sorted array of available processors based on\n * checkout mode, recurring requirements, and if mollie is enabled.\n */\nexport const availableProcessors = () =>\n  sortByArray(state.processors, 'processor_type', state.sortOrder.processors) // sort.\n    .filter(processor => processor?.live_mode === (checkoutState?.mode === 'live')) // match mode.\n    .filter(processor => !(state.disabled.processors || []).includes(processor.processor_type)) // make sure it's not disabled.\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.recurring_enabled : true)) // recurring.\n    .filter((processor, _, filtered) => (filtered.some(p => p.processor_type === 'mollie') ? processor.processor_type === 'mollie' || processor.processor_type === 'mock' : true)); // only allow mollie if preset.\n\n/**\n * Gets the processor by type\n *\n * @param {string} type The processor type.\n *\n * @returns {Object | null} The processor data.\n */\nexport const getProcessorByType = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Gets an available processor type.\n */\nexport const getAvailableProcessor = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Check if there is any available credit card processor except the given processor type.\n */\nexport const hasOtherAvailableCreditCardProcessor = (type: string) =>\n  availableProcessors().some(({ processor_type }) => processor_type !== type && 'paypal' !== processor_type && 'mock' !== processor_type);\n\n/**\n * Get a sorted array of manual payment methods\n * based on recurring requirements.\n */\nexport const availableManualPaymentMethods = () =>\n  sortByArray(state.manualPaymentMethods, 'id', state.sortOrder.manualPaymentMethods)\n    .filter(processor => !(state.disabled.processors || []).includes(processor?.id))\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.reusable : true)); // recurring.\n\n/**\n * Get a sorted array of mollie payment method types.\n */\nexport const availableMethodTypes = () =>\n  sortByArray(state.methods, 'id', state.sortOrder.paymentMethods.mollie).filter(method => {\n    if (method.id === 'applepay') {\n      return (window as any)?.ApplePaySession && (window as any)?.ApplePaySession?.canMakePayments?.();\n    }\n    return true;\n  });\n\n/**\n * Get a combined available processor choices (processors + manual payment methods)\n */\nexport const availableProcessorChoices = () => [...availableProcessors(), ...availableManualPaymentMethods()];\n\n/**\n * Do we have multiple processors.\n */\nexport const hasMultipleProcessorChoices = () => availableProcessorChoices()?.length > 1;\n\n/**\n * Get a combined available payment methods (method types + manual payment methods)\n */\nexport const availableMethodChoices = () => [...availableMethodTypes(), ...availableManualPaymentMethods(), ...[getProcessorByType('mock')]].filter(Boolean);\n\n/**\n * Do we have multiple payment methods.\n */\nexport const hasMultipleMethodChoices = () => availableMethodChoices()?.length > 1;\n"]}
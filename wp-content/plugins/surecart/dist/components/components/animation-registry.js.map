{"file":"animation-registry.js","mappings":"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","names":[],"sources":["./src/functions/animate.ts","./src/functions/animation-registry.ts"],"sourcesContent":["//\n// Animates an element using keyframes. Returns a promise that resolves after the animation completes or gets canceled.\n//\nexport function animateTo(el: HTMLElement, keyframes: Keyframe[], options?: KeyframeAnimationOptions) {\n  return new Promise(resolve => {\n    if (options?.duration === Infinity) {\n      throw new Error('Promise-based animations must be finite.');\n    }\n\n    if (!el?.animate) {\n      return;\n    }\n\n    const animation = el.animate(keyframes, {\n      ...options,\n      duration: prefersReducedMotion() ? 0 : options!.duration,\n    });\n\n    if (!animation) {\n      return;\n    }\n\n    animation.addEventListener('cancel', resolve, { once: true });\n    animation.addEventListener('finish', resolve, { once: true });\n  });\n}\n\n//\n// Parses a CSS duration and returns the number of milliseconds.\n//\nexport function parseDuration(delay: number | string) {\n  delay = delay.toString().toLowerCase();\n\n  if (delay.indexOf('ms') > -1) {\n    return parseFloat(delay);\n  }\n\n  if (delay.indexOf('s') > -1) {\n    return parseFloat(delay) * 1000;\n  }\n\n  return parseFloat(delay);\n}\n\n//\n// Tells if the user has enabled the \"reduced motion\" setting in their browser or OS.\n//\nexport function prefersReducedMotion() {\n  const query = window.matchMedia('(prefers-reduced-motion: reduce)');\n  return query.matches;\n}\n\n//\n// Stops all active animations on the target element. Returns a promise that resolves after all animations are canceled.\n//\nexport function stopAnimations(el: HTMLElement) {\n  return Promise.all(\n    (el?.getAnimations?.() || []).map(animation => {\n      return new Promise(resolve => {\n        const handleAnimationEvent = requestAnimationFrame(resolve);\n\n        animation.addEventListener('cancel', () => handleAnimationEvent, { once: true });\n        animation.addEventListener('finish', () => handleAnimationEvent, { once: true });\n        animation.cancel();\n      });\n    }),\n  );\n}\n\n// We can't animate `height: auto`, but we can calculate the height and shim keyframes by replacing it with the\n// element's scrollHeight before the animation.\nexport function shimKeyframesHeightAuto(keyframes: Keyframe[], calculatedHeight: number) {\n  return keyframes.map(keyframe => ({\n    ...keyframe,\n    height: keyframe.height === 'auto' ? `${calculatedHeight}px` : keyframe.height,\n  }));\n}\n","interface ElementAnimation {\n  keyframes: Keyframe[];\n  options?: KeyframeAnimationOptions;\n}\n\ninterface ElementAnimationMap {\n  [animationName: string]: ElementAnimation;\n}\n\nconst defaultAnimationRegistry = new Map<string, ElementAnimation>();\nconst customAnimationRegistry = new WeakMap<Element, ElementAnimationMap>();\n\nfunction ensureAnimation(animation: ElementAnimation | null) {\n  return animation ?? { keyframes: [], options: { duration: 0 } };\n}\n\n//\n// Sets a default animation. Components should use the `name.animation` for primary animations and `name.part.animation`\n// for secondary animations, e.g. `dialog.show` and `dialog.overlay.show`. For modifiers, use `drawer.showTop`.\n//\nexport function setDefaultAnimation(animationName: string, animation: ElementAnimation | null) {\n  defaultAnimationRegistry.set(animationName, ensureAnimation(animation));\n}\n\n//\n// Sets a custom animation for the specified element.\n//\nexport function setAnimation(el: Element, animationName: string, animation: ElementAnimation | null) {\n  customAnimationRegistry.set(el, { ...customAnimationRegistry.get(el), [animationName]: ensureAnimation(animation) });\n}\n\n//\n// Gets an element's animation. Falls back to the default if no animation is found.\n//\nexport function getAnimation(el: Element, animationName: string) {\n  const customAnimation = customAnimationRegistry.get(el);\n\n  // Check for a custom animation\n  if (customAnimation?.[animationName]) {\n    return customAnimation[animationName];\n  }\n\n  // Check for a default animation\n  const defaultAnimation = defaultAnimationRegistry.get(animationName);\n  if (defaultAnimation) {\n    return defaultAnimation;\n  }\n\n  // Fall back to an empty animation\n  return {\n    keyframes: [],\n    options: { duration: 0 },\n  };\n}\n"],"version":3}
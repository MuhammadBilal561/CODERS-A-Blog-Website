{"file":"sc-subscription-status-badge2.js","mappings":";;;;AAAA,MAAM,4BAA4B,GAAG,6BAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kHCsDrB,UAAE,yBAAyB,UAAE;;;;eAO3D,UAAE;;eAEF,UAAE;;eAEF,UAAE;;eAEF,UAAE;;;;;eAKF,UAAE;;eAEF,UAAE;;eAEF,UAAE;;;;wCAMS,eAAO,CAAC,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/ui/subscription-status-badge/sc-subscription-status-badge.css?tag=sc-subscription-status-badge&encapsulation=shadow","./src/components/ui/subscription-status-badge/sc-subscription-status-badge.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n}\n","import { Component, Fragment, h, Prop } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Subscription, SubscriptionStatus } from '../../../types';\n\n@Component({\n  tag: 'sc-subscription-status-badge',\n  styleUrl: 'sc-subscription-status-badge.css',\n  shadow: true,\n})\nexport class ScSubscriptionStatusBadge {\n  /** Subscription status */\n  @Prop() status: SubscriptionStatus;\n\n  /** The tag's status type. */\n  @Prop() subscription: Subscription;\n\n  /** The tag's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Draws a pill-style tag with rounded edges. */\n  @Prop({ reflect: true }) pill: boolean = false;\n\n  /** Makes the tag clearable. */\n  @Prop() clearable: boolean = false;\n\n  getType() {\n    if (this.subscription?.cancel_at_period_end) {\n      return 'info';\n    }\n    switch (this.status || this.subscription?.status) {\n      case 'incomplete':\n        return 'warning';\n      case 'trialing':\n        return 'info';\n      case 'active':\n        return 'success';\n      case 'completed':\n        return 'success';\n      case 'past_due':\n        return 'warning';\n      case 'canceled':\n        if (this.subscription?.restore_at) {\n          return 'info';\n        }\n        return 'danger';\n      case 'unpaid':\n        return 'warning';\n    }\n  }\n\n  getText() {\n    if (this.subscription?.cancel_at_period_end && this.subscription.current_period_end_at && this.subscription?.status !== 'canceled') {\n      return (\n        <Fragment>\n          {!!this.subscription?.restore_at ? __('Pauses', 'surecart') : __('Cancels', 'surecart')}{' '}\n          <sc-format-date type=\"timestamp\" date={this.subscription.current_period_end_at} month=\"short\" day=\"numeric\"></sc-format-date>\n        </Fragment>\n      );\n    }\n    switch (this.status || this.subscription?.status) {\n      case 'incomplete':\n        return __('Incomplete', 'surecart');\n      case 'trialing':\n        return __('Trialing', 'surecart');\n      case 'active':\n        return __('Active', 'surecart');\n      case 'past_due':\n        return __('Past Due', 'surecart');\n      case 'canceled':\n        if (this.subscription?.restore_at) {\n          return 'Paused';\n        }\n        return __('Canceled', 'surecart');\n      case 'completed':\n        return __('Completed', 'surecart');\n      case 'unpaid':\n        return __('Unpaid', 'surecart');\n    }\n  }\n\n  render() {\n    return (\n      <sc-tag aria-label={sprintf(__('Plan Status - %s', 'surecart'), this.getText())} type={this.getType()}>\n        {this.getText()}\n      </sc-tag>\n    );\n  }\n}\n"],"version":3}
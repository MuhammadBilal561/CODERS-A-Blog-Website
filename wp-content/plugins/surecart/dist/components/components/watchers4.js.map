{"file":"watchers4.js","mappings":";;;;AAAA;;;AAQA;;;AAGA,MAAM,oBAAoB,GAAG;;EAE3B,MAAM,GAAG,GAAG,CAAC,GAAG,mBAAmB,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,KAAK,cAAc,CAAC,EAAE,GAAG,6BAA6B,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;;EAE3I,IAAI,GAAG,CAAC,QAAQ,CAACA,KAAiB,CAAC,EAAE,CAAC;IAAE,OAAO;;EAE/CA,KAAiB,CAAC,EAAE,GAAG,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,IAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACvD,CAAC,CAAC;AAEF;;;AAGA,MAAM,iBAAiB,GAAG;;EAExB,MAAM,GAAG,GAAG,CAAC,oBAAoB,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;;EAE/D,IAAI,CAAAA,KAAiB,aAAjBA,KAAiB,uBAAjBA,KAAiB,CAAE,EAAE,MAAK,QAAQ,EAAE;IACtCA,KAAiB,CAAC,MAAM,GAAG,IAAI,CAAC;IAChC,OAAO;GACR;;EAED,IAAI,GAAG,CAAC,QAAQ,CAACA,KAAiB,CAAC,MAAM,CAAC;IAAE,OAAO;;EAEnDA,KAAiB,CAAC,MAAM,GAAG,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,IAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AAC3D,CAAC,CAAC;AAEF;AACAC,QAAgB,CAAC,UAAU,EAAE;EAC3B,oBAAoB,EAAE,CAAC;EACvB,iBAAiB,EAAE,CAAC;AACtB,CAAC,CAAC,CAAC;AACHC,UAAiB,CAAC,IAAI,EAAE,MAAM,oBAAoB,EAAE,CAAC,CAAC;AAEtD;AACAC,UAAQ,CAAC,YAAY,EAAE,MAAM,oBAAoB,EAAE,CAAC,CAAC;AACrDA,UAAQ,CAAC,SAAS,EAAE,MAAM,iBAAiB,EAAE,CAAC","names":["selectedProcessor","onChangeCheckout","onChangeProcessor","onChange"],"sources":["./src/store/processors/watchers.ts"],"sourcesContent":["/**\n * Internal dependencies.\n */\nimport { onChange as onChangeCheckout } from '../checkout';\nimport { onChange as onChangeProcessor, state as selectedProcessor } from '../selected-processor';\nimport { availableManualPaymentMethods, availableMethodTypes, availableProcessors } from './getters';\nimport { onChange } from './store';\n\n/**\n * Look through available processors and maybe switch if the processor has been removed.\n */\nconst maybeUpdateProcessor = () => {\n  // get array of manual and regular processors ids.\n  const ids = [...availableProcessors().map(({ processor_type }) => processor_type), ...availableManualPaymentMethods().map(({ id }) => id)];\n  // selected processor is available.\n  if (ids.includes(selectedProcessor.id)) return;\n  // set to first if we have one, otherwise unset.\n  selectedProcessor.id = ids?.length ? ids?.[0] : null;\n};\n\n/**\n * Look through available methods and maybe switch if the processor has been removed.\n */\nconst maybeUpdateMethod = () => {\n  // get method ids.\n  const ids = (availableMethodTypes() || []).map(({ id }) => id);\n  // if the processor is not mollie, unset the method.\n  if (selectedProcessor?.id !== 'mollie') {\n    selectedProcessor.method = null;\n    return;\n  }\n  // selected method is available\n  if (ids.includes(selectedProcessor.method)) return;\n  // if the current method is not available, set the first method.\n  selectedProcessor.method = ids?.length ? ids?.[0] : null;\n};\n\n// when the checkout changes, maybe update selection.\nonChangeCheckout('checkout', () => {\n  maybeUpdateProcessor();\n  maybeUpdateMethod();\n});\nonChangeProcessor('id', () => maybeUpdateProcessor());\n\n// when processors and methods are first loaded, select first one.\nonChange('processors', () => maybeUpdateProcessor());\nonChange('methods', () => maybeUpdateMethod());\n"],"version":3}
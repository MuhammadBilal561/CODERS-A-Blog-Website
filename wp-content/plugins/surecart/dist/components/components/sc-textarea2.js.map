{"file":"sc-textarea2.js","mappings":";;;;;AAAA,MAAM,aAAa,GAAG,guHAAguH;;ACItvH;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kzBAgUiB,eAAO,CAAC,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/ui/sc-textarea/sc-textarea.css?tag=sc-textarea&encapsulation=shadow","./src/components/ui/sc-textarea/sc-textarea.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n.textarea {\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-family: var(--sc-input-font-family);\n  font-weight: var(--sc-input-font-weight);\n  line-height: var(--sc-line-height-normal);\n  letter-spacing: var(--sc-input-letter-spacing);\n  vertical-align: middle;\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) color, var(--sc-input-transition, var(--sc-transition-medium)) border, var(--sc-input-transition, var(--sc-transition-medium)) box-shadow,\n    var(--sc-input-transition, var(--sc-transition-medium)) background-color;\n  cursor: text;\n}\n/* Standard textareas */\n.textarea--standard {\n  background-color: var(--sc-input-background-color);\n  border: solid var(--sc-input-border-width) var(--sc-input-border-color);\n}\n.textarea--standard:hover:not(.textarea--disabled) {\n  background-color: var(--sc-input-background-color-hover);\n  border-color: var(--sc-input-border-color-hover);\n}\n.textarea--standard:hover:not(.textarea--disabled) .textarea__control {\n  color: var(--sc-input-color-hover);\n}\n.textarea--standard.textarea--focused:not(.textarea--disabled) {\n  background-color: var(--sc-input-background-color-focus);\n  border-color: var(--sc-input-border-color-focus);\n  color: var(--sc-input-color-focus);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-input-focus-ring-color);\n}\n.textarea--standard.textarea--focused:not(.textarea--disabled) .textarea__control {\n  color: var(--sc-input-color-focus);\n}\n.textarea--standard.textarea--disabled {\n  background-color: var(--sc-input-background-color-disabled);\n  border-color: var(--sc-input-border-color-disabled);\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n.textarea--standard.textarea--disabled .textarea__control {\n  color: var(--sc-input-color-disabled);\n}\n.textarea--standard.textarea--disabled .textarea__control::placeholder {\n  color: var(--sc-input-placeholder-color-disabled);\n}\n/* Filled textareas */\n.textarea--filled {\n  border: none;\n  background-color: var(--sc-input-filled-background-color);\n  color: var(--sc-input-color);\n}\n.textarea--filled:hover:not(.textarea--disabled) {\n  background-color: var(--sc-input-filled-background-color-hover);\n}\n.textarea--filled.textarea--focused:not(.textarea--disabled) {\n  background-color: var(--sc-input-filled-background-color-focus);\n  outline: var(--sc-focus-ring);\n  outline-offset: var(--sc-focus-ring-offset);\n}\n.textarea--filled.textarea--disabled {\n  background-color: var(--sc-input-filled-background-color-disabled);\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n.textarea__control {\n  flex: 1 1 auto;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: 1.4;\n  color: var(--sc-input-color);\n  border: none;\n  background: none;\n  box-shadow: none;\n  cursor: inherit;\n  -webkit-appearance: none;\n}\n.textarea__control::-webkit-search-decoration,\n.textarea__control::-webkit-search-cancel-button,\n.textarea__control::-webkit-search-results-button,\n.textarea__control::-webkit-search-results-decoration {\n  -webkit-appearance: none;\n}\n.textarea__control::placeholder {\n  color: var(--sc-input-placeholder-color);\n  user-select: none;\n}\n.textarea__control:focus {\n  outline: none;\n}\n/*\n * Size modifiers\n */\n.textarea--small {\n  border-radius: var(--sc-input-border-radius-small);\n  font-size: var(--sc-input-font-size-small);\n}\n.textarea--small .textarea__control {\n  padding: 0.5em var(--sc-input-spacing-small);\n}\n.textarea--medium {\n  border-radius: var(--sc-input-border-radius-medium);\n  font-size: var(--sc-input-font-size-medium);\n}\n.textarea--medium .textarea__control {\n  padding: 0.5em var(--sc-input-spacing-medium);\n}\n.textarea--large {\n  border-radius: var(--sc-input-border-radius-large);\n  font-size: var(--sc-input-font-size-large);\n}\n.textarea--large .textarea__control {\n  padding: 0.5em var(--sc-input-spacing-large);\n}\n/*\n * Resize types\n */\n.textarea--resize-none .textarea__control {\n  resize: none;\n}\n.textarea--resize-vertical .textarea__control {\n  resize: vertical;\n}\n.textarea--resize-auto .textarea__control {\n  height: auto;\n  resize: none;\n}\n\n.textarea__char-limit-warning{\n  margin-top: var(--sc-input-spacing-small);\n  color: var(--sc-input-help-text-color);\n  font-size: var(--sc-input-help-text-font-size-medium);\n}\n","import { Component, h, State, Prop, Element, Watch, Event, EventEmitter, Method } from '@stencil/core';\nimport { sprintf, __ } from '@wordpress/i18n';\nimport { FormSubmitController } from '../../../functions/form-data';\n\nconst CHAR_LIMIT_THRESHOLD = 20;\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n */\n@Component({\n  tag: 'sc-textarea',\n  styleUrl: 'sc-textarea.css',\n  shadow: true,\n})\nexport class ScTextarea {\n  private inputId: string = `textarea-${++id}`;\n  private helpId = `textarea-help-text-${id}`;\n  private labelId = `textarea-label-${id}`;\n\n  @Element() el: HTMLScTextareaElement;\n\n  private formController: any;\n\n  private input: HTMLTextAreaElement;\n  private resizeObserver: ResizeObserver;\n\n  @State() private hasFocus = false;\n  @State() private showCharLimit = false;\n\n  /** The textarea's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The textarea's name attribute. */\n  @Prop() name: string;\n\n  /** The textarea's value attribute. */\n  @Prop() value = '';\n\n  /** Draws a filled textarea. */\n  @Prop({ reflect: true }) filled: boolean = false;\n\n  /** The textarea's label. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The textarea's help text. Alternatively, you can use the help-text slot. */\n  @Prop() help = '';\n\n  /** The textarea's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** The number of rows to display by default. */\n  @Prop() rows: number = 4;\n\n  /** Controls how the textarea can be resized. */\n  @Prop() resize: 'none' | 'vertical' | 'auto' = 'vertical';\n\n  /** Disables the textarea. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the textarea readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** The minimum length of input that will be considered valid. */\n  @Prop() minlength: number;\n\n  /** The maximum length of input that will be considered valid. */\n  @Prop() maxlength: number;\n\n  /** Makes the textarea a required field. */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, and `maxlength` using the browser's constraint validation API.\n   */\n  @Prop({ reflect: true }) invalid: boolean = false;\n\n  /** The textarea's autocapitalize attribute. */\n  @Prop() autocapitalize: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\n\n  /** The textarea's autocorrect attribute. */\n  @Prop() autocorrect: string;\n\n  /** The textarea's autocomplete attribute. */\n  @Prop() autocomplete: string;\n\n  /** The textarea's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /**\n   * The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\n   * keyboards.\n   */\n  @Prop() enterkeyhint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n\n  /** Enables spell checking on the textarea. */\n  @Prop() spellcheck: boolean;\n\n  /** The textarea's inputmode attribute. */\n  @Prop() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  @Event() scChange: EventEmitter<void>;\n  @Event() scInput: EventEmitter<void>;\n  @Event() scBlur: EventEmitter<void>;\n  @Event() scFocus: EventEmitter<void>;\n\n  @Watch('rows')\n  handleRowsChange() {\n    this.setTextareaHeight();\n  }\n\n  @Watch('value')\n  handleValueChange() {\n    this.invalid = !this.input.checkValidity();\n    this.showCharLimit = this.maxlength - this.value.length <= CHAR_LIMIT_THRESHOLD;\n  }\n\n  @Watch('disabled')\n  handleDisabledChange() {\n    // Disabled form controls are always valid, so we need to recheck validity when the state changes\n    this.input.disabled = this.disabled;\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Sets focus on the input. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.focus(options);\n  }\n\n  /** Sets focus on the textarea. */\n  focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the textarea. */\n  blur() {\n    this.input.blur();\n  }\n\n  /** Selects all the text in the textarea. */\n  select() {\n    this.input.select();\n  }\n\n  /** Gets or sets the textarea's scroll position. */\n  scrollPosition(position?: { top?: number; left?: number }): { top: number; left: number } | undefined {\n    if (position) {\n      if (typeof position.top === 'number') this.input.scrollTop = position.top;\n      if (typeof position.left === 'number') this.input.scrollLeft = position.left;\n      return;\n    }\n\n    // eslint-disable-next-line consistent-return\n    return {\n      top: this.input.scrollTop,\n      left: this.input.scrollTop,\n    };\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection: 'forward' | 'backward' | 'none' = 'none') {\n    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  setRangeText(replacement: string, start: number, end: number, selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve') {\n    this.input.setRangeText(replacement, start, end, selectMode);\n\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.scInput.emit();\n    }\n\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.setTextareaHeight();\n      this.scInput.emit();\n      this.scChange.emit();\n    }\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleChange() {\n    this.value = this.input.value;\n    this.setTextareaHeight();\n    this.scChange.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleInput() {\n    this.value = this.input.value;\n    this.setTextareaHeight();\n    this.scInput.emit();\n  }\n\n  componentWillLoad() {\n    if (!window?.ResizeObserver) {\n      return;\n    }\n    this.resizeObserver = new window.ResizeObserver(() => this.setTextareaHeight());\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el).addFormData();\n    if (!window?.ResizeObserver) {\n      return;\n    }\n    this.resizeObserver.observe(this.input);\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n    this.resizeObserver.unobserve(this.input);\n  }\n\n  setTextareaHeight() {\n    if (this.resize === 'auto') {\n      this.input.style.height = 'auto';\n      this.input.style.height = `${this.input.scrollHeight}px`;\n    } else {\n      (this.input.style.height as string | undefined) = undefined;\n    }\n  }\n\n  render() {\n    return (\n      <div\n        part=\"form-control\"\n        class={{\n          'form-control': true,\n          'form-control--small': this.size === 'small',\n          'form-control--medium': this.size === 'medium',\n          'form-control--large': this.size === 'large',\n        }}\n      >\n        <sc-form-control\n          exportparts=\"label, help-text, form-control\"\n          size={this.size}\n          required={this.required}\n          label={this.label}\n          showLabel={this.showLabel}\n          help={this.help}\n          inputId={this.inputId}\n          helpId={this.helpId}\n          labelId={this.labelId}\n          name={this.name}\n        >\n          <div part=\"form-control-input\" class=\"form-control-input\">\n            <div\n              part=\"base\"\n              class={{\n                'textarea': true,\n                'textarea--small': this.size === 'small',\n                'textarea--medium': this.size === 'medium',\n                'textarea--large': this.size === 'large',\n                'textarea--standard': !this.filled,\n                'textarea--filled': this.filled,\n                'textarea--disabled': this.disabled,\n                'textarea--focused': this.hasFocus,\n                'textarea--empty': !this.value,\n                'textarea--invalid': this.invalid,\n                'textarea--resize-none': this.resize === 'none',\n                'textarea--resize-vertical': this.resize === 'vertical',\n                'textarea--resize-auto': this.resize === 'auto',\n              }}\n            >\n              <textarea\n                part=\"textarea\"\n                ref={el => (this.input = el as HTMLTextAreaElement)}\n                id=\"input\"\n                class=\"textarea__control\"\n                name={this.name}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                placeholder={this.placeholder}\n                rows={this.rows}\n                minlength={this.minlength}\n                maxlength={this.maxlength}\n                autocapitalize={this.autocapitalize}\n                autocorrect={this.autocorrect}\n                autofocus={this.autofocus}\n                spellcheck={this.spellcheck}\n                enterkeyhint={this.enterkeyhint}\n                inputmode={this.inputmode}\n                aria-describedby=\"help-text\"\n                onChange={() => this.handleChange()}\n                onInput={() => this.handleInput()}\n                onFocus={() => this.handleFocus()}\n                onBlur={() => this.handleBlur()}\n                onKeyDown={(e) => e.stopPropagation()}\n              ></textarea>\n            </div>\n            {this.showCharLimit && (\n              <div slot=\"help\" class={'textarea__char-limit-warning'}>\n                {sprintf(__('%d characters remaining', 'surecart'), this.maxlength - this.input.value.length)}\n              </div>\n            )}\n          </div>\n        </sc-form-control>\n      </div>\n    );\n  }\n}\n"],"version":3}
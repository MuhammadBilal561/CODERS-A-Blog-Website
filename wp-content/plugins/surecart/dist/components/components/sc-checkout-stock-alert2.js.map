{"file":"sc-checkout-stock-alert2.js","mappings":";;;;;;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,seAAse;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uFCoF9d,UAAE;;;;;;;;;;;;;;;;;;;;;;sgBA+BN,UAAE,+BAA+B,UAAE;QAIrD,UAAE;QACF,UAAE,8LAKwB,UAAE,kHAE3B,UAAE;;;;;;mHA+BR,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/controllers/checkout-form/checkout/checkout-stock-alert/sc-checkout-stock-alert.scss?tag=sc-checkout-stock-alert&encapsulation=shadow","./src/components/controllers/checkout-form/checkout/checkout-stock-alert/sc-checkout-stock-alert.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nsc-table {\n  height: auto;\n}\n\nh4 {\n  display: block;\n  margin: 0;\n  font-weight: var(--sc-font-weight-bold);\n  font-size: var(--sc-font-size-medium);\n}\n\n.stock-alert {\n  --body-spacing: var(--sc-spacing-x-large);\n  --width: 500px;\n\n  &__image {\n    width: 50px;\n    height: 50px;\n    object-fit: cover;\n    margin-right: 10px;\n    display: block;\n  }\n  &__quantity {\n    color: var(--sc-color-gray-500);\n    font-weight: var(--sc-font-weight-bold);\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    gap: var(--sc-spacing-xx-small);\n  }\n}\n","import { Component, Host, h, State, EventEmitter, Event } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { Checkout, LineItemData, Product } from 'src/types';\nimport { state as checkoutState } from '@store/checkout';\nimport { updateCheckout } from '@services/session';\nimport { currentFormState } from '@store/form/getters';\n\n/**\n * This component listens for stock requirements and displays a dialog to the user.\n */\n@Component({\n  tag: 'sc-checkout-stock-alert',\n  styleUrl: 'sc-checkout-stock-alert.scss',\n  shadow: true,\n})\nexport class ScCheckoutStockAlert {\n  /** Stock errors */\n  @State() stockErrors: Array<any> = [];\n\n  /** Toggle line item event */\n  @Event() scUpdateLineItem: EventEmitter<LineItemData>;\n\n  /** Is it busy */\n  @State() busy: boolean;\n\n  /** Update stock error. */\n  @State() error: string;\n\n  /** Get the out of stock line items. */\n  getOutOfStockLineItems() {\n    return (checkoutState.checkout?.line_items?.data || []).filter(lineItem => {\n      const product = lineItem.price?.product as Product;\n\n      // this item is not out of stock, don't include it.\n      if (lineItem?.purchasable_status !== 'out_of_stock') return false;\n\n      // check the variant stock.\n      if (lineItem?.variant?.id) {\n        return lineItem?.variant?.available_stock < lineItem.quantity;\n      }\n\n      return product?.available_stock < lineItem.quantity;\n    });\n  }\n\n  /**\n   * Update the checkout line items stock to the max available.\n   */\n  async onSubmit() {\n    const lineItems = this.getOutOfStockLineItems().map(lineItem => {\n      const product = lineItem.price?.product as Product;\n\n      if (lineItem?.variant?.id) {\n        return {\n          ...lineItem,\n          quantity: Math.max(lineItem?.variant?.available_stock || 0, 0),\n        };\n      }\n\n      return {\n        ...lineItem,\n        quantity: Math.max(product?.available_stock || 0, 0),\n      };\n    });\n\n    try {\n      this.busy = true;\n      checkoutState.checkout = (await updateCheckout({\n        id: checkoutState.checkout.id,\n        data: {\n          line_items: (lineItems || [])\n            .filter(lineItem => !!lineItem.quantity)\n            .map(lineItem => {\n              return {\n                id: lineItem.id,\n                price_id: lineItem.price?.id,\n                quantity: lineItem.quantity,\n                ...(lineItem?.variant?.id ? { variant: lineItem.variant.id } : {}),\n              };\n            }),\n        },\n      })) as Checkout;\n    } catch (error) {\n      const additionalErrors = (error?.additional_errors || []).map(error => error?.message).filter(n => n);\n      this.error = `${error?.message || __('Something went wrong.', 'surecart')} ${additionalErrors?.length && ` ${additionalErrors.join('. ')}`}`;\n    } finally {\n      this.busy = false;\n    }\n  }\n\n  render() {\n    // stock errors.\n    const stockErrors = (this.getOutOfStockLineItems() || []).map(lineItem => {\n      const product = lineItem.price?.product as Product;\n      const variantImage = typeof lineItem?.variant?.image !== 'string' ? lineItem?.variant?.image?.url : null;\n\n      const available_stock = lineItem?.variant?.id ? lineItem?.variant?.available_stock : product?.available_stock;\n\n      return {\n        name: product?.name,\n        image_url: variantImage || product?.image_url,\n        quantity: lineItem.quantity,\n        available_stock,\n      };\n    });\n\n    // we have at least one quantity change.\n    const hasOutOfStockItems = stockErrors?.some(item => item?.available_stock < 1);\n\n    return (\n      <Host>\n        <sc-dialog open={!!stockErrors.length && currentFormState() === 'draft'} noHeader={true} onScRequestClose={e => e.preventDefault()} class=\"stock-alert\">\n          <sc-dashboard-module class=\"subscription-cancel\" error={this.error} style={{ '--sc-dashboard-module-spacing': '1em' }}>\n            <sc-flex slot=\"heading\" align-items=\"center\" justify-content=\"flex-start\">\n              <sc-icon name=\"alert-circle\" style={{ color: 'var(--sc-color-primary-500' }}></sc-icon>\n              {hasOutOfStockItems ? __('Out of Stock', 'surecart') : __('Quantity Update', 'surecart')}\n            </sc-flex>\n            <span slot=\"description\">\n              {hasOutOfStockItems\n                ? __('Some items are no longer available. Your cart will be updated.', 'surecart')\n                : __('Available quantities for these items have changed. Your cart will be updated.', 'surecart')}\n            </span>\n\n            <sc-card no-padding>\n              <sc-table>\n                <sc-table-cell slot=\"head\">{__('Description', 'surecart')}</sc-table-cell>\n                <sc-table-cell slot=\"head\" style={{ width: '100px', textAlign: 'right' }}>\n                  {__('Quantity', 'surecart')}\n                </sc-table-cell>\n\n                {stockErrors.map((item, index) => {\n                  const isLastChild = index === stockErrors.length - 1;\n                  return (\n                    <sc-table-row\n                      style={{\n                        '--columns': '2',\n                        ...(isLastChild ? { border: 'none' } : {}),\n                      }}\n                    >\n                      <sc-table-cell>\n                        <sc-flex justifyContent=\"flex-start\" alignItems=\"center\">\n                          <img class=\"stock-alert__image\" src={`https://surecart.com/cdn-cgi/image/fit=scale-down,format=auto,width=100/${item?.image_url}`} />\n                          <h4>{item.name}</h4>\n                        </sc-flex>\n                      </sc-table-cell>\n                      <sc-table-cell style={{ width: '100px', textAlign: 'right' }}>\n                        <span class=\"stock-alert__quantity\">\n                          <span>{item?.quantity}</span> <sc-icon name=\"arrow-right\" /> <span>{Math.max(item?.available_stock, 0)}</span>\n                        </span>\n                      </sc-table-cell>\n                    </sc-table-row>\n                  );\n                })}\n              </sc-table>\n            </sc-card>\n          </sc-dashboard-module>\n\n          <sc-button slot=\"footer\" type=\"primary\" loading={this.busy} onClick={() => this.onSubmit()}>\n            {__('Continue', 'surecart')}\n            <sc-icon name=\"arrow-right\" slot=\"suffix\" />\n          </sc-button>\n\n          {this.busy && <sc-block-ui spinner></sc-block-ui>}\n        </sc-dialog>\n      </Host>\n    );\n  }\n}\n"],"version":3}
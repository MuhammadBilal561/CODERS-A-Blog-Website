{"file":"sc-icon2.js","mappings":";;;AAMA,MAAM,SAAS,GAAG,IAAI,GAAG,EAA6B,CAAC;AAEhD,MAAM,WAAW,GAAG,CAAC,GAAW;EACrC,IAAI,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACtB,OAAO,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;GAC3B;OAAM;IACL,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAM,QAAQ;MAC5C,IAAI,QAAQ,CAAC,EAAE,EAAE;QACf,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,GAAG,CAAC,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtC,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC;QAElC,OAAO;UACL,EAAE,EAAE,QAAQ,CAAC,EAAE;UACf,MAAM,EAAE,QAAQ,CAAC,MAAM;UACvB,GAAG,EAAE,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,KAAK,GAAG,GAAG,CAAC,SAAS,GAAG,EAAE;SACrE,CAAC;OACH;WAAM;QACL,OAAO;UACL,EAAE,EAAE,QAAQ,CAAC,EAAE;UACf,MAAM,EAAE,QAAQ,CAAC,MAAM;UACvB,GAAG,EAAE,IAAI;SACV,CAAC;OACH;KACF,CAAsB,CAAC;IAExB,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC5B,OAAO,OAAO,CAAC;GAChB;AACH,CAAC;;ACnCD,MAAM,SAAS,GAAG,4OAA4O;;ACK9P;;;AAGA;kBACkB,UAAE;gBACJ,UAAE;mBACC,UAAE;kBACH,UAAE;iBACH,UAAE;gBACH,UAAE;gBACF,UAAE;cACJ,UAAE;kBACE,UAAE;;AAGpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/ui/icon/request.ts","./src/components/ui/icon/sc-icon.css?tag=sc-icon&encapsulation=shadow","./src/components/ui/icon/sc-icon.tsx"],"sourcesContent":["interface IconFile {\n  ok: boolean;\n  status: number;\n  svg: string;\n}\n\nconst iconFiles = new Map<string, Promise<IconFile>>();\n\nexport const requestIcon = (url: string) => {\n  if (iconFiles.has(url)) {\n    return iconFiles.get(url);\n  } else {\n    const request = fetch(url).then(async response => {\n      if (response.ok) {\n        const div = document.createElement('div');\n        div.innerHTML = await response.text();\n        const svg = div.firstElementChild;\n\n        return {\n          ok: response.ok,\n          status: response.status,\n          svg: svg && svg.tagName.toLowerCase() === 'svg' ? svg.outerHTML : '',\n        };\n      } else {\n        return {\n          ok: response.ok,\n          status: response.status,\n          svg: null,\n        };\n      }\n    }) as Promise<IconFile>;\n\n    iconFiles.set(url, request);\n    return request;\n  }\n};\n",":host {\n  --width: 1em;\n  --height: 1em;\n  display: inline-block;\n  width: var(--width);\n  height: var(--height);\n  contain: strict;\n  box-sizing: content-box !important;\n}\n.icon,\nsvg {\n  display: block;\n  height: 100%;\n  width: 100%;\n  stroke-width: var(--sc-icon-stroke-width, 2px);\n}\n","import { Component, Watch, h, Prop, State, Event, EventEmitter } from '@stencil/core';\nimport { getIconLibrary } from './library';\nimport { requestIcon } from './request';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * The icon's label used for accessibility.\n */\nconst LABEL_MAPPINGS = {\n  'chevron-down': __('Open', 'surecart'),\n  'chevron-up': __('Close', 'surecart'),\n  'chevron-right': __('Next', 'surecart'),\n  'chevron-left': __('Previous', 'surecart'),\n  'arrow-right': __('Next', 'surecart'),\n  'arrow-left': __('Previous', 'surecart'),\n  'arrow-down': __('Down', 'surecart'),\n  'arrow-up': __('Up', 'surecart'),\n  'alert-circle': __('Alert', 'surecart'),\n};\n\nconst parser = new DOMParser();\n\n@Component({\n  tag: 'sc-icon',\n  styleUrl: 'sc-icon.css',\n  assetsDirs: ['icon-assets'],\n  shadow: true,\n})\nexport class ScIcon {\n  @State() private svg = '';\n\n  /** The name of the icon to draw. */\n  @Prop({ reflect: true }) name: string;\n\n  /** An external URL of an SVG file. */\n  @Prop() src: string;\n\n  /** An alternative description to use for accessibility. If omitted, the name or src will be used to generate it. */\n  @Prop() label: string;\n\n  /** The name of a registered custom icon library. */\n  @Prop() library = 'default';\n\n  /** Emitted when the icon has loaded. */\n  @Event() scLoad: EventEmitter<void>;\n\n  /** @internal Fetches the icon and redraws it. Used to handle library registrations. */\n  redraw() {\n    this.setIcon();\n  }\n\n  componentWillLoad() {\n    this.setIcon();\n  }\n\n  getLabel() {\n    let label = '';\n    if (this.label) {\n      label = LABEL_MAPPINGS?.[this.label] || this.label;\n    } else if (this.name) {\n      label = (LABEL_MAPPINGS?.[this.name] || this.name).replace(/-/g, ' ');\n    } else if (this.src) {\n      label = this.src.replace(/.*\\//, '').replace(/-/g, ' ').replace(/\\.svg/i, '');\n    }\n\n    return label;\n  }\n\n  @Watch('name')\n  @Watch('src')\n  @Watch('library')\n  async setIcon() {\n    const library = getIconLibrary(this.library);\n    const url = this.getUrl();\n    if (url) {\n      try {\n        const file = await requestIcon(url)!;\n        if (url !== this.getUrl()) {\n          // If the url has changed while fetching the icon, ignore this request\n          return;\n        } else if (file.ok) {\n          const doc = parser.parseFromString(file.svg, 'text/html');\n          const svgEl = doc.body.querySelector('svg');\n\n          if (svgEl) {\n            if (library && library.mutator) {\n              library.mutator(svgEl);\n            }\n\n            this.svg = svgEl.outerHTML;\n            this.scLoad.emit();\n          } else {\n            this.svg = '';\n            console.error({ status: file?.status });\n          }\n        } else {\n          this.svg = '';\n          console.error({ status: file?.status });\n        }\n      } catch {\n        console.error({ status: -1 });\n      }\n    } else if (this.svg) {\n      // If we can't resolve a URL and an icon was previously set, remove it\n      this.svg = '';\n    }\n  }\n\n  private getUrl(): string {\n    const library = getIconLibrary(this.library);\n    if (this.name && library) {\n      return library.resolver(this.name);\n    } else {\n      return this.src;\n    }\n  }\n\n  render() {\n    return <div part=\"base\" class=\"icon\" role=\"img\" aria-label={this.getLabel()} innerHTML={this.svg}></div>;\n  }\n}\n"],"version":3}
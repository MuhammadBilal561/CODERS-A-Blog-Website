{"file":"sc-quantity-select2.js","mappings":";;;;AAAA,MAAM,mBAAmB,GAAG,0pIAA0pI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDC6FhqI,UAAE,07BAiCF,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/ui/quantity-select/sc-quantity-select.scss?tag=sc-quantity-select&encapsulation=shadow","./src/components/ui/quantity-select/sc-quantity-select.tsx"],"sourcesContent":[":host {\n  --focus-ring: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n  --border-radius: var(--sc-quantity-border-radius, var(--sc-input-border-radius-small));\n  display: inline-block;\n}\n\n.input__control {\n  text-align: center;\n  line-height: 1;\n  border: none;\n  flex: 1;\n  max-width: var(--sc-quantity-input-max-width, 35px);\n  background-color: var(--sc-input-control-background-color, var(--sc-color-white));\n  color: var(--sc-input-control-color, var(--sc-color-black));\n  -moz-appearance: textfield;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  &::-webkit-search-decoration,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button,\n  &::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    box-shadow: 0 0 0 var(--sc-input-height-large) var(--sc-input-background-color-hover) inset !important;\n    -webkit-text-fill-color: var(--sc-input-color);\n  }\n\n  &::placeholder {\n    color: var(--sc-input-placeholder-color);\n    user-select: none;\n  }\n\n  &:focus {\n    outline: none;\n  }\n}\n\n.quantity--trigger {\n  cursor: pointer;\n  white-space: nowrap;\n}\n\n.quantity {\n  position: relative;\n  display: inline-block;\n  width: var(--sc-quantity-select-width, 100px);\n  height: var(--sc-quantity-control-height, var(--sc-input-height-small));\n  display: flex;\n  align-items: stretch;\n  font-family: var(--sc-input-font-family);\n  font-weight: var(--sc-input-font-weight);\n  letter-spacing: var(--sc-input-letter-spacing);\n  background-color: var(--sc-input-background-color);\n  border: var(--sc-input-border);\n  border-radius: var(--border-radius);\n  vertical-align: middle;\n  box-shadow: var(--sc-input-box-shadow);\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) color, var(--sc-input-transition, var(--sc-transition-medium)) border,\n    var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  &:hover:not(.quantity--disabled) {\n    background-color: var(--sc-input-background-color-hover);\n    border-color: var(--sc-input-border-color-hover);\n\n    .quantity__control {\n      color: var(--sc-input-color-hover);\n    }\n  }\n\n  &.quantity--focused:not(.quantity--disabled) {\n    background-color: var(--sc-input-background-color-focus);\n    border-color: var(--sc-input-border-color-focus);\n    box-shadow: var(--focus-ring);\n\n    .quantity__control {\n      color: var(--sc-input-color-focus);\n    }\n  }\n\n  &.quantity--disabled {\n    background-color: var(--sc-input-background-color-disabled);\n    border-color: var(--sc-input-border-color-disabled);\n    opacity: 0.5;\n    cursor: not-allowed;\n\n    .input__control {\n      color: var(--sc-input-color-disabled);\n\n      &::placeholder {\n        color: var(--sc-input-placeholder-color-disabled);\n      }\n    }\n  }\n}\n\n.button__decrease,\n.button__increase {\n  display: inline-block;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 0;\n  height: auto;\n  top: 1px;\n  bottom: 1px;\n  width: 32px;\n  background: var(--sc-input-background-color);\n  color: var(--sc-input-help-text-color);\n  cursor: pointer;\n  font-size: 13px;\n  user-select: none;\n  border-width: 0;\n  padding: 0;\n\n  &:hover:not(.button--disabled) {\n    .quantity__control {\n      color: var(--sc-input-color-hover);\n    }\n  }\n\n  &.button--disabled {\n    background-color: var(--sc-input-background-color-disabled);\n    border-color: var(--sc-input-border-color-disabled);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Small\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n.quantity--small {\n  width: var(--sc-quantity-select-width-small, 76px);\n  height: var(--sc-quantity-control-height-small, 26px);\n\n  .button__decrease,\n  .button__increase {\n    width: 24px;\n    border: none;\n  }\n  .input__control {\n    max-width: 24px;\n  }\n}\n\n.button__decrease {\n  left: 1px;\n  border-radius: var(--border-radius) 0 0 var(--border-radius);\n  border-right: var(--sc-input-border);\n}\n.button__increase {\n  right: 1px;\n  border-radius: 0 var(--border-radius) var(--border-radius) 0;\n  border-left: var(--sc-input-border);\n}\n\n.quantity--is-rtl {\n  .button__decrease {\n    right: 1px;\n    border-left: var(--sc-input-border);\n    border-right: 0;\n  }\n  .button__increase {\n    left: 1px;\n    border-right: var(--sc-input-border);\n    border-left: 0;\n  }\n}\n","import { Component, h, Prop, Element, Event, EventEmitter } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { isRtl } from '../../../functions/page-align';\n\n/**\n * @part base - The elements base wrapper.\n * @part input - The input control.\n * @part minus - The minus control.\n * @part minus-icon - The minus icon.\n * @part plus - The plus control.\n * @part plus-icon - The plus icon.\n */\n@Component({\n  tag: 'sc-quantity-select',\n  styleUrl: 'sc-quantity-select.scss',\n  shadow: true,\n})\nexport class ScQuantitySelect {\n  @Element() el: HTMLScQuantitySelectElement;\n  private input: HTMLInputElement;\n\n  @Prop() clickEl?: HTMLElement;\n\n  @Prop() disabled: boolean;\n  @Prop() max: number = Infinity;\n  @Prop() min: number = 1;\n  @Prop({ mutable: true, reflect: true }) quantity: number = 0;\n\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  @Event({ cancelable: true }) scChange: EventEmitter<number>;\n\n  /** Emitted when the control receives input. */\n  @Event({ cancelable: true }) scInput: EventEmitter<number>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  decrease() {\n    if (this.disabled) return;\n    this.quantity = Math.max(this.quantity - 1, this.min);\n    this.scChange.emit(this.quantity);\n    this.scInput.emit(this.quantity);\n  }\n\n  increase() {\n    if (this.disabled) return;\n    this.quantity = Math.min(this.quantity + 1, this.max);\n    this.scChange.emit(this.quantity);\n    this.scInput.emit(this.quantity);\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleChange() {\n    this.quantity = parseInt(this.input.value) > this.max ? this.max : parseInt(this.input.value);\n    this.scChange.emit(this.quantity);\n  }\n\n  handleInput() {\n    this.quantity = parseInt(this.input.value);\n    this.scInput.emit(this.quantity);\n  }\n\n  render() {\n    return (\n      <div\n        part=\"base\"\n        class={{\n          'quantity': true,\n          // States\n          'quantity--focused': this.hasFocus,\n          'quantity--disabled': this.disabled,\n          'quantity--is-rtl': isRtl(),\n          'quantity--small': this.size === 'small',\n        }}\n      >\n        <button\n          part=\"minus\"\n          aria-label={__('Decrease quantity by one.', 'surecart')}\n          aria-disabled={this.disabled || (this.quantity <= this.min && this.min > 1)}\n          class={{ 'button__decrease': true, 'button--disabled': this.quantity <= this.min && this.min > 1 }}\n          onClick={() => this.quantity > this.min && this.decrease()}\n          disabled={this.disabled || (this.quantity <= this.min && this.min > 1)}\n        >\n          <sc-icon name=\"minus\" exportparts=\"base:minus__icon\"></sc-icon>\n        </button>\n\n        <input\n          part=\"input\"\n          class=\"input__control\"\n          ref={el => (this.input = el as HTMLInputElement)}\n          step=\"1\"\n          type=\"number\"\n          max={this.max}\n          min={this.min}\n          value={this.quantity}\n          disabled={this.disabled}\n          autocomplete=\"off\"\n          role=\"spinbutton\"\n          aria-valuemax={this.max}\n          aria-valuemin={this.min}\n          aria-valuenow={this.quantity}\n          aria-disabled={this.disabled}\n          onChange={() => this.handleChange()}\n          onInput={() => this.handleInput()}\n          onFocus={() => this.handleFocus()}\n          onBlur={() => this.handleBlur()}\n        />\n\n        <button\n          part=\"plus\"\n          aria-label={__('Increase quantity by one.', 'surecart')}\n          class={{ 'button__increase': true, 'button--disabled': this.quantity >= this.max }}\n          onClick={() => this.quantity < this.max && this.increase()}\n          aria-disabled={this.disabled || this.quantity >= this.max}\n          disabled={this.disabled || this.quantity >= this.max}\n        >\n          <sc-icon name=\"plus\" exportparts=\"base:plus__icon\"></sc-icon>\n        </button>\n      </div>\n    );\n  }\n}\n"],"version":3}
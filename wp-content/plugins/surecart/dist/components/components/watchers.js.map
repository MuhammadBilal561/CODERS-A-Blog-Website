{"file":"watchers.js","mappings":"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","names":[],"sources":["./src/store/product/events.ts","./src/store/product/getters.ts","./src/store/product/store.ts","./src/store/product/setters.ts","./src/store/product/watchers.ts"],"sourcesContent":["import { Price, Product } from 'src/types';\n\n/**\n * Product viewed event.\n */\nexport const productViewed = (product: Product, selectedPrice: Price, quantity = 1) => {\n  const event = new CustomEvent('scProductViewed', {\n    detail: {\n      id: product?.id,\n      name: product?.name,\n      price: selectedPrice,\n      permalink: product?.permalink,\n      prices: product?.prices,\n      variant_options: product?.variant_options?.data,\n      product_collections: product?.product_collections,\n      quantity,\n    },\n    bubbles: true,\n  });\n  document.dispatchEvent(event);\n};\n","import { Price, ProductState } from 'src/types';\n\n/**\n * Internal dependencies.\n */\nimport state from './store';\nimport { getSerializedState, isProductVariantOptionMissing, isProductVariantOptionSoldOut } from '@store/utils';\nimport { getVariantFromValues } from '../../functions/util';\n\n/**\n * Available product prices\n *\n * @param {string} productId - Product ID\n *\n * @returns {Price[]} - Returns an array of prices that are not archived\n */\nexport const availablePrices = (productId: string): Price[] => (state[productId]?.prices || []).filter(price => !price?.archived).sort((a, b) => a?.position - b?.position); // sort by position\n\n/**\n * Get Product\n */\nexport const getProduct = (productId?: string): ProductState => state[productId] ?? null;\n\n/**\n * Check if product label stock is enabled and not out of stock purchases are allowed.\n *\n * @returns {boolean} - Returns stock needs to be checked or not\n */\nexport const isStockNeedsToBeChecked = (productId: string) => !!(state?.[productId]?.product?.stock_enabled && !state?.[productId]?.product?.allow_out_of_stock_purchases);\n\n/**\n * Check if this option is out of stock base on the selected variant.\n */\nexport const isOptionSoldOut = (productId: string, optionNumber: number, option: string) =>\n  isProductVariantOptionSoldOut(optionNumber, option, state[productId].variantValues, state[productId].product);\n\n/**\n * Check if this option is out of stock base on the selected variant.\n */\nexport const isOptionMissing = (productId: string, optionNumber: number, option: string) =>\n  isProductVariantOptionMissing(optionNumber, option, state[productId].variantValues, state[productId].product);\n\n/**\n * Is product out of stock.\n *\n * @returns {boolean} - Returns true if product is out of stock\n */\nexport const isProductOutOfStock = (productId: string) => {\n  // If stock doesn't need to be checked, product is not out of stock.\n  if (!isStockNeedsToBeChecked(productId)) {\n    return false;\n  }\n\n  // If no variant is selected, check against product stock.\n  if (!state?.[productId]?.selectedVariant?.id) return state[productId].product?.available_stock <= 0;\n\n  // Check against selected variant's stock.\n  return state[productId].selectedVariant?.available_stock <= 0;\n};\n\n/**\n * Is the selected variant missing.\n */\nexport const isSelectedVariantMissing = (productId: string) =>\n  !!state?.[productId]?.variants?.length && getVariantFromValues({ variants: state[productId].variants, values: state[productId].variantValues })?.id === undefined;\n\n/**\n * Get product default state\n *\n * @returns {ProductState} - Returns the product state\n */\nexport const getDefaultState = (): { [key: string]: ProductState } => {\n  const { product: serializedProductState = {} } = getSerializedState();\n\n  return (\n    Object.values(serializedProductState as { [key: string]: ProductState }).reduce((acc, productState) => {\n      const { selectedPrice, product, selectedVariant } = productState || {};\n      const current: ProductState = {\n        ...productState,\n        quantity: 1,\n        total: null,\n        dialog: null,\n        busy: false,\n        error: null,\n        adHocAmount: selectedPrice?.amount || null,\n        disabled: selectedPrice?.archived || product?.archived,\n        line_item: {\n          price_id: selectedPrice?.id,\n          quantity: 1,\n          ...(selectedPrice?.ad_hoc ? { ad_hoc_amount: selectedPrice?.amount } : {}),\n          ...(selectedVariant?.id ? { variant_id: selectedVariant?.id } : {}),\n        },\n        variantValues: {\n          ...(selectedVariant?.option_1 ? { option_1: selectedVariant?.option_1 } : {}),\n          ...(selectedVariant?.option_2 ? { option_2: selectedVariant?.option_2 } : {}),\n          ...(selectedVariant?.option_3 ? { option_3: selectedVariant?.option_3 } : {}),\n        },\n      };\n\n      acc[product.id] = current;\n\n      return acc;\n    }, {}) || {}\n  );\n};\n\nexport const availableSubscriptionPrices = (productId: string) =>\n  (availablePrices(productId) || []).filter(price => price?.recurring_interval).sort((a, b) => a?.position - b?.position);\n\nexport const availableNonSubscriptionPrices = (productId: string) =>\n  (availablePrices(productId) || []).filter(price => !price?.recurring_interval).sort((a, b) => a?.position - b?.position);\n","import { createStore } from '@stencil/store';\nimport { ProductState } from 'src/types';\nimport { productViewed } from './events';\nimport './facebook';\nimport './google';\nimport { getDefaultState } from './getters';\n\ninterface Store {\n  [key: string]: ProductState;\n}\n\nconst defaultState: Store = getDefaultState();\n\nObject.values(defaultState)\n  .filter((stateProduct: ProductState) => stateProduct?.isProductPage)\n  .forEach((stateProduct: ProductState) => {\n    if (stateProduct?.product?.id) {\n      productViewed(stateProduct?.product, stateProduct?.selectedPrice, stateProduct?.quantity);\n    }\n  });\n\nconst store = createStore<Store>(defaultState, (newValue, oldValue) => {\n  return JSON.stringify(newValue) !== JSON.stringify(oldValue);\n});\n\nconst { state, onChange, on, dispose, forceUpdate } = store;\nexport default state;\nexport { state, onChange, on, dispose, forceUpdate };\n","import { ProductState } from 'src/types';\nimport state from './store';\n\n/**\n * Set the product\n *\n * @param {string} productId - Product ID\n * @param {Partial<ProductState>} product - Product object\n *\n * @returns {void}\n */\nexport const setProduct = (productId: string, product: Partial<ProductState>): void => {\n  if (!productId) return;\n  state[productId] = {\n    ...state[productId],\n    ...product,\n  };\n};\n","import { ProductState } from 'src/types';\nimport state, { on } from './store';\nimport { setProduct } from './setters';\nimport { getVariantFromValues } from '../../functions/util';\nimport { isStockNeedsToBeChecked } from './getters';\nimport { speak } from '@wordpress/a11y';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/** Handle set event on products store. */\non('set', (productId: string, newValue: ProductState, oldValue: ProductState) => {\n  if (newValue?.selectedPrice?.id !== oldValue?.selectedPrice?.id) {\n    updateSelectedPrice(productId, newValue);\n  }\n\n  // if variants change, check the stock.\n  if (newValue?.selectedVariant?.id !== oldValue?.selectedVariant?.id) {\n    handleStockWithSelectedVariant(productId);\n  }\n\n  const shouldUpdateLineItem =\n    !oldValue || ['selectedPrice', 'adHocAmount', 'quantity', 'selectedVariant'].some(key => JSON.stringify(newValue[key]) !== JSON.stringify(oldValue[key]));\n  if (shouldUpdateLineItem) {\n    setLineItem(productId);\n  }\n\n  const shouldUpdateVariants = !oldValue || JSON.stringify(newValue?.variantValues) !== JSON.stringify(oldValue?.variantValues);\n  if (shouldUpdateVariants) {\n    updateSelectedVariant(productId, newValue);\n  }\n});\n\n/**\n * Update the selected variant based on chosen values.\n */\nconst updateSelectedVariant = (productId: string, newValue: ProductState) => {\n  const matchedVariant = getVariantFromValues({ variants: state[productId].variants, values: newValue?.variantValues });\n\n  if (matchedVariant) {\n    setProduct(productId, { selectedVariant: matchedVariant });\n  }\n};\n\n/**\n * Handle when the selected variant changes.\n */\nconst handleStockWithSelectedVariant = (productId: string) => {\n  // make sure we have a selected variant and stock needs to be checked.\n  if (!state[productId].selectedVariant || !isStockNeedsToBeChecked) {\n    return;\n  }\n\n  // if available stock is less than the quantity, adjust the quantity to the max available.\n  if (state[productId]?.selectedVariant.available_stock < state[productId]?.quantity) {\n    state[productId].quantity = state[productId]?.selectedVariant.available_stock || 1;\n    speak(\n      sprintf(__('There are just %d items left in stock, and the quantity has been adjusted to %d.', 'surecart'), state[productId].quantity, state[productId].quantity),\n      'assertive',\n    );\n  }\n};\n\nconst updateSelectedPrice = (productId: string, newValue: ProductState) => {\n  setProduct(productId, {\n    // update the total when the selected price changes.\n    total: state[productId].adHocAmount || newValue?.selectedPrice?.amount || 0,\n    // set the ad hoc amount to the selected product amount.\n    adHocAmount: newValue?.selectedPrice?.amount,\n    // update disabled based on if price is archived or product is archived.\n    disabled: newValue?.selectedPrice?.archived || state[productId].product?.archived,\n  });\n};\n\nconst setLineItem = (productId: string) => {\n  setProduct(productId, {\n    line_item: {\n      price_id: state[productId]?.selectedPrice?.id,\n      quantity: Math.max(state[productId]?.selectedPrice?.ad_hoc ? 1 : state[productId].quantity, 1),\n      ...(state[productId]?.selectedPrice?.ad_hoc ? { ad_hoc_amount: state[productId]?.adHocAmount } : {}),\n      variant: state[productId].selectedVariant?.id,\n    },\n  });\n};\n"],"version":3}
{"file":"getters5.js","mappings":"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","names":["checkoutState"],"sources":["./src/store/processors/store.ts","./src/store/processors/getters.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport { ManualPaymentMethod, PaymentMethodType, Processor } from '../../types';\nimport { getSerializedState } from '@store/utils';\nconst { processors } = getSerializedState();\n\ninterface Store {\n  processors: Processor[];\n  methods: PaymentMethodType[];\n  manualPaymentMethods: ManualPaymentMethod[];\n  disabled: {\n    processors: string[];\n  };\n  sortOrder: {\n    processors: string[];\n    manualPaymentMethods: string[];\n    paymentMethods: {\n      mollie: string[];\n    };\n  };\n  instances: {\n    stripe?: any;\n    stripeElements: any;\n  };\n  config: {\n    stripe: {\n      paymentElement: boolean;\n    };\n  };\n}\n\nconst { state, onChange, on, dispose } = createStore<Store>(\n  {\n    processors: [],\n    methods: [],\n    manualPaymentMethods: [],\n    disabled: {\n      processors: [],\n    },\n    sortOrder: {\n      processors: ['stripe', 'paystack', 'paypal', 'mollie', 'mock'],\n      manualPaymentMethods: [],\n      paymentMethods: {\n        mollie: ['creditcard', 'paypal'],\n      },\n    },\n    instances: {\n      stripe: undefined,\n    },\n    config: {\n      stripe: {\n        paymentElement: false,\n      },\n    },\n    ...processors,\n  },\n  (newValue, oldValue) => {\n    return JSON.stringify(newValue) !== JSON.stringify(oldValue);\n  },\n);\n\nexport default state;\nexport { state, onChange, on, dispose };\n","import { sortByArray } from '../../functions/util';\nimport state from './store';\nimport { state as checkoutState } from '@store/checkout';\n\n/**\n * Gets a sorted array of available processors based on\n * checkout mode, recurring requirements, and if mollie is enabled.\n */\nexport const availableProcessors = () =>\n  sortByArray(state.processors, 'processor_type', state.sortOrder.processors) // sort.\n    .filter(processor => processor?.live_mode === (checkoutState?.mode === 'live')) // match mode.\n    .filter(processor => !(state.disabled.processors || []).includes(processor.processor_type)) // make sure it's not disabled.\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.recurring_enabled : true)) // recurring.\n    .filter((processor, _, filtered) => (filtered.some(p => p.processor_type === 'mollie') ? processor.processor_type === 'mollie' || processor.processor_type === 'mock' : true)); // only allow mollie if preset.\n\n/**\n * Gets the processor by type\n *\n * @param {string} type The processor type.\n *\n * @returns {Object | null} The processor data.\n */\nexport const getProcessorByType = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Gets an available processor type.\n */\nexport const getAvailableProcessor = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Check if there is any available credit card processor except the given processor type.\n */\nexport const hasOtherAvailableCreditCardProcessor = (type: string) =>\n  availableProcessors().some(({ processor_type }) => processor_type !== type && 'paypal' !== processor_type && 'mock' !== processor_type);\n\n/**\n * Get a sorted array of manual payment methods\n * based on recurring requirements.\n */\nexport const availableManualPaymentMethods = () =>\n  sortByArray(state.manualPaymentMethods, 'id', state.sortOrder.manualPaymentMethods)\n    .filter(processor => !(state.disabled.processors || []).includes(processor?.id))\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.reusable : true)); // recurring.\n\n/**\n * Get a sorted array of mollie payment method types.\n */\nexport const availableMethodTypes = () =>\n  sortByArray(state.methods, 'id', state.sortOrder.paymentMethods.mollie).filter(method => {\n    if (method.id === 'applepay') {\n      return (window as any)?.ApplePaySession && (window as any)?.ApplePaySession?.canMakePayments?.();\n    }\n    return true;\n  });\n\n/**\n * Get a combined available processor choices (processors + manual payment methods)\n */\nexport const availableProcessorChoices = () => [...availableProcessors(), ...availableManualPaymentMethods()];\n\n/**\n * Do we have multiple processors.\n */\nexport const hasMultipleProcessorChoices = () => availableProcessorChoices()?.length > 1;\n\n/**\n * Get a combined available payment methods (method types + manual payment methods)\n */\nexport const availableMethodChoices = () => [...availableMethodTypes(), ...availableManualPaymentMethods(), ...[getProcessorByType('mock')]].filter(Boolean);\n\n/**\n * Do we have multiple payment methods.\n */\nexport const hasMultipleMethodChoices = () => availableMethodChoices()?.length > 1;\n"],"version":3}
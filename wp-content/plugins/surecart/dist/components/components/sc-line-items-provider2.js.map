{"file":"sc-line-items-provider2.js","mappings":"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","names":[],"sources":["./src/components/providers/line-items-provider/sc-line-items-provider.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, h, Listen, Prop, State, Watch } from '@stencil/core';\n\nimport { convertLineItemsToLineItemData } from '../../../functions/line-items';\nimport { Checkout, LineItemData } from '../../../types';\n\n@Component({\n  tag: 'sc-line-items-provider',\n  shadow: true,\n})\nexport class ScLineItemsProvider {\n  /** Order Object */\n  @Prop() order: Checkout;\n\n  /** Holds items to sync */\n  @State() syncItems: Array<{ type: 'toggle' | 'add' | 'remove' | 'update'; payload: LineItemData }> = [];\n\n  /** Update line items event */\n  @Event() scUpdateLineItems: EventEmitter<Array<LineItemData>>;\n\n  /** Handle line item toggle */\n  @Listen('scToggleLineItem')\n  handleLineItemToggle(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('toggle', lineItem);\n  }\n\n  /** Handle line item remove */\n  @Listen('scRemoveLineItem')\n  handleLineItemRemove(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('remove', lineItem);\n  }\n\n  /** Handle line item add */\n  @Listen('scAddLineItem')\n  handleLineItemAdd(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('add', lineItem);\n  }\n\n  /** Handle line item add */\n  @Listen('scUpdateLineItem')\n  handleLineItemUpdate(e: CustomEvent) {\n    const lineItem = e.detail as LineItemData;\n    this.addSyncItem('update', lineItem);\n  }\n\n  /** We listen to the syncItems array and run it on the next render in batch */\n  @Watch('syncItems')\n  async syncItemsHandler(val) {\n    if (!val?.length) return;\n    setTimeout(() => {\n      if (!this.syncItems?.length) return;\n      const items = this.processSyncItems();\n      this.scUpdateLineItems.emit(items);\n      this.syncItems = [];\n    }, 100);\n  }\n\n  /** Add item to sync */\n  addSyncItem(type: 'add' | 'remove' | 'toggle' | 'update', payload: LineItemData) {\n    this.syncItems = [...this.syncItems, ...[{ type, payload }]];\n  }\n\n  /** Batch process items to sync before sending */\n  processSyncItems() {\n    // get existing line item data.\n    let existingData = convertLineItemsToLineItemData(this?.order?.line_items || []);\n\n    const map = {\n      toggle: this.toggleItem,\n      add: this.addItem,\n      remove: this.removeItem,\n      update: this.updateItem,\n    };\n\n    // run existing data through chain of sync updates.\n    (this.syncItems || []).forEach(item => {\n      existingData = map[item.type](item.payload, existingData) as any;\n    });\n\n    return existingData;\n  }\n\n  /** Add item */\n  addItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    return [...existingLineData, ...[item]];\n  }\n\n  /** Toggle item */\n  toggleItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    // find existing item.\n    const existingPriceId = existingLineData.find(line => line.price_id === item.price_id)?.price_id;\n    // toggle it.\n    existingLineData = existingPriceId ? existingLineData.filter(item => existingPriceId !== item.price_id) : [...existingLineData, ...[item]];\n    // return.\n    return existingLineData;\n  }\n\n  /** Remove item */\n  removeItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    if (!item.price_id) return existingLineData;\n    return existingLineData.filter(data => data.price_id !== item.price_id);\n  }\n\n  /** Update the item item */\n  updateItem(item: LineItemData, existingLineData: Array<LineItemData>) {\n    // find existing item.\n    const existingLineItem = existingLineData.findIndex(line => line.price_id === item.price_id);\n    // if we found it, update it\n    if (existingLineItem !== -1) {\n      existingLineData[existingLineItem] = item;\n      // otherwise, add it\n    } else {\n      return [...existingLineData, ...[item]];\n    }\n\n    return existingLineData;\n  }\n\n  render() {\n    return <slot />;\n  }\n}\n"],"version":3}
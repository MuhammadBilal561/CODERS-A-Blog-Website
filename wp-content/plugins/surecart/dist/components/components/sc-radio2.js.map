{"file":"sc-radio2.js","mappings":"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","names":[],"sources":["./src/components/ui/radio/sc-radio.scss?tag=sc-radio&encapsulation=shadow","./src/components/ui/radio/sc-radio.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n}\n\n::slotted([slot='description']) {\n  display: block;\n  color: var(--sc-radio-description-color, var(--sc-input-help-text-color, var(--sc-color-gray-500)));\n  line-height: var(--sc-line-height-dense);\n  margin: 0.5em 0 0;\n  font-size: var(--sc-font-size-small);\n}\n\n.radio {\n  display: inline-flex;\n  align-items: flex-start;\n  font-family: var(--sc-input-font-family);\n  font-size: var(--sc-input-font-size-medium);\n  font-weight: var(--sc-input-font-weight);\n  color: var(--sc-input-color);\n  vertical-align: middle;\n  gap: var(--sc-spacing-xx-small);\n}\n\n.radio:not(.radio--editing) {\n  cursor: pointer;\n}\n\n.radio__icon {\n  display: inline-flex;\n  width: var(--sc-radio-size);\n  height: var(--sc-radio-size);\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.radio__control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--sc-radio-size);\n  height: var(--sc-radio-size);\n  border: solid var(--sc-input-border-width) var(--sc-input-border-color);\n  border-radius: 50%;\n  background-color: var(--sc-input-background-color);\n  color: transparent;\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) border-color, var(--sc-input-transition, var(--sc-transition-medium)) opacity,\n    var(--sc-input-transition, var(--sc-transition-medium)) background-color, var(--sc-input-transition, var(--sc-transition-medium)) color,\n    var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n// Hover\n.radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover {\n  border-color: var(--sc-input-border-color-hover);\n  background-color: var(--sc-input-background-color-hover);\n}\n\n// Focus\n.radio.radio--focused:not(.radio--checked):not(.radio--disabled) .radio__control {\n  border-color: var(--sc-input-border-color-focus);\n  background-color: var(--sc-input-background-color-focus);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Checked\n.radio--checked .radio__control {\n  color: var(--var-sc-checked-radio-background-color, var(--sc-input-background-color));\n  border-color: var(--sc-color-primary-500);\n  background-color: var(--sc-color-primary-500);\n}\n\n// Checked + hover\n.radio.radio--checked:not(.radio--disabled) .radio__control:hover {\n  opacity: 0.8;\n}\n\n// Checked + focus\n.radio.radio--checked:not(.radio--disabled).radio--focused .radio__control {\n  border-color: var(--var-sc-checked-radio-border-color, var(--sc-input-background-color));\n  background-color: var(--sc-color-primary-500);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Disabled\n.radio--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n// When the control isn't checked, hide the circle for Windows High Contrast mode a11y\n.radio:not(.radio--checked) svg circle {\n  opacity: 0;\n}\n\n.radio__label {\n  line-height: var(--sc-radio-size);\n  margin-left: 0.5em;\n  user-select: none;\n}\n","import { Component, Prop, h, Event, EventEmitter, Method, State, Element, Watch } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part control - The control wrapper.\n * @part checked-icon - Checked icon.\n * @part label - The label.\n */\n@Component({\n  tag: 'sc-radio',\n  styleUrl: 'sc-radio.scss',\n  shadow: true,\n})\nexport class ScRadio {\n  @Element() el: HTMLScRadioElement;\n  private input: HTMLInputElement;\n  private formController: any;\n  private inputId: string = `radio-${++id}`;\n  private labelId: string = `radio-label-${id}`;\n\n  /** Does the radio have focus */\n  @State() hasFocus: boolean = false;\n\n  /** The radios name attribute */\n  @Prop() name: string;\n\n  /** The radios value */\n  @Prop() value: string;\n\n  /** Is the radio disabled */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean = false;\n\n  /** Draws the radio in a checked state. */\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\n\n  /** Is this required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /** This will be true as a workaround in the block editor to focus on the content. */\n  @Prop() edit: boolean;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event() scChange: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Simulates a click on the radio. */\n  @Method()\n  async ceClick() {\n    this.input.click();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  @Watch('checked')\n  handleCheckedChange() {\n    if (!this.input) return;\n    if (this.checked) {\n      this.getSiblingRadios().map(radio => (radio.checked = false));\n    }\n    this.input.checked = this.checked;\n    this.scChange.emit();\n  }\n\n  handleClick() {\n    this.checked = true;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  getAllRadios() {\n    const radioGroup = this.el.closest('sc-radio-group');\n    // Radios must be part of a radio group\n    if (!radioGroup) {\n      return [];\n    }\n    return [...radioGroup.querySelectorAll('sc-radio')] as HTMLScRadioElement[];\n  }\n\n  getSiblingRadios() {\n    return this.getAllRadios().filter(radio => radio !== this.el) as HTMLScRadioElement[];\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.edit) return true;\n\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      const radios = this.getAllRadios().filter(radio => !radio.disabled);\n      const incr = ['ArrowUp', 'ArrowLeft'].includes(event.key) ? -1 : 1;\n      let index = radios.indexOf(this.el) + incr;\n      if (index < 0) index = radios.length - 1;\n      if (index > radios.length - 1) index = 0;\n\n      this.getAllRadios().map(radio => (radio.checked = false));\n      radios[index].focus();\n      radios[index].checked = true;\n\n      event.preventDefault();\n    }\n  }\n\n  // Prevent clicks on the label from briefly blurring the input\n  handleMouseDown(event: MouseEvent) {\n    if (this.edit) return true;\n    event.preventDefault();\n    this.input.focus();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el, {\n      value: (control: HTMLScChoiceElement) => (control.checked ? control.value : undefined),\n    }).addFormData();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    const Tag = this.edit ? 'div' : 'label';\n    return (\n      <Tag\n        part=\"base\"\n        class={{\n          'radio': true,\n          'radio--checked': this.checked,\n          'radio--disabled': this.disabled,\n          'radio--focused': this.hasFocus,\n          'radio--editing': this.edit,\n        }}\n        htmlFor={this.inputId}\n        onKeyDown={e => this.handleKeyDown(e)}\n        onMouseDown={e => this.handleMouseDown(e)}\n      >\n        <span part=\"control\" class=\"radio__control\">\n          <span part=\"checked-icon\" class=\"radio__icon\">\n            <svg viewBox=\"0 0 16 16\">\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g fill=\"currentColor\">\n                  <circle cx=\"8\" cy=\"8\" r=\"3.42857143\"></circle>\n                </g>\n              </g>\n            </svg>\n          </span>\n          <input\n            id={this.inputId}\n            ref={el => (this.input = el as HTMLInputElement)}\n            type=\"radio\"\n            name={this.name}\n            value={this.value}\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-disabled={this.disabled ? 'true' : 'false'}\n            aria-labelledby={this.labelId}\n            onClick={() => this.handleClick()}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          />\n        </span>\n        <span part=\"label\" id={this.labelId} class=\"radio__label\">\n          <slot />\n          <slot name=\"description\"></slot>\n        </span>\n      </Tag>\n    );\n  }\n}\n"],"version":3}
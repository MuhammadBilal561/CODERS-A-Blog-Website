{"file":"sc-dialog2.js","mappings":";;;;;;AAAA,MAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AAExB;AACA;AACA;AACA;SACgB,iBAAiB,CAAC,SAAsB;EACtD,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;EACrB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAChD,CAAC;AAED;AACA;AACA;SACgB,mBAAmB,CAAC,SAAsB;EACxD,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;EAExB,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE;IACpB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;GAClD;AACH;;ACpBA,MAAM,WAAW,GAAG,mpDAAmpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CCoN9nD,UAAE;;;;;;;;;;;;;AAgB3C;;;;;;;AAQA;;;;;;;AAQA;;;;AAKA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/functions/scroll.ts","./src/components/ui/sc-dialog/sc-dialog.scss?tag=sc-dialog&encapsulation=shadow","./src/components/ui/sc-dialog/sc-dialog.tsx"],"sourcesContent":["const locks = new Set();\n\n//\n// Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\n// without premature unlocking.\n//\nexport function lockBodyScrolling(lockingEl: HTMLElement) {\n  locks.add(lockingEl);\n  document.body.classList.add('sc-scroll-lock');\n}\n\n//\n// Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.\n//\nexport function unlockBodyScrolling(lockingEl: HTMLElement) {\n  locks.delete(lockingEl);\n\n  if (locks.size === 0) {\n    document.body.classList.remove('sc-scroll-lock');\n  }\n}\n",":host {\n  --width: 31rem;\n  --header-spacing: var(--sc-spacing-large);\n  --body-spacing: var(--sc-spacing-large);\n  --footer-spacing: var(--sc-spacing-large);\n  display: contents;\n}\n[hidden] {\n  display: none !important;\n}\n.dialog {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: var(--sc-z-index-dialog);\n  box-sizing: border-box;\n  text-align: left;\n}\n.dialog__panel {\n  display: flex;\n  flex-direction: column;\n  z-index: 2;\n  width: var(--width);\n  max-width: 100vw;\n  max-height: 100vh;\n  background-color: var(--sc-panel-background-color);\n  border-radius: var(--sc-border-radius-medium);\n  box-shadow: var(--sc-shadow-x-large);\n  position: relative;\n}\n.dialog__panel:focus {\n  outline: none;\n}\n/* Ensure there's enough vertical padding for phones that don't update vh when chrome appears (e.g. iPhone) */\n@media screen and (max-width: 420px) {\n  .dialog__panel {\n    max-height: 80vh;\n  }\n}\n.dialog--open .dialog__panel {\n  display: flex;\n  opacity: 1;\n  transform: none;\n}\n.dialog__header {\n  flex: 0 0 auto;\n  display: flex;\n  border-bottom: 1px solid var(--sc-color-gray-300);\n}\n.dialog__title {\n  flex: 1 1 auto;\n  font: inherit;\n  font-size: var(--sc-font-size-large);\n  line-height: var(--sc-line-height-dense);\n  padding: var(--header-spacing);\n  margin: 0;\n}\n.dialog__close {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  font-size: var(--sc-font-size-x-large);\n  padding: 0 calc(var(--header-spacing) / 2);\n  z-index: 2;\n}\n.dialog__body {\n  flex: 1 1 auto;\n  padding: var(--body-spacing);\n  overflow: var(--dialog-body-overflow, auto);\n  -webkit-overflow-scrolling: touch;\n}\n.dialog__footer {\n  flex: 0 0 auto;\n  text-align: right;\n  padding: var(--footer-spacing);\n}\n.dialog__footer ::slotted(sl-button:not(:first-of-type)) {\n  margin-left: var(--sc-spacing-x-small);\n}\n.dialog:not(.dialog--has-footer) .dialog__footer {\n  display: none;\n}\n.dialog__overlay {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: var(--sc-overlay-background-color);\n}\n","import { Component, h, Prop, State, Element, Watch, Event, EventEmitter } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { animateTo, stopAnimations } from '../../../functions/animate';\nimport { getAnimation, setDefaultAnimation } from '../../../functions/animation-registry';\nimport { lockBodyScrolling, unlockBodyScrolling } from '../../../functions/scroll';\n\n@Component({\n  tag: 'sc-dialog',\n  styleUrl: 'sc-dialog.scss',\n  shadow: true,\n})\nexport class ScDialog {\n  @Element() el!: HTMLElement;\n\n  private dialog: HTMLElement;\n  private panel: HTMLElement;\n  private overlay: HTMLElement;\n\n  private originalTrigger: HTMLElement | null;\n\n  /** Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods. */\n  @Prop({ reflect: true }) open: boolean = false;\n\n  /**\n   * The dialog's label as displayed in the header. You should always include a relevant label even when using\n   * `no-header`, as it is required for proper accessibility.\n   */\n  @Prop({ reflect: true }) label = '';\n\n  /**\n   * Disables the header. This will also remove the default close button, so please ensure you provide an easy,\n   * accessible way for users to dismiss the dialog.\n   */\n  @Prop({ reflect: true }) noHeader: boolean = false;\n\n  /** Does this have a footer */\n  @State() hasFooter: boolean = false;\n\n  /** Request close event */\n  @Event({ cancelable: true }) scRequestClose: EventEmitter<'close-button' | 'keyboard' | 'overlay'>;\n  @Event() scShow: EventEmitter<void>;\n  @Event() scAfterShow: EventEmitter<void>;\n  @Event() scHide: EventEmitter<void>;\n  @Event() scAfterHide: EventEmitter<void>;\n  @Event({ cancelable: true }) scInitialFocus: EventEmitter<void>;\n\n  /** Shows the dialog. */\n  async show() {\n    if (this.open) {\n      return undefined;\n    }\n    this.open = true;\n  }\n\n  /** Hides the dialog */\n  async hide() {\n    if (!this.open) {\n      return undefined;\n    }\n    this.open = false;\n  }\n\n  private requestClose(source: 'close-button' | 'keyboard' | 'overlay') {\n    const slRequestClose = this.scRequestClose.emit(source);\n\n    if (slRequestClose.defaultPrevented) {\n      const animation = getAnimation(this.el, 'dialog.denyClose');\n      animateTo(this.panel, animation.keyframes, animation.options);\n      return;\n    }\n\n    this.hide();\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      this.requestClose('keyboard');\n    }\n  }\n\n  @Watch('open')\n  async handleOpenChange() {\n    if (this.open) {\n      // Show\n      this.scShow.emit();\n\n      lockBodyScrolling(this.el);\n\n      // When the dialog is shown, Safari will attempt to set focus on whatever element has autofocus. This can cause\n      // the dialogs's animation to jitter (if it starts offscreen), so we'll temporarily remove the attribute, call\n      // `focus({ preventScroll: true })` ourselves, and add the attribute back afterwards.\n      //\n      // Related: https://github.com/shoelace-style/shoelace/issues/693\n      //\n      const autoFocusTarget = this.el.querySelector('[autofocus]');\n      if (autoFocusTarget) {\n        autoFocusTarget.removeAttribute('autofocus');\n      }\n\n      await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);\n      this.dialog.hidden = false;\n\n      // Set initial focus\n      requestAnimationFrame(() => {\n        const slInitialFocus = this.scInitialFocus.emit();\n\n        if (!slInitialFocus.defaultPrevented) {\n          // Set focus to the autofocus target and restore the attribute\n          if (autoFocusTarget) {\n            (autoFocusTarget as HTMLInputElement).focus({ preventScroll: true });\n          } else {\n            this.panel.focus({ preventScroll: true });\n          }\n        }\n\n        // Restore the autofocus attribute\n        if (autoFocusTarget) {\n          autoFocusTarget.setAttribute('autofocus', '');\n        }\n      });\n\n      const panelAnimation = getAnimation(this.el, 'dialog.show');\n      const overlayAnimation = getAnimation(this.el, 'dialog.overlay.show');\n      await Promise.all([animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options), animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)]);\n\n      this.scAfterShow.emit();\n    } else {\n      // Hide\n      this.scHide.emit();\n      await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);\n      const panelAnimation = getAnimation(this.el, 'dialog.hide');\n      const overlayAnimation = getAnimation(this.el, 'dialog.overlay.hide');\n      await Promise.all([animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options), animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)]);\n      this.dialog.hidden = true;\n\n      unlockBodyScrolling(this.el);\n\n      // Restore focus to the original trigger\n      const trigger = this.originalTrigger;\n      if (typeof trigger?.focus === 'function') {\n        setTimeout(() => trigger.focus());\n      }\n\n      this.scAfterHide.emit();\n    }\n  }\n\n  componentDidLoad() {\n    this.hasFooter = !!this.el.querySelector('[slot=\"footer\"]');\n    this.dialog.hidden = !this.open;\n\n    if (this.open) {\n      lockBodyScrolling(this.el);\n    }\n  }\n\n  disconnectedCallback() {\n    unlockBodyScrolling(this.el);\n  }\n\n  render() {\n    return (\n      <div\n        part=\"base\"\n        ref={el => (this.dialog = el as HTMLElement)}\n        class={{\n          'dialog': true,\n          'dialog--open': this.open,\n          'dialog--has-footer': this.hasFooter,\n        }}\n        onKeyDown={e => this.handleKeyDown(e)}\n      >\n        <div\n          part=\"overlay\"\n          class=\"dialog__overlay\"\n          onClick={e => {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.requestClose('overlay');\n          }}\n          ref={el => (this.overlay = el as HTMLElement)}\n          tabindex=\"-1\"\n        ></div>\n        <div\n          part=\"panel\"\n          class=\"dialog__panel\"\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-hidden={this.open ? 'false' : 'true'}\n          aria-label={this.noHeader || this.label}\n          aria-labelledby={!this.noHeader || 'title'}\n          ref={el => (this.panel = el as HTMLElement)}\n          tabindex=\"0\"\n        >\n          {!this.noHeader && (\n            <header part=\"header\" class=\"dialog__header\">\n              <h2 part=\"title\" class=\"dialog__title\" id=\"title\">\n                <slot name=\"label\"> {this.label.length > 0 ? this.label : String.fromCharCode(65279)} </slot>\n              </h2>\n              <sc-button\n                class=\"dialog__close\"\n                type=\"text\"\n                circle\n                part=\"close-button\"\n                exportparts=\"base:close-button__base\"\n                onClick={e => {\n                  e.preventDefault();\n                  e.stopImmediatePropagation();\n                  this.requestClose('close-button');\n                }}\n              >\n                <sc-icon name=\"x\" label={__('Close', 'surecart')}></sc-icon>\n              </sc-button>\n            </header>\n          )}\n          <div part=\"body\" class=\"dialog__body\">\n            <slot></slot>\n          </div>\n          <footer part=\"footer\" class=\"dialog__footer\">\n            <slot name=\"footer\"></slot>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nsetDefaultAnimation('dialog.show', {\n  keyframes: [\n    { opacity: 0, transform: 'scale(0.8)' },\n    { opacity: 1, transform: 'scale(1)' },\n  ],\n  options: { duration: 150, easing: 'ease' },\n});\n\nsetDefaultAnimation('dialog.hide', {\n  keyframes: [\n    { opacity: 1, transform: 'scale(1)' },\n    { opacity: 0, transform: 'scale(0.8)' },\n  ],\n  options: { duration: 150, easing: 'ease' },\n});\n\nsetDefaultAnimation('dialog.denyClose', {\n  keyframes: [{ transform: 'scale(1)' }, { transform: 'scale(1.02)' }, { transform: 'scale(1)' }],\n  options: { duration: 150 },\n});\n\nsetDefaultAnimation('dialog.overlay.show', {\n  keyframes: [{ opacity: 0 }, { opacity: 1 }],\n  options: { duration: 150 },\n});\n\nsetDefaultAnimation('dialog.overlay.hide', {\n  keyframes: [{ opacity: 1 }, { opacity: 0 }],\n  options: { duration: 150 },\n});\n"],"version":3}
{"file":"sc-cart-session-provider2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA8DwB,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/providers/cart-session-provider/sc-cart-session-provider.tsx"],"sourcesContent":["import { Component, Element, Event, EventEmitter, h, Listen } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { state as checkoutState } from '@store/checkout';\n\nimport { updateCheckout } from '../../../services/session';\nimport { Checkout, LineItemData } from '../../../types';\nimport { createErrorNotice, removeNotice } from '@store/notices/mutations';\nimport { updateFormState } from '@store/form/mutations';\nimport { clearCheckout } from '@store/checkout/mutations';\n\n@Component({\n  tag: 'sc-cart-session-provider',\n  shadow: true,\n})\nexport class ScCartSessionProvider {\n  /** Element */\n  @Element() el: HTMLElement;\n\n  /** Set the state */\n  @Event() scSetState: EventEmitter<'loading' | 'busy' | 'navigating' | 'idle'>;\n\n  @Listen('scUpdateOrder')\n  handleUpdateSession(e) {\n    const { data, options } = e.detail;\n    if (options?.silent) {\n      this.update(data);\n    } else {\n      this.loadUpdate(data);\n    }\n  }\n\n  /** Handles coupon updates. */\n  @Listen('scApplyCoupon')\n  async handleCouponApply(e) {\n    const promotion_code = e.detail;\n    removeNotice();\n    this.loadUpdate({\n      discount: {\n        ...(promotion_code ? { promotion_code } : {}),\n      },\n    });\n  }\n\n  /** Handle the error response. */\n  handleErrorResponse(e) {\n    if (e?.code === 'readonly' || e?.additional_errors?.[0]?.code === 'checkout.customer.account_mismatch') {\n      clearCheckout();\n    }\n\n    // expired\n    if (e?.code === 'rest_cookie_invalid_nonce') {\n      updateFormState('EXPIRE');\n      return;\n    }\n\n    // something went wrong\n    if (e?.message) {\n      createErrorNotice(e);\n    }\n\n    // handle curl timeout errors.\n    if (e?.code === 'http_request_failed') {\n      createErrorNotice(__('Something went wrong. Please reload the page and try again.', 'surecart'));\n    }\n  }\n\n  /** Fetch a session. */\n  async fetch(args = {}) {\n    this.loadUpdate({ status: 'draft', ...args });\n  }\n\n  /** Update a the order */\n  async update(data = {}, query = {}) {\n    try {\n      checkoutState.checkout = (await updateCheckout({\n        id: checkoutState.checkout?.id,\n        data: {\n          ...data,\n        },\n        query: {\n          ...query,\n        },\n      })) as Checkout;\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n\n  /** Updates a session with loading status changes. */\n  async loadUpdate(data = {}) {\n    try {\n      updateFormState('FETCH');\n      await this.update(data);\n      updateFormState('RESOLVE');\n    } catch (e) {\n      updateFormState('REJECT');\n      this.handleErrorResponse(e);\n    }\n  }\n\n  render() {\n    return (\n      <sc-line-items-provider order={checkoutState.checkout} onScUpdateLineItems={e => this.loadUpdate({ line_items: e.detail as Array<LineItemData> })}>\n        <slot />\n      </sc-line-items-provider>\n    );\n  }\n}\n"],"version":3}
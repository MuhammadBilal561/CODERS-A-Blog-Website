{"file":"sc-order-password.js","mappings":";;;;;;;AAAA,MAAM,kBAAkB,GAAG,kIAAkI;;MCShJA,iBAAe;;;;;;gBAMoC,QAAQ;iBAGrC,EAAE;gBAGH,KAAK;;qBAMR,IAAI;gBAGV,EAAE;;oBAMoB,KAAK;oBAGL,KAAK;oBAGd,KAAK;;;wBASD,KAAK;;;;4BAYD,IAAI;;EAGhD,MAAM,cAAc;;IAClB,OAAO,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,cAAc,kDAAI,CAAC;GACvC;EAED,MAAM;IACJ,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAS,CAAC;KAClD;IAED,QACE,mBACE,KAAK,EAAE,IAAI,CAAC,KAAK,gBACL,IAAI,CAAC,KAAK,EACtB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,EACtC,IAAI,EAAC,UAAU,EACf,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,EAA2B,CAAC,EACrD,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,EACzC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB,EACrD,YAAY,EAAE,IAAI,CAAC,YAAY,GAC/B,EACF;GACH;;;;;;;;;;;;;;;;;;;;;;;AAGH,YAAY,CAACA,iBAAe,EAAE,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["ScOrderPassword"],"sources":["./src/components/controllers/checkout-form/order-password/sc-order-password.scss?tag=sc-order-password&encapsulation=shadow","./src/components/controllers/checkout-form/order-password/sc-order-password.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.password {\n  display: grid;\n  gap: var(--sc-form-row-spacing, 0.75em);\n  &__hint {\n    padding-top: 0.36rem;\n    color: red;\n  }\n}\n","import { Component, Prop, h, Host, Method } from '@stencil/core';\nimport { openWormhole } from 'stencil-wormhole';\nimport { __ } from '@wordpress/i18n';\n\n@Component({\n  tag: 'sc-order-password',\n  styleUrl: 'sc-order-password.scss',\n  shadow: true,\n})\nexport class ScOrderPassword {\n  private input: HTMLScPasswordElement;\n\n  @Prop() loggedIn: boolean;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Does the email exist? */\n  @Prop() emailExists: boolean;\n\n  /** The input's password confirmation attribute. */\n  @Prop({ reflect: true }) confirmation = false;\n\n  /** The input's confirmation label text. */\n  @Prop() confirmationLabel: string;\n\n  /** The input's confirmation placeholder text. */\n  @Prop() confirmationPlaceholder: string;\n\n  /** The input's confirmation help text. */\n  @Prop() confirmationHelp: string;\n\n  /** Ensures strong password validation. */\n  @Prop({ reflect: true }) enableValidation = true;\n\n  @Method()\n  async reportValidity() {\n    return this.input?.reportValidity?.();\n  }\n\n  render() {\n    if (this.loggedIn) {\n      return <Host style={{ display: 'none' }}></Host>;\n    }\n\n    return (\n      <sc-password\n        label={this.label}\n        aria-label={this.label}\n        help={this.help}\n        autofocus={this.autofocus}\n        placeholder={this.placeholder}\n        showLabel={this.showLabel}\n        size={this.size ? this.size : 'medium'}\n        name=\"password\"\n        ref={el => (this.input = el as HTMLScPasswordElement)}\n        value={this.value}\n        required={this.required}\n        disabled={this.disabled}\n        enableValidation={this.enableValidation}\n        confirmationHelp={this.confirmationHelp}\n        confirmationLabel={this.confirmationLabel}\n        confirmationPlaceholder={this.confirmationPlaceholder}\n        confirmation={this.confirmation}\n      />\n    );\n  }\n}\n\nopenWormhole(ScOrderPassword, ['loggedIn', 'emailExists'], false);\n"],"version":3}
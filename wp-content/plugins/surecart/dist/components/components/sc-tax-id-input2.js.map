{"file":"sc-tax-id-input2.js","mappings":";;;;;;;;;;;;;AAAA,MAAM,eAAe,GAAG,kDAAkD;;;;;;;;;;;;;;;;;;sBCoC3C,UAAE;sBAGF,UAAE;sBAGF,UAAE;sBAGF,UAAE;sBAGF,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oPAuFX,UAAE,qCACD,UAAE;;;;;;;;;;;;gmBAyB6F,UAAE;;;;;;;;;;;;;;;;;;;;;;;gBA+B1F,eAAO,CAAC,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/ui/tax-id-input/sc-tax-id-input.css?tag=sc-tax-id-input&encapsulation=shadow","./src/components/ui/tax-id-input/sc-tax-id-input.tsx"],"sourcesContent":[":host {\n  display: block;\n  z-index: 3;\n  position: relative;\n}\n","import { Component, h, Prop, Fragment, Watch, Event, EventEmitter, Method } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\nimport { zones } from '../../../functions/tax';\n\n@Component({\n  tag: 'sc-tax-id-input',\n  styleUrl: 'sc-tax-id-input.css',\n  shadow: true,\n})\nexport class ScTaxIdInput {\n  /** The input */\n  private input: HTMLScInputElement;\n\n  /** The country code. */\n  @Prop() country: string;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Type of tax id */\n  @Prop({ mutable: true }) type: string = 'other';\n\n  /** Tax ID Number */\n  @Prop() number: string = null;\n\n  /** The status */\n  @Prop() status: 'valid' | 'invalid' | 'unknown' = 'unknown';\n\n  /** Is this loading? */\n  @Prop() loading: boolean;\n\n  /** Help text. */\n  @Prop() help: string;\n\n  /** Other zones label */\n  @Prop() otherLabel: string = __('Tax ID', 'surecart');\n\n  /** GST zone label */\n  @Prop() caGstLabel: string = __('GST Number', 'surecart');\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string = __('ABN Number', 'surecart');\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string = __('UK VAT', 'surecart');\n\n  /** EU zone label */\n  @Prop() euVatLabel: string = __('EU VAT', 'surecart');\n\n  /** Tax ID Types which will be shown */\n  @Prop() taxIdTypes: string[] = [];\n\n  /** Whether tax input is required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Make a request to update the order. */\n  @Event() scChange: EventEmitter<{ number: string; number_type: string }>;\n\n  /** Make a request to update the order. */\n  @Event() scInput: EventEmitter<Partial<{ number: string; number_type: string }>>;\n\n  /** Change the Type */\n  @Event() scInputType: EventEmitter<string>;\n\n  /** Set the checkout state. */\n  @Event() scSetState: EventEmitter<string>;\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  @Watch('otherLabel')\n  @Watch('caGstLabel')\n  @Watch('auAbnLabel')\n  @Watch('gbVatLabel')\n  @Watch('euVatLabel')\n  onLabelChange() {\n    zones.ca_gst.label = this.caGstLabel || zones.ca_gst.label;\n    zones.au_abn.label = this.auAbnLabel || zones.au_abn.label;\n    zones.gb_vat.label = this.gbVatLabel || zones.gb_vat.label;\n    zones.eu_vat.label = this.euVatLabel || zones.eu_vat.label;\n    zones.other.label = this.otherLabel || zones.other.label;\n  }\n\n  componentWillLoad() {\n    this.onLabelChange();\n  }\n\n  renderStatus() {\n    if (this.status === 'valid') {\n      return <sc-icon name=\"check\" slot=\"prefix\" style={{ color: 'var(--sc-color-success-500)' }}></sc-icon>;\n    }\n    if (this.status === 'invalid') {\n      return <sc-icon name=\"x\" slot=\"prefix\" style={{ color: 'var(--sc-color-danger-500)' }}></sc-icon>;\n    }\n  }\n\n  filteredZones() {\n    if (!!this.taxIdTypes.length) {\n      return Object.keys(zones)\n        .filter(name => this.taxIdTypes.includes(name))\n        .reduce((obj, key) => {\n          obj[key] = zones[key];\n          return obj;\n        }, {});\n    }\n\n    return zones;\n  }\n\n  @Watch('taxIdTypes')\n  onTaxIdTypesChange() {\n    // If there is no other type, set the first one as default type.\n    if (!!this.taxIdTypes.length) {\n      this.type = !this.taxIdTypes.includes('other') ? this.taxIdTypes[0] : 'other';\n    }\n  }\n\n  getZoneLabel() {\n    const filteredZones = this.filteredZones() || {};\n\n    // Get the label of the current type or the other type.\n    // If there is no other type, get the first one.\n    return filteredZones?.[this?.type || 'other']?.label || filteredZones?.[Object.keys(filteredZones)[0]]?.label;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <sc-input name=\"tax_identifier.number_type\" required={this.required} value={this.type} style={{ display: 'none' }} />\n        <sc-input\n          ref={el => (this.input = el as HTMLScInputElement)}\n          label={this.getZoneLabel()}\n          aria-label={__('Tax ID', 'surecart')}\n          placeholder={__('Enter Tax ID', 'surecart')}\n          name=\"tax_identifier.number\"\n          value={this.number}\n          onScInput={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scInput.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          onScChange={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scChange.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          help={this.help}\n          required={this.required}\n        >\n          {this.loading && this.type === 'eu_vat' ? <sc-spinner slot=\"prefix\" style={{ '--spinner-size': '10px' }}></sc-spinner> : this.renderStatus()}\n\n          {Object.keys(this.filteredZones() || {})?.length === 1 ? (\n            <span slot=\"suffix\">{Object.values(this.filteredZones() || {})?.[0]?.['label_small']}</span>\n          ) : (\n            <sc-dropdown slot=\"suffix\" position=\"bottom-right\" role=\"select\" aria-multiselectable=\"false\" aria-label={__('Select number type', 'surecart')}>\n              <sc-button type=\"text\" slot=\"trigger\" caret loading={false} style={{ color: 'var(--sc-input-label-color)' }} tabindex=\"0\">\n                {this.filteredZones()?.[this?.type || 'other']?.label_small}\n              </sc-button>\n              <sc-menu>\n                {Object.keys(this.filteredZones() || {}).map(name => (\n                  <sc-menu-item\n                    role=\"option\"\n                    onClick={() => {\n                      this.scInput.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.scChange.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.type = name;\n                    }}\n                    onKeyDown={e => {\n                      if (e.key === 'Enter') {\n                        this.scInput.emit({\n                          number: this.number,\n                          number_type: name,\n                        });\n                        this.scChange.emit({\n                          number: this.number,\n                          number_type: name,\n                        });\n                        this.type = name;\n                        this.input?.triggerFocus();\n                        speak(sprintf(__('%s selected', 'surecart'), zones[name].label_small, 'assertive'));\n                      }\n                    }}\n                    checked={this.type === name}\n                    aria-selected={this.type === name ? 'true' : 'false'}\n                    aria-label={zones[name].label_small}\n                  >\n                    {zones[name].label_small}\n                  </sc-menu-item>\n                ))}\n              </sc-menu>\n            </sc-dropdown>\n          )}\n        </sc-input>\n      </Fragment>\n    );\n  }\n}\n"],"version":3}
{"file":"price.js","mappings":";;;;AASA;;;;;;;WAQW,eAAO,CAAC,UAAE;;;AAGrB;;;;;;;AAmBA;AAEA;;;;;;;;AAOA;sDAKmB,UAAE,kCACA,UAAE;;;0BAKG,eAAO,cAAc,UAAE,4CAA4C,UAAE;;0BAErE,eAAO,cAAc,UAAE,8CAA8C,UAAE;;0BAEvE,eAAO,cAAc,UAAE,gDAAgD,UAAE;;0BAEzE,eAAO,cAAc,UAAE,8CAA8C,UAAE;;;;AAIjG;mEAEkG,UAAE;;;mBAGjF,eAAO,cAAc,UAAE,4CAA4C,UAAE;;mBAErE,eAAO,cAAc,UAAE,0CAA0C,UAAE;;mBAEnE,eAAO,cAAc,UAAE,6CAA6C,UAAE;;mBAEtE,eAAO,cAAc,UAAE,0CAA0C,UAAE;;;;AAItF;;;;;;qBAgBqB,UAAE;8DAEuC,UAAE;AAChE;uDAKa,UAAE;;;;;;;;AAUf;;;;;;;;cAUc,eAAO,CAAC,UAAE;AACxB;;SAGS,eAAO,CAAC,UAAE;AACnB;;;;;;;AAOA;;;;aAKa,UAAE;;aAEF,UAAE;;aAEF,UAAE;;aAEF,UAAE;;aAEF,UAAE;;aAEF,UAAE;;aAEF,UAAE;;;;aAIF,UAAE;;AAEf;;;;","names":[],"sources":["./src/functions/price.ts"],"sourcesContent":["import { __, _n, sprintf } from '@wordpress/i18n';\n\nimport { Coupon } from '../types';\nimport { zeroDecimalCurrencies } from './currency';\n\ntype recurringPriceDetails = { recurring_interval_count?: number; recurring_interval?: 'week' | 'month' | 'year' | 'never'; recurring_period_count: number };\n\nexport const convertAmount = (amount: number, currency: string) => {\n  return zeroDecimalCurrencies.includes(currency) ? amount : amount / 100;\n};\n\nexport const getHumanDiscount = (coupon: Coupon) => {\n  if (coupon?.amount_off && coupon?.currency) {\n    return getFormattedPrice({ amount: coupon.amount_off, currency: coupon.currency });\n  }\n  if (coupon?.percent_off) {\n    // Translators: Percent off.\n    return sprintf(__('%1d%% off', 'surecart'), coupon.percent_off | 0);\n  }\n  return '';\n};\n\nexport const getFormattedDiscount = (coupon: Coupon) => {\n  if (coupon?.percent_off) {\n    return `${coupon.percent_off | 0}%`;\n  }\n  if (coupon?.amount_off && coupon?.currency) {\n    return getFormattedPrice({ amount: coupon.amount_off, currency: coupon.currency });\n  }\n  return '';\n};\n\nexport const getFormattedPrice = ({ amount, currency }: { amount: number; currency: string }) => {\n  const converted = convertAmount(amount, currency);\n\n  return `${new Intl.NumberFormat(undefined, {\n    style: 'currency',\n    currency: currency,\n  }).format(parseFloat(converted.toFixed(2)))}`;\n};\n\n// get the currency symbol for a currency code.\nexport const getCurrencySymbol = (code: string = 'usd') => {\n  const formattedParts = new Intl.NumberFormat(undefined, {\n    style: 'currency',\n    currency: code,\n  }).formatToParts();\n  return formattedParts.find(part => part.type === 'currency')?.value;\n};\n\nexport const translateInterval = (\n  amount: number,\n  interval: string,\n  prefix: string = __('every', 'surecart'),\n  fallback: string = __('once', 'surecart'),\n  showSingle: boolean = false,\n) => {\n  switch (interval) {\n    case 'day':\n      return `${prefix} ${sprintf(showSingle ? _n('%d day', '%d days', amount, 'surecart') : _n('day', '%d days', amount, 'surecart'), amount)}`;\n    case 'week':\n      return `${prefix} ${sprintf(showSingle ? _n('%d week', '%d weeks', amount, 'surecart') : _n('week', '%d weeks', amount, 'surecart'), amount)}`;\n    case 'month':\n      return `${prefix} ${sprintf(showSingle ? _n('%d month', '%d months', amount, 'surecart') : _n('month', '%d months', amount, 'surecart'), amount)}`;\n    case 'year':\n      return `${prefix} ${sprintf(showSingle ? _n('%d year', '%d years', amount, 'surecart') : _n('year', '%d years', amount, 'surecart'), amount)}`;\n    default:\n      return fallback;\n  }\n};\n\nexport const translateAbbreviatedInterval = (amount: number, interval: string, fallback: string = __('once', 'surecart'), showSingle: boolean = false) => {\n  switch (interval) {\n    case 'day':\n      return ` / ${sprintf(showSingle ? _n('%d day', '%d days', amount, 'surecart') : _n('day', '%d days', amount, 'surecart'), amount)}`;\n    case 'week':\n      return ` / ${sprintf(showSingle ? _n('%d wk', '%d wks', amount, 'surecart') : _n('wk', '%d wks', amount, 'surecart'), amount)}`;\n    case 'month':\n      return ` / ${sprintf(showSingle ? _n('%d mo', '%d months', amount, 'surecart') : _n('mo', '%d mos', amount, 'surecart'), amount)}`;\n    case 'year':\n      return ` / ${sprintf(showSingle ? _n('%d yr', '%d yrs', amount, 'surecart') : _n('yr', '%d yrs', amount, 'surecart'), amount)}`;\n    default:\n      return fallback;\n  }\n};\n\ninterface IntervalOptions {\n  showOnce?: boolean;\n  abbreviate?: boolean;\n  labels?: {\n    interval?: string;\n    period?: string;\n    once?: string;\n  };\n}\nexport const intervalString = (price: recurringPriceDetails, options: IntervalOptions = {}) => {\n  if (!price) {\n    return '';\n  }\n  const { showOnce, labels, abbreviate } = options;\n  const { interval = __('every', 'surecart') } = labels || {};\n\n  return `${intervalCountString(price, interval, !!showOnce ? __('once', 'surecart') : '', abbreviate)} ${periodCountString(price, abbreviate)}`;\n};\n\nexport const intervalCountString = (\n  price: { recurring_interval_count?: number; recurring_interval?: 'week' | 'month' | 'year' | 'never'; recurring_period_count: number },\n  prefix,\n  fallback = __('once', 'surecart'),\n  abbreviate = false,\n) => {\n  if (!price.recurring_interval_count || !price.recurring_interval || 1 === price?.recurring_period_count) {\n    return '';\n  }\n  if (abbreviate) {\n    return translateAbbreviatedInterval(price.recurring_interval_count, price.recurring_interval, fallback);\n  }\n  return translateInterval(price.recurring_interval_count, price.recurring_interval, ` ${prefix}`, fallback);\n};\n\nexport const periodCountString = (price: recurringPriceDetails, abbreviate = false) => {\n  if (!price?.recurring_period_count || 1 === price?.recurring_period_count) {\n    return '';\n  }\n  if (abbreviate) {\n    return `x ${price.recurring_period_count}`;\n  }\n\n  return ` (${sprintf(_n('%d payment', '%d payments', price.recurring_period_count, 'surecart'), price.recurring_period_count)})`;\n};\n\nexport const translateRemainingPayments = payments => {\n  return sprintf(_n('%d payment remaining', '%d payments remaining', payments, 'surecart'), payments);\n};\n\nexport const productNameWithPrice = price => {\n  if (!price) {\n    return '';\n  }\n  return `${price?.product?.name} ${price?.name ? `â€” ${price.name}` : ''}`;\n};\n\nexport const getHumanDiscountRedeemableStatus = status => {\n  switch (status) {\n    case 'invalid':\n      return __('Not valid', 'surecart');\n    case 'expired':\n      return __('Expired', 'surecart');\n    case 'gone':\n      return __('Not available', 'surecart');\n    case 'less_than_min_subtotal_amount':\n      return __('Minimum not met', 'surecart');\n    case 'greater_than_max_subtotal_amount':\n      return __('Order too large', 'surecart');\n    case 'not_applicable':\n      return __('Product(s) not eligible', 'surecart');\n    case 'not_applicable_to_customer':\n      return __('Not eligible', 'surecart');\n    case '':\n      return '';\n    default:\n      return __('Not redeemable', 'surecart');\n  }\n};\n"],"version":3}
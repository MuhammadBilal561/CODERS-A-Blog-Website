{"file":"sc-customer-name.entry.js","mappings":";;;;;;;;;;;;;;;AAAA,MAAM,iBAAiB,GAAG,sBAAsB;;MCanC,cAAc;;;;;;gBAMqC,QAAQ;iBAGrC,IAAI;gBAGL,KAAK;;qBAMR,IAAI;gBAGV,EAAE;;oBAMoB,KAAK;oBAGL,KAAK;oBAGd,KAAK;mBAMS,KAAK;;;;;EAmBvD,MAAM,cAAc;IAClB,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;GACpC;;EAGD,MAAM,YAAY;IAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC9B,IAAI;MACFA,KAAa,CAAC,QAAQ,IAAI,MAAM,sBAAsB,CAAC,EAAE,EAAE,EAAEA,KAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAa,CAAC;KAC1I;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACtB;GACF;;EAGD,mBAAmB;;;IAEjB,IAAI,IAAI,CAAC,KAAK;MAAE,OAAO;IAEvB,MAAM,OAAO,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;IAC7C,IAAI,CAACC,OAAS,CAAC,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE;MACpC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;MACrB,OAAO;KACR;;IAGD,IAAIA,OAAS,CAAC,QAAQ,EAAE;MACtB,IAAI,CAAC,KAAK,GAAG,CAAA,MAAC,MAAAD,KAAa,aAAbA,KAAa,uBAAbA,KAAa,CAAE,QAAQ,0CAAE,QAAqB,0CAAE,IAAI,MAAI,MAAAA,KAAa,aAAbA,KAAa,uBAAbA,KAAa,CAAE,QAAQ,0CAAE,IAAI,CAAA,CAAC;;KAErG;SAAM;MACL,IAAI,CAAC,KAAK,GAAG,CAAA,MAAAA,KAAa,aAAbA,KAAa,uBAAbA,KAAa,CAAE,QAAQ,0CAAE,IAAI,MAAI,MAAC,MAAAA,KAAa,aAAbA,KAAa,uBAAbA,KAAa,CAAE,QAAQ,0CAAE,QAAqB,0CAAE,IAAI,CAAA,CAAC;KACrG;GACF;;EAGD,iBAAiB;IACf,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC3B,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,UAAU,EAAE,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;GACtF;;EAGD,oBAAoB;IAClB,IAAI,CAAC,sBAAsB,EAAE,CAAC;GAC/B;EAED,MAAM;IACJ,QACE,gBACE,IAAI,EAAC,MAAM,EACX,IAAI,EAAC,MAAM,EACX,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,EAAwB,CAAC,EAClD,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,YAAY,EAAC,MAAM,EACnB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,UAAU,EAAE,MAAM,IAAI,CAAC,YAAY,EAAE,EACrC,SAAS,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EACpC,SAAS,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EACpC,QAAQ,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GACxB,EACZ;GACH;;;;;;","names":["checkoutState","userState"],"sources":["./src/components/controllers/checkout-form/customer-name/sc-customer-name.css?tag=sc-customer-name&encapsulation=shadow","./src/components/controllers/checkout-form/customer-name/sc-customer-name.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Customer, Checkout } from '../../../../types';\nimport { createOrUpdateCheckout } from '../../../../services/session';\nimport { Component, Prop, h, Event, EventEmitter, Method } from '@stencil/core';\nimport { state as userState } from '@store/user';\nimport { state as checkoutState, onChange } from '@store/checkout';\nimport { getValueFromUrl } from '../../../../functions/util';\nimport { __ } from '@wordpress/i18n';\n\n@Component({\n  tag: 'sc-customer-name',\n  styleUrl: 'sc-customer-name.css',\n  shadow: true,\n})\nexport class ScCustomerName {\n  private input: HTMLScInputElement;\n\n  private removeCheckoutListener: () => void;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = null;\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** Emitted when the control receives input. */\n  @Event() scInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Don't allow a blank space as an input here. */\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Silently update the checkout when the input changes. */\n  async handleChange() {\n    this.value = this.input.value;\n    try {\n      checkoutState.checkout = (await createOrUpdateCheckout({ id: checkoutState.checkout.id, data: { name: this.input.value } })) as Checkout;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /** Sync customer email with session if it's updated by other means */\n  handleSessionChange() {\n    // we already have a value.\n    if (this.value) return;\n\n    const fromUrl = getValueFromUrl('full_name');\n    if (!userState.loggedIn && !!fromUrl) {\n      this.value = fromUrl;\n      return;\n    }\n\n    // we want the customer name to be forced if the user is logged in.\n    if (userState.loggedIn) {\n      this.value = (checkoutState?.checkout?.customer as Customer)?.name || checkoutState?.checkout?.name;\n      // otherwise we use the checkout name first.\n    } else {\n      this.value = checkoutState?.checkout?.name || (checkoutState?.checkout?.customer as Customer)?.name;\n    }\n  }\n\n  /** Listen to checkout. */\n  componentWillLoad() {\n    this.handleSessionChange();\n    this.removeCheckoutListener = onChange('checkout', () => this.handleSessionChange());\n  }\n\n  /** Remove listener. */\n  disconnectedCallback() {\n    this.removeCheckoutListener();\n  }\n\n  render() {\n    return (\n      <sc-input\n        type=\"text\"\n        name=\"name\"\n        ref={el => (this.input = el as HTMLScInputElement)}\n        value={this.value}\n        label={this.label}\n        help={this.help}\n        autocomplete=\"name\"\n        placeholder={this.placeholder}\n        readonly={this.readonly}\n        required={this.required}\n        invalid={this.invalid}\n        autofocus={this.autofocus}\n        hasFocus={this.hasFocus}\n        onScChange={() => this.handleChange()}\n        onScInput={() => this.scInput.emit()}\n        onScFocus={() => this.scFocus.emit()}\n        onScBlur={() => this.scBlur.emit()}\n      ></sc-input>\n    );\n  }\n}\n"],"version":3}
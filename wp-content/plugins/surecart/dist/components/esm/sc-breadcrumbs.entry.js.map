{"file":"sc-breadcrumbs.entry.js","mappings":";;AAAA,MAAM,gBAAgB,GAAG,iFAAiF;;MCW7F,aAAa;;;iBAMR,YAAY;;;EAGpB,YAAY;IAClB,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,sBAAsB,CAAoB,CAAC;IAC5F,MAAM,SAAS,GAAG,OAAO,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAgB,CAAC;;IAGhF,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAgB,CAAC;IAEvD,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACnF,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;IAEzB,OAAO,KAAK,CAAC;GACd;EAED,gBAAgB;IACd,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,kBAAkB,CAAoB,CAAC;IACxF,MAAM,KAAK,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,IAAI;MAClD,OAAO,IAAI,CAAC,QAAQ,KAAK,eAAe,CAAC;KAC1C,CAA8B,CAAC;IAEhC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;;MAExB,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;MAC3D,IAAI,SAAS,KAAK,IAAI,EAAE;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;OAClC;;MAGD,IAAI,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;OAC3C;WAAM;QACL,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;OACtC;KACF,CAAC,CAAC;GACJ;EAED,MAAM;IACJ,QACE,EAAC,QAAQ,QACP,WAAK,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,YAAY,gBAAa,IAAI,CAAC,KAAK,IACxD,YAAM,YAAY,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,GAAS,CACtD,EACN,WAAK,IAAI,EAAC,WAAW,EAAC,MAAM,uBAAa,MAAM,IAC7C,YAAM,IAAI,EAAC,WAAW,IACpB,eAAS,IAAI,EAAC,eAAe,GAAW,CACnC,CACH,CACG,EACX;GACH;;;;;;;","names":[],"sources":["./src/components/ui/breadcrumbs/sc-breadcrumbs.css?tag=sc-breadcrumbs&encapsulation=shadow","./src/components/ui/breadcrumbs/sc-breadcrumbs.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.breadcrumb {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n","import { Component, h, Fragment, Prop, Element } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n * @part separator - The separator.\n */\n@Component({\n  tag: 'sc-breadcrumbs',\n  styleUrl: 'sc-breadcrumbs.css',\n  shadow: true,\n})\nexport class ScBreadcrumbs {\n  @Element() el: HTMLElement;\n  /**\n   * The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\n   * other assistive devices.\n   */\n  @Prop() label = 'Breadcrumb';\n\n  // Generates a clone of the separator element to use for each breadcrumb item\n  private getSeparator() {\n    const slotted = this.el.shadowRoot.querySelector('slot[name=separator]') as HTMLSlotElement;\n    const separator = slotted.assignedElements({ flatten: true })[0] as HTMLElement;\n\n    // Clone it, remove ids, and slot it\n    const clone = separator.cloneNode(true) as HTMLElement;\n\n    [clone, ...clone.querySelectorAll('[id]')].forEach(el => el.removeAttribute('id'));\n    clone.slot = 'separator';\n\n    return clone;\n  }\n\n  handleSlotChange() {\n    const slotted = this.el.shadowRoot.querySelector('.breadcrumb slot') as HTMLSlotElement;\n    const items = slotted.assignedElements().filter(node => {\n      return node.nodeName === 'CE-BREADCRUMB';\n    }) as HTMLScBreadcrumbElement[];\n\n    items.forEach((item, index) => {\n      // Append separators to each item if they don't already have one\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        item.append(this.getSeparator());\n      }\n\n      // The last breadcrumb item is the \"current page\"\n      if (index === items.length - 1) {\n        item.setAttribute('aria-current', 'page');\n      } else {\n        item.removeAttribute('aria-current');\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <nav part=\"base\" class=\"breadcrumb\" aria-label={this.label}>\n          <slot onSlotchange={() => this.handleSlotChange()}></slot>\n        </nav>\n        <div part=\"separator\" hidden aria-hidden=\"true\">\n          <slot name=\"separator\">\n            <sc-icon name=\"chevron-right\"></sc-icon>\n          </slot>\n        </div>\n      </Fragment>\n    );\n  }\n}\n"],"version":3}